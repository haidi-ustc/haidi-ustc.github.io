<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>centos 之 Matplotlib不显示Times New Roman</title>
      <link href="/2022/01/08/computer/python/matplotlib/"/>
      <url>/2022/01/08/computer/python/matplotlib/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在centos下用python做科学论文图的时候需要用到Times New Roman字体，可是…… centos下并没有这个字体,运行下面代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">plt.rc(&#x27;font&#x27;,family=&#x27;Times New Roman&#x27;)</span><br></pre></td></tr></table></figure><p>出现错误信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserWarning: findfont: Font family [u&#x27;Times New Roman&#x27;] not found. Falling back to DejaVu Sans   (prop.get_family(), self.defaultFamily[fontext]))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>把本地电脑里C:\windows\fonts中的Time New Roman文件夹/4个文件拷贝到CentOS系统中的/usr/share/fonts目录下。</p><ol><li>times.ttf</li><li>timesbd.ttf</li><li>timesbi.ttf</li><li>timesi.ttf</li></ol></li><li><p>root下执行如下命令</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkfontscale</span><br><span class="line">mkfontdir</span><br><span class="line">fc-cache -fv</span><br></pre></td></tr></table></figure><ul><li>切换个人用户，删除matplotlib缓存</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm ~/.cache/matplotlib -rf</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from monty.serialization import loadfn</span><br><span class="line">import string</span><br><span class="line">from mpl_toolkits.axes_grid1.inset_locator import inset_axes</span><br><span class="line">from matplotlib.ticker import FormatStrFormatter</span><br><span class="line">from PIL import Image</span><br><span class="line">from matplotlib.gridspec import GridSpec</span><br><span class="line"></span><br><span class="line">def float_range(start,stop,step):</span><br><span class="line">      return [start+i*step for i in range(int((stop-start)//step))]</span><br><span class="line"></span><br><span class="line">#fig = plt.figure()</span><br><span class="line">font = &#123;&#x27;family&#x27;: &#x27;Times New Roman&#x27;, &#x27;size&#x27;: 14, &#x27;weight&#x27;:&#x27;bold&#x27;&#125;</span><br><span class="line">plt.rc(&#x27;font&#x27;, **font)</span><br><span class="line"></span><br><span class="line">cm = plt.cm.get_cmap(&#x27;RdYlBu&#x27;)</span><br><span class="line">               #  C  N    E</span><br><span class="line">NES=np.array([[ 12, 6, -156.36123303,60.1242],</span><br><span class="line"> [     3 , 4  ,-58.74306942,19.8460],</span><br><span class="line"> [     2 , 4 , -48.08202932,10.9879]])</span><br><span class="line"></span><br><span class="line">C=NES[:,0];</span><br><span class="line">print(C)</span><br><span class="line">N=NES[:,1];</span><br><span class="line">print(N)</span><br><span class="line">En=NES[:,2];</span><br><span class="line">S=NES[:,3];</span><br><span class="line">print(&#x27;En=&#x27;)</span><br><span class="line">print(En)</span><br><span class="line">print(&#x27;S=&#x27;)</span><br><span class="line">print(S)</span><br><span class="line"></span><br><span class="line">grap=-9.22704312</span><br><span class="line">nitro=-8.31684201</span><br><span class="line">step=0.005</span><br><span class="line">un=np.array(float_range(nitro,-4.3,step))</span><br><span class="line">uc=np.array(float_range(grap-1,-7.3,step))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#change phosphorus potentail</span><br><span class="line">color=[&#x27;r&#x27;,&#x27;g&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;m&#x27;,&#x27;y&#x27;,&#x27;k&#x27;];</span><br><span class="line"></span><br><span class="line">fig = plt.figure(figsize=(18,5))</span><br><span class="line">gs = GridSpec(1, 3, width_ratios=[1,1,1],  wspace=0.32)#, hspace=0.2)</span><br><span class="line">ax1 = plt.subplot(gs[0,0])</span><br><span class="line"></span><br><span class="line">for k in range(len(N)):</span><br><span class="line">   dE=(En[k]-C[k]*grap-N[k]*un)/(S[k]);</span><br><span class="line">   ax1.plot(un,dE,c=color[k],lw=2)</span><br><span class="line"></span><br><span class="line">lg=[r&#x27;$C_2N$&#x27;,r&#x27;g-$C_3N_4$&#x27;,r&#x27;penta-$CN_2$&#x27;]</span><br><span class="line">font = &#123;&#x27;family&#x27;: &#x27;Times New Roman&#x27;, &#x27;size&#x27;: 14&#125;</span><br><span class="line">ax1.legend(lg,prop=font)</span><br><span class="line">#ax1.set_title(&#x27;Stability of C_mN_n under different nitrogen chemical potential&#x27;)</span><br><span class="line">ax1.set_xlabel(r&#x27;$\mu_&#123;N&#125;$(eV)&#x27;)</span><br><span class="line">ax1.set_ylabel(r&#x27;Gribbs Free Energy (eV/$\AA$)&#x27;)</span><br><span class="line"></span><br><span class="line">ax2 = plt.subplot(gs[0,1])</span><br><span class="line">for k in range(len(C)):</span><br><span class="line">   dE=(En[k]-C[k]*uc-N[k]*nitro)/(S[k]);</span><br><span class="line">   ax2.plot(uc,dE,c=color[k],lw=2)</span><br><span class="line">#</span><br><span class="line">ax2.legend(lg,prop=font) #,fontsize=16)</span><br><span class="line">#ax2.set_title(&#x27;Stability of C_mN_n under different carbon chemical potential&#x27;)</span><br><span class="line">ax2.set_xlabel(r&#x27;$\mu_&#123;C&#125;$(eV)&#x27;)</span><br><span class="line">ax2.set_ylabel(r&#x27;Gibbs Free Energy (eV/$\AA$)&#x27;)</span><br><span class="line">#%upc=meshgrid(up,uc);</span><br><span class="line">ChemPot=np.zeros((len(un)*len(uc),2));</span><br><span class="line">print(ChemPot.shape)</span><br><span class="line">count=0;</span><br><span class="line">print(len(un))</span><br><span class="line">print(len(uc))</span><br><span class="line">for m in range(len(un)):</span><br><span class="line">     for n in range(len(uc)):</span><br><span class="line">       ChemPot[count,:]=[un[m],uc[n]];</span><br><span class="line">       count=count+1;</span><br><span class="line">print(count)</span><br><span class="line">#icount=0;</span><br><span class="line">print(C.shape)</span><br><span class="line">print(N.shape)</span><br><span class="line">print(En.shape)</span><br><span class="line">#CPEn=[C,N,En];</span><br><span class="line">#disp(CPEn);</span><br><span class="line">my=np.zeros((469755,3));</span><br><span class="line">icount=0</span><br><span class="line">for s in range(count):</span><br><span class="line">   k=0;</span><br><span class="line">   dE1=(En[k]-C[k]*ChemPot[s,1]-N[k]*ChemPot[s,0])/(S[k]);</span><br><span class="line">   k=1;</span><br><span class="line">   dE2=(En[k]-C[k]*ChemPot[s,1]-N[k]*ChemPot[s,0])/(S[k]);</span><br><span class="line">   k=2;</span><br><span class="line">   dE3=(En[k]-C[k]*ChemPot[s,1]-N[k]*ChemPot[s,0])/(S[k]);</span><br><span class="line">    </span><br><span class="line">   if ( ( dE3 &lt;= dE1) and ( dE3 &lt;= dE2) and (dE3 &lt;= dE1)) :</span><br><span class="line">      my[icount,:]=[ChemPot[s,0],ChemPot[s,1],dE3];</span><br><span class="line">      icount=icount+1;</span><br><span class="line">ax3 = plt.subplot(gs[0,2])</span><br><span class="line">my=my[0:icount,:];</span><br><span class="line">#icount</span><br><span class="line">#figure()</span><br><span class="line">skip=10</span><br><span class="line">sc=ax3.scatter(my[:,0][0::skip],my[:,1][0::skip],c= my[:,2][0::skip],cmap=cm,marker=&#x27;.&#x27;)</span><br><span class="line">ax3.set_xlabel(r&#x27;$\mu_&#123;N&#125;$(eV)&#x27;);</span><br><span class="line">ax3.set_ylabel(r&#x27;$\mu_&#123;C&#125;$(eV)&#x27;)</span><br><span class="line">ax3.set_xlim([-7.7,-4.0])</span><br><span class="line">ax3.set_ylim([-10.5,-7.0])</span><br><span class="line">ax3.set_yticks(float_range(-10.5,-6.5,0.5))</span><br><span class="line">ax3.set_xticks(float_range(-7.5,-3.0,1.5))</span><br><span class="line">plt.colorbar(sc)</span><br><span class="line"></span><br><span class="line">yloc=-0.15</span><br><span class="line">xloc=0.22</span><br><span class="line">#ax1.text(xloc, yloc, &#x27;(&#x27;+string.ascii_lowercase[0]+&#x27;)&#x27;, transform=ax1.transAxes,size=20, weight=&#x27;bold&#x27;)</span><br><span class="line">#ax2.text(xloc, yloc, &#x27;(&#x27;+string.ascii_lowercase[1]+&#x27;)&#x27;, transform=ax2.transAxes,size=20, weight=&#x27;bold&#x27;)</span><br><span class="line">#ax3.text(xloc, yloc, &#x27;(&#x27;+string.ascii_lowercase[2]+&#x27;)&#x27;, transform=ax3.transAxes,size=20, weight=&#x27;bold&#x27;)</span><br><span class="line"></span><br><span class="line">ax3.scatter(-7.22,-7.78,s=60,marker=&#x27;*&#x27;,c=&#x27;r&#x27;)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.subplots_adjust(bottom=0.15)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">#plt.savefig(&#x27;FigS2N.jpg&#x27;,format=&#x27;jpg&#x27;,dpi=300)</span><br><span class="line">#plt.savefig(&#x27;FigS2N.pdf&#x27;,format=&#x27;pdf&#x27;,dpi=300)</span><br></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/api/personal/file/3A1E1BB0AD9C4F238C4C9A02BF263B83?method=download&shareKey=a4c3b732402b002be5294e3b2dba642d" alt="penta-CN2"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/weixin_41171061/article/details/116345939">cnblog</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> matplotlib </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos-7本地overleaf安装</title>
      <link href="/2021/08/01/computer/latex/overleaf/"/>
      <url>/2021/08/01/computer/latex/overleaf/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><img src="https://img-blog.csdnimg.cn/20190926010527532.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW5nZmFuMTkxMzc3NTM2MQ==,size_16,color_FFFFFF,t_70" alt="overleaf"><br>Latex是科研工作中最常用的文档排版系统，其中最常用的就是在线latex编辑器<a href="https://www.overleaf.com/"><strong>overleaf</strong></a>。然而overleaf对于国内用户而言延迟非常高（虽然有cn服务器，但是仍然很慢）。对于科研团队来说，在自己的服务器上部署Overleaf，从而方便快速的编译使用latex，将为整个团队都省去安装Latex各种包的繁琐，是一件非常重要的事儿。本文在centos-7上部署overleaf。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>确保有centos系统的root权限</p><h3 id="1-安装Docker"><a href="#1-安装Docker" class="headerlink" title="1. 安装Docker"></a>1. 安装Docker</h3><ul><li><p>安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>设置源</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>可以查看所有仓库中所有docker版本，并选择特定版本安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure></li><li><p>设置开机启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure></li><li><p>验证安装是否成功(有client和service两部分表示docker安装启动都成功了)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果出现类似下面信息，表上安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"> Client: Docker Engine - Community</span><br><span class="line"> Version:           20.10.7</span><br><span class="line"> API version:       1.41</span><br><span class="line"> Go version:        go1.13.15</span><br><span class="line"> Git commit:        f0df350</span><br><span class="line"> Built:             Wed Jun  2 11:58:10 2021</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Context:           default</span><br><span class="line"> Experimental:      true</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          20.10.7</span><br><span class="line">  API version:      1.41 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.13.15</span><br><span class="line">  Git commit:       b0f5bc3</span><br><span class="line">  Built:            Wed Jun  2 11:56:35 2021</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     false</span><br><span class="line"> containerd:</span><br><span class="line">  Version:          1.4.9</span><br><span class="line">  GitCommit:        e25210fe30a0a703442421b0f60afac609f950a3</span><br><span class="line"> runc:</span><br><span class="line">  Version:          1.0.1</span><br><span class="line">  GitCommit:        v1.0.1-0-g4144b63</span><br><span class="line"> docker-init:</span><br><span class="line">  Version:          0.19.0</span><br><span class="line">  GitCommit:        de40ad0</span><br></pre></td></tr></table></figure></li><li><p>docker-compose 安装</p><p>最简单的方式就是用pip安装，但是由于linux系统中仍然使用python2的pip，导致如下安装失败</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install docker-compose</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以尝试另外一种方法：从<a href="https://github.com/docker/compose/releases/"><strong>GitHub</strong></a>下载，然后加入权限直接使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><p>检查安装版本,正确输出则表示安装完成</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-安装Overleaf"><a href="#2-安装Overleaf" class="headerlink" title="2. 安装Overleaf"></a>2. 安装Overleaf</h3><p>通过docker安装Overleaf的开源版本sharelatex</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull sharelatex/sharelatex</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-配置Overleaf"><a href="#3-配置Overleaf" class="headerlink" title="3. 配置Overleaf"></a>3. 配置Overleaf</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/sharelatex/sharelatex/master/docker-compose.yml</span><br></pre></td></tr></table></figure><p>对下载的docker-compose.yml文件进行编辑，修改端口号。需要修改的就是ports: - 80:80,一般80端口都被apache或nginx占用了，改用其他端口如：ports: - 5000:80。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><h3 id="4-启动Overleaf"><a href="#4-启动Overleaf" class="headerlink" title="4. 启动Overleaf"></a>4. 启动Overleaf</h3><p>在docker-compose.yml所在路径下执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="5-安装texlive"><a href="#5-安装texlive" class="headerlink" title="5. 安装texlive"></a>5. 安装texlive</h3><p>先进入docker容器，在docker中安装编译所需的完整的texlive</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it sharelatex bash</span><br><span class="line">tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet</span><br><span class="line">tlmgr update --self --all</span><br><span class="line">nohup tlmgr install scheme-full &amp;</span><br></pre></td></tr></table></figure><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>将下面的邮件换成自己的邮箱</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec sharelatex /bin/bash -c &quot;cd /var/www/sharelatex; grunt user:create-admin --email=joe@example.com&quot;</span><br></pre></td></tr></table></figure><p>然后打开浏览器访问<code>http://localhost:8080/user/password/set?passwordResetToken=&lt;token&gt;</code>，修改密码即可使用</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.bilibili.com/read/cv6547551/">https://www.bilibili.com/read/cv6547551/</a></li><li><a href="https://github.com/overleaf/overleaf/wiki/Quick-Start-Guide">https://github.com/overleaf/overleaf/wiki/Quick-Start-Guide)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> latex </tag>
            
            <tag> linux </tag>
            
            <tag> docker </tag>
            
            <tag> overleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VASP之POSCAR进行原子固定</title>
      <link href="/2021/07/27/materials/vasp-constrain/"/>
      <url>/2021/07/27/materials/vasp-constrain/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>VASP计算表面时，需要将下面几层进行固定，用于模拟体相，如下面例子中我们把z方向坐标在0-0.5之间的原子全部固定</p><h2 id="处理脚本"><a href="#处理脚本" class="headerlink" title="处理脚本"></a>处理脚本</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymatgen <span class="keyword">import</span> Structure,Element</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">atom_selection</span>(<span class="params">struct,in_str=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">r&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    select atoms by three different schemes:</span></span><br><span class="line"><span class="string">    1. by atomic index</span></span><br><span class="line"><span class="string">    2. by element symbol</span></span><br><span class="line"><span class="string">    3. by fractional coordinates range</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    tip=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    select atoms by following ways:</span></span><br><span class="line"><span class="string">    1. atomic index in POSCAR</span></span><br><span class="line"><span class="string">       i.e. :  1 2 4-8 10 12-30</span></span><br><span class="line"><span class="string">       i.e. :  1 2 4 8 10</span></span><br><span class="line"><span class="string">    2. atomic label</span></span><br><span class="line"><span class="string">       i.e. :  Si  O</span></span><br><span class="line"><span class="string">    3. atomic position</span></span><br><span class="line"><span class="string">       i.e. :  0 0.5 | 0.2 0.4 | 0.3 0.7</span></span><br><span class="line"><span class="string">       this means atoms with 0&lt;x&lt;0.5,</span></span><br><span class="line"><span class="string">       0.2&lt;y&lt;0.4 and 0.3&lt;z&lt;0.7 will be seleted</span></span><br><span class="line"><span class="string">       or just specific the z coordinates,</span></span><br><span class="line"><span class="string">       i.e. :  ||0.3 0.7</span></span><br><span class="line"><span class="string">       &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(tip)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_index</span>(<span class="params">in_str</span>):</span><br><span class="line">        atom_index=[]</span><br><span class="line">        tmp_str=in_str.split()</span><br><span class="line">        <span class="comment">#tmp_str=in_str.split()[1:]</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tmp_str:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;-&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> i:</span><br><span class="line">               atom_index.append(<span class="built_in">int</span>(i))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">               atom_index.extend(<span class="built_in">range</span>(<span class="built_in">int</span>(i.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]),<span class="built_in">int</span>(i.split(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>])+<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> [i-<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> atom_index]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_label</span>(<span class="params">in_str</span>):</span><br><span class="line">        atom_label= [Element(elem) <span class="keyword">for</span> elem <span class="keyword">in</span> in_str.split()]</span><br><span class="line">        <span class="comment">#atom_label= [Element(elem) for elem in in_str.split()[1:]]</span></span><br><span class="line">        atom_index=[]</span><br><span class="line">        <span class="keyword">for</span> i, site <span class="keyword">in</span> <span class="built_in">enumerate</span>(struct.sites):</span><br><span class="line">            <span class="keyword">if</span> site.specie <span class="keyword">in</span> atom_label:</span><br><span class="line">               atom_index.append(i)</span><br><span class="line">        <span class="keyword">return</span> atom_index</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_range</span>(<span class="params">in_str</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">check_frac</span>(<span class="params">coord,lim</span>):</span><br><span class="line">            con=[<span class="literal">False</span>]*<span class="number">3</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">               con[i]=coord[i]&gt;=lim[i][<span class="number">0</span>] <span class="keyword">and</span> coord[i]&lt;=lim[i][<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">all</span>(con):</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        coord_range=&#123;&#125;</span><br><span class="line">        tmp_str=in_str.split();tmp1_str=<span class="string">&#x27; &#x27;</span>.join(tmp_str);tmp2_str=tmp1_str.split(<span class="string">&quot;|&quot;</span>)</span><br><span class="line">        <span class="comment">#tmp_str=in_str.split()[1:];tmp1_str=&#x27; &#x27;.join(tmp_str);tmp2_str=tmp1_str.split(&quot;|&quot;)</span></span><br><span class="line">        icount=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tmp2_str:</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> i==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">              coord_range[icount]=<span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">              coord_range[icount]=[<span class="built_in">float</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> i.split()]</span><br><span class="line">            icount+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> key <span class="keyword">in</span> coord_range.keys():</span><br><span class="line">            <span class="keyword">if</span> coord_range[key]==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">               coord_range[key]=[<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">        atom_index=[]</span><br><span class="line">        <span class="keyword">for</span> i, site <span class="keyword">in</span> <span class="built_in">enumerate</span>(struct.sites):</span><br><span class="line">            <span class="keyword">if</span> check_frac(site.frac_coords,coord_range):</span><br><span class="line">               atom_index.append(i)</span><br><span class="line">        <span class="keyword">return</span> atom_index</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;|&quot;</span> <span class="keyword">in</span> in_str.strip():</span><br><span class="line">       atom_index_list=parse_range(in_str)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">       <span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> in_str.strip():</span><br><span class="line">           <span class="keyword">if</span> <span class="built_in">str</span>.isalpha():</span><br><span class="line">              atom_index_list=parse_label(in_str)</span><br><span class="line">              <span class="keyword">return</span> atom_index_list,in_str</span><br><span class="line">       atom_index_list=parse_index(in_str)</span><br><span class="line">    <span class="comment">#if in_str.strip().startswith(&#x27;a&#x27;):</span></span><br><span class="line">    <span class="comment">#   atom_index_list=parse_index(in_str)</span></span><br><span class="line">    <span class="comment">#elif in_str.strip().startswith(&#x27;b&#x27;):</span></span><br><span class="line">    <span class="comment">#   atom_index_list=parse_label(in_str)</span></span><br><span class="line">    <span class="comment">#elif in_str.strip().startswith(&#x27;c&#x27;):</span></span><br><span class="line">    <span class="comment">#   atom_index_list=parse_range(in_str)</span></span><br><span class="line">    <span class="keyword">return</span> atom_index_list,in_str</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">constrain</span>(<span class="params">struct,in_str=<span class="literal">None</span></span>):</span><br><span class="line">    natom=struct.num_sites</span><br><span class="line">    atom_index,in_str=atom_selection(struct,in_str)</span><br><span class="line">    selective_dynamics=[[<span class="literal">True</span> <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)] <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(natom)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(natom):</span><br><span class="line">           <span class="keyword">if</span> i <span class="keyword">in</span> atom_index:</span><br><span class="line">                selective_dynamics[i]=[<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>]</span><br><span class="line">    tmp_struct=Structure(struct.lattice,struct.species,struct.frac_coords,site_properties=&#123;<span class="string">&#x27;selective_dynamics&#x27;</span>:selective_dynamics&#125;)</span><br><span class="line">    <span class="keyword">return</span> tmp_struct</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">  <span class="keyword">from</span> pymatgen.io.vasp <span class="keyword">import</span> Poscar</span><br><span class="line">  st=Structure.from_file(<span class="string">&#x27;L1-Te2.vasp&#x27;</span>)</span><br><span class="line">  in_str=<span class="string">&#x27;||0.0 0.5&#x27;</span></span><br><span class="line">  cst=constrain(st,in_str=in_str)</span><br><span class="line">  poscar=Poscar(cst)</span><br><span class="line">  <span class="built_in">print</span>(st)</span><br><span class="line">  <span class="built_in">print</span>(poscar)</span><br><span class="line">  poscar.comment=poscar.comment+<span class="string">&#x27; |--&gt; &#x27;</span>+in_str</span><br><span class="line">  poscar.write_file(<span class="string">&#x27;Fixed.vasp&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行脚本 <code>python run.py</code>,确保当前文件夹里面有L1-Te2.vasp文件<br>L1-Te2.vasp文件内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Li6 V9 Te4 O24</span><br><span class="line">1.0</span><br><span class="line">6.042800 0.000000 0.000000</span><br><span class="line">-3.021400 5.233218 0.000000</span><br><span class="line">0.000000 0.000000 30.535545</span><br><span class="line">Li V Te O</span><br><span class="line">6 9 4 24</span><br><span class="line">direct</span><br><span class="line">0.333333 0.666667 0.265354 Li</span><br><span class="line">0.333333 0.666667 0.395473 Li</span><br><span class="line">0.000000 0.000000 0.434944 Li</span><br><span class="line">0.000000 0.000000 0.565063 Li</span><br><span class="line">0.666667 0.333333 0.604534 Li</span><br><span class="line">0.666667 0.333333 0.734653 Li</span><br><span class="line">0.833330 0.666667 0.330406 V</span><br><span class="line">0.333333 0.166670 0.330406 V</span><br><span class="line">0.833330 0.166670 0.330406 V</span><br><span class="line">0.166670 0.333333 0.669585 V</span><br><span class="line">-0.000000 0.500000 0.500001 V</span><br><span class="line">0.500000 0.500000 0.500001 V</span><br><span class="line">0.666667 0.833330 0.669585 V</span><br><span class="line">0.166670 0.833330 0.669585 V</span><br><span class="line">0.500000 0.000000 0.500001 V</span><br><span class="line">0.000000 0.000000 0.245619 Te</span><br><span class="line">0.666667 0.333333 0.415209 Te</span><br><span class="line">0.333333 0.666667 0.584798 Te</span><br><span class="line">0.000000 0.000000 0.754388 Te</span><br><span class="line">0.666667 0.333333 0.296140 O</span><br><span class="line">0.153020 0.306040 0.290630 O</span><br><span class="line">0.693960 0.846980 0.290630 O</span><br><span class="line">0.153020 0.846980 0.290630 O</span><br><span class="line">0.333333 0.666667 0.465730 O</span><br><span class="line">0.513650 0.486350 0.370182 O</span><br><span class="line">0.972710 0.486350 0.370182 O</span><br><span class="line">0.513650 0.027290 0.370182 O</span><br><span class="line">0.819690 0.639370 0.460220 O</span><br><span class="line">0.360630 0.180310 0.460220 O</span><br><span class="line">0.819690 0.180310 0.460220 O</span><br><span class="line">0.000000 0.000000 0.364687 O</span><br><span class="line">0.000000 0.000000 0.635320 O</span><br><span class="line">0.180310 0.819690 0.539772 O</span><br><span class="line">0.639370 0.819690 0.539772 O</span><br><span class="line">0.180310 0.360630 0.539772 O</span><br><span class="line">0.486350 0.972710 0.629825 O</span><br><span class="line">0.027290 0.513650 0.629825 O</span><br><span class="line">0.486350 0.513650 0.629825 O</span><br><span class="line">0.666667 0.333333 0.534277 O</span><br><span class="line">0.846980 0.153020 0.709361 O</span><br><span class="line">0.306040 0.153020 0.709361 O</span><br><span class="line">0.846980 0.693960 0.709361 O</span><br><span class="line">0.333333 0.666667 0.703867 O</span><br></pre></td></tr></table></figure><p>即可得到如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    select atoms by following ways:</span><br><span class="line">    1. atomic index in POSCAR</span><br><span class="line">       i.e. :  1 2 4-8 10 12-30</span><br><span class="line">       i.e. :  1 2 4 8 10 </span><br><span class="line">    2. atomic label</span><br><span class="line">       i.e. :  Si  O</span><br><span class="line">    3. atomic position</span><br><span class="line">       i.e. :  0 0.5 | 0.2 0.4 | 0.3 0.7</span><br><span class="line">       this means atoms with 0&lt;x&lt;0.5, </span><br><span class="line">       0.2&lt;y&lt;0.4 and 0.3&lt;z&lt;0.7 will be seleted</span><br><span class="line">       or just specific the z coordinates,</span><br><span class="line">       i.e. :  ||0.3 0.7</span><br><span class="line">       </span><br><span class="line">Full Formula (Li6 V9 Te4 O24)</span><br><span class="line">Reduced Formula: Li6V9(TeO6)4</span><br><span class="line">abc   :   6.042800   6.042800  30.535545</span><br><span class="line">angles:  90.000000  90.000000 120.000001</span><br><span class="line">Sites (43)</span><br><span class="line">  #  SP            a         b         c</span><br><span class="line">---  ----  ---------  --------  --------</span><br><span class="line">  0  Li     0.333333  0.666667  0.265354</span><br><span class="line">  1  Li     0.333333  0.666667  0.395473</span><br><span class="line">  2  Li     0         0         0.434944</span><br><span class="line">  3  Li     0         0         0.565063</span><br><span class="line">  4  Li     0.666667  0.333333  0.604534</span><br><span class="line">  5  Li     0.666667  0.333333  0.734653</span><br><span class="line">  6  V      0.83333   0.666667  0.330406</span><br><span class="line">  7  V      0.333333  0.16667   0.330406</span><br><span class="line">  8  V      0.83333   0.16667   0.330406</span><br><span class="line">  9  V      0.16667   0.333333  0.669585</span><br><span class="line"> 10  V     -0         0.5       0.500001</span><br><span class="line"> 11  V      0.5       0.5       0.500001</span><br><span class="line"> 12  V      0.666667  0.83333   0.669585</span><br><span class="line"> 13  V      0.16667   0.83333   0.669585</span><br><span class="line"> 14  V      0.5       0         0.500001</span><br><span class="line"> 15  Te     0         0         0.245619</span><br><span class="line"> 16  Te     0.666667  0.333333  0.415209</span><br><span class="line"> 17  Te     0.333333  0.666667  0.584798</span><br><span class="line"> 18  Te     0         0         0.754388</span><br><span class="line"> 19  O      0.666667  0.333333  0.29614</span><br><span class="line"> 20  O      0.15302   0.30604   0.29063</span><br><span class="line"> 21  O      0.69396   0.84698   0.29063</span><br><span class="line"> 22  O      0.15302   0.84698   0.29063</span><br><span class="line"> 23  O      0.333333  0.666667  0.46573</span><br><span class="line"> 24  O      0.51365   0.48635   0.370182</span><br><span class="line"> 25  O      0.97271   0.48635   0.370182</span><br><span class="line"> 26  O      0.51365   0.02729   0.370182</span><br><span class="line"> 27  O      0.81969   0.63937   0.46022</span><br><span class="line"> 28  O      0.36063   0.18031   0.46022</span><br><span class="line"> 29  O      0.81969   0.18031   0.46022</span><br><span class="line"> 30  O      0         0         0.364687</span><br><span class="line"> 31  O      0         0         0.63532</span><br><span class="line"> 32  O      0.18031   0.81969   0.539772</span><br><span class="line"> 33  O      0.63937   0.81969   0.539772</span><br><span class="line"> 34  O      0.18031   0.36063   0.539772</span><br><span class="line"> 35  O      0.48635   0.97271   0.629825</span><br><span class="line"> 36  O      0.02729   0.51365   0.629825</span><br><span class="line"> 37  O      0.48635   0.51365   0.629825</span><br><span class="line"> 38  O      0.666667  0.333333  0.534277</span><br><span class="line"> 39  O      0.84698   0.15302   0.709361</span><br><span class="line"> 40  O      0.30604   0.15302   0.709361</span><br><span class="line"> 41  O      0.84698   0.69396   0.709361</span><br><span class="line"> 42  O      0.333333  0.666667  0.703867</span><br><span class="line"></span><br><span class="line"> ------------------------------------------</span><br><span class="line">Li6 V9 Te4 O24</span><br><span class="line">1.0</span><br><span class="line">6.042800 0.000000 0.000000</span><br><span class="line">-3.021400 5.233218 0.000000</span><br><span class="line">0.000000 0.000000 30.535545</span><br><span class="line">Li V Te O</span><br><span class="line">6 9 4 24</span><br><span class="line">Selective dynamics</span><br><span class="line">direct</span><br><span class="line">0.333333 0.666667 0.265354 F F F Li</span><br><span class="line">0.333333 0.666667 0.395473 F F F Li</span><br><span class="line">0.000000 0.000000 0.434944 F F F Li</span><br><span class="line">0.000000 0.000000 0.565063 T T T Li</span><br><span class="line">0.666667 0.333333 0.604534 T T T Li</span><br><span class="line">0.666667 0.333333 0.734653 T T T Li</span><br><span class="line">0.833330 0.666667 0.330406 F F F V</span><br><span class="line">0.333333 0.166670 0.330406 F F F V</span><br><span class="line">0.833330 0.166670 0.330406 F F F V</span><br><span class="line">0.166670 0.333333 0.669585 T T T V</span><br><span class="line">-0.000000 0.500000 0.500001 T T T V</span><br><span class="line">0.500000 0.500000 0.500001 T T T V</span><br><span class="line">0.666667 0.833330 0.669585 T T T V</span><br><span class="line">0.166670 0.833330 0.669585 T T T V</span><br><span class="line">0.500000 0.000000 0.500001 T T T V</span><br><span class="line">0.000000 0.000000 0.245619 F F F Te</span><br><span class="line">0.666667 0.333333 0.415209 F F F Te</span><br><span class="line">0.333333 0.666667 0.584798 T T T Te</span><br><span class="line">0.000000 0.000000 0.754388 T T T Te</span><br><span class="line">0.666667 0.333333 0.296140 F F F O</span><br><span class="line">0.153020 0.306040 0.290630 F F F O</span><br><span class="line">0.693960 0.846980 0.290630 F F F O</span><br><span class="line">0.153020 0.846980 0.290630 F F F O</span><br><span class="line">0.333333 0.666667 0.465730 F F F O</span><br><span class="line">0.513650 0.486350 0.370182 F F F O</span><br><span class="line">0.972710 0.486350 0.370182 F F F O</span><br><span class="line">0.513650 0.027290 0.370182 F F F O</span><br><span class="line">0.819690 0.639370 0.460220 F F F O</span><br><span class="line">0.360630 0.180310 0.460220 F F F O</span><br><span class="line">0.819690 0.180310 0.460220 F F F O</span><br><span class="line">0.000000 0.000000 0.364687 F F F O</span><br><span class="line">0.000000 0.000000 0.635320 T T T O</span><br><span class="line">0.180310 0.819690 0.539772 T T T O</span><br><span class="line">0.639370 0.819690 0.539772 T T T O</span><br><span class="line">0.180310 0.360630 0.539772 T T T O</span><br><span class="line">0.486350 0.972710 0.629825 T T T O</span><br><span class="line">0.027290 0.513650 0.629825 T T T O</span><br><span class="line">0.486350 0.513650 0.629825 T T T O</span><br><span class="line">0.666667 0.333333 0.534277 T T T O</span><br><span class="line">0.846980 0.153020 0.709361 T T T O</span><br><span class="line">0.306040 0.153020 0.709361 T T T O</span><br><span class="line">0.846980 0.693960 0.709361 T T T O</span><br><span class="line">0.333333 0.666667 0.703867 T T T O</span><br></pre></td></tr></table></figure><blockquote><p>当然该脚本还支持其他模式的原子固定，具体可以参考tip</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> materials </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> vasp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大学物理作业-冰雹下降</title>
      <link href="/2021/07/02/others/project-bingbao/"/>
      <url>/2021/07/02/others/project-bingbao/</url>
      
        <content type="html"><![CDATA[<h1 id="物理课程作业"><a href="#物理课程作业" class="headerlink" title="物理课程作业"></a>物理课程作业</h1><blockquote><p>题目：<strong>根据物理课所学知识，对冰雹从下降到落地的过程进行分析模拟。</strong></p><p>提示： </p></blockquote><ul><li>分析过程可能涉及力学/热力学/振动/波动</li><li>可以从自己设计的阻力模型来分析下落过程，也可以尽可能的考虑真实情况(如温度，高度，气压等）</li><li>也可以分析下降过程中收到风的影响等</li><li>还可以分析落地之后单位面积受到压力大小</li><li>还可以分析下降需要的时间</li><li>不受任何限制，难易程度自己控制，字数不限</li><li>等等</li></ul><h2 id="1-格式要求："><a href="#1-格式要求：" class="headerlink" title="1.  格式要求："></a>1.  格式要求：</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>姓名-学号-班级 （注意短横线分割，班级名称标准全称）</p><h4 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h4><p>用简单的一段话对你的研究报告进行简要说明</p><h4 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h4><p>写出你研究的过程，如何研究，如何分析解决问题，得到了什么结论。包括公式，文字说明，数据图，相关分析。要求能够自圆其说。</p><h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p>列出你参考的一些书籍，文献 ，网站等。 <a href="https://zhuanlan.zhihu.com/p/25243846">参考文献格式</a><br>参考 <a href="https://zhuanlan.zhihu.com/p/25243846">https://zhuanlan.zhihu.com/p/25243846</a></p><blockquote><p>注： 除了标题改为自己的内容外，摘要，正文和参考文献这几个标题请勿修改。<br>   字体大小不限制</p></blockquote><h2 id="2-内容要求"><a href="#2-内容要求" class="headerlink" title="2. 内容要求:"></a>2. 内容要求:</h2><ul><li>可以简单分析该过程，也可以通过文献调研尽可能的分析真实过程，总体要求分析有理有据，并能自圆其说。</li><li>对于其中可能涉及到的一些复杂微分方程，如不能解决，可以遗留。</li><li>尽量做到图文并茂，对图片，公式顺序编号。</li></ul><h2 id="3-提交要求："><a href="#3-提交要求：" class="headerlink" title="3. 提交要求："></a>3. 提交要求：</h2><p>  可以按照以下任意一种格式提交,鼓励后两种方式之一，文件名： <strong>姓名-学号-班级</strong>  (注意：班级用标准全称)</p><ul><li><p>word 文档,docx格式</p></li><li><p>jupyter-notebook文档，另存为html格式</p></li><li><p>latex格式，编译为 pdf格式</p><blockquote><p>注： 如有附件，压缩为： <strong>姓名-学号-班级.zip</strong></p></blockquote></li></ul><h2 id="4-提交时间："><a href="#4-提交时间：" class="headerlink" title="4. 提交时间："></a>4. 提交时间：</h2><p>  20xx.xx.xx 晚上12：00 之前copy给所在班班委(请勿独立发送邮件)，并由学习委员压缩之后发送到 here , 压缩文件名： 班级.rar 或者 班级.zip</p><h2 id="5-评分标准："><a href="#5-评分标准：" class="headerlink" title="5. 评分标准："></a>5. 评分标准：</h2><ul><li>是否按照要求格式撰写</li><li>是否按时提交 </li><li>是否对物理问题深入调研分析 </li><li><strong>是否抄袭 (0分)</strong></li><li>是否独辟蹊径</li><li>是否理论上合理</li></ul><p><strong>个人思考</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">上课期间给学生布置了如上的作业。本来以为学生会根据学过的牛顿定律，动能定理等知识进行分析，但是结果令人失望，</span><br><span class="line">有95%的学生提交的报告都是从网上抄袭得到的，大部分文章都集中抄袭为数不多的几篇关于冰雹研究的文献。钱学森之问:</span><br><span class="line">为什么我们的学校总是培养不出杰出人才? 也许答案就在这里。当然，从学生角度出发，也能理解。毕竟，完成这样的小课</span><br><span class="line">题并不能保证期末获得很高的分数，而考试必然是要占据很大的比例。大学教育在培养学生的学习能力，解决问题的能力，</span><br><span class="line">适应社会的能力，考试必然不能成为教育的目标。所以，如何激发大学生对于科学问题探索的兴趣，同时也能保证他们获得</span><br><span class="line">理想的成绩是个亟待解决的问题。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> physics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2D材料方向依赖的泊松比和杨氏模量图</title>
      <link href="/2021/07/01/materials/polar-ev/"/>
      <url>/2021/07/01/materials/polar-ev/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>2D材料的杨氏模量和泊松比是材料非常重用的力学属性，我们如何通过vasp的计算来画出其方向依赖的泊松比和杨氏模量图：</p><h2 id="数据提取"><a href="#数据提取" class="headerlink" title="数据提取"></a>数据提取</h2><p>关于弹性常数的计算可以采用如下的INCAR参数，通过vasp直接计算（也可以通过手动应力-应变的方式来计算）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># INCAR</span><br><span class="line">SYSTEM = system</span><br><span class="line">PREC   = A</span><br><span class="line">ISPIN  =  1</span><br><span class="line">LREAL  = Auto</span><br><span class="line">ALGO  =  Normal</span><br><span class="line"></span><br><span class="line">#Electronic Relaxation</span><br><span class="line">ENCUT  =  500</span><br><span class="line">NELM   =  200</span><br><span class="line">NELMIN=  6</span><br><span class="line">NELMDL= -5</span><br><span class="line">EDIFF  = 1E-6</span><br><span class="line">#LVDW = TRUE</span><br><span class="line"></span><br><span class="line">#Ionic relaxation</span><br><span class="line">EDIFFG = -0.005</span><br><span class="line">NSW    =  1</span><br><span class="line">IBRION =  6</span><br><span class="line">ISIF   =  3</span><br><span class="line">ISYM   =  2</span><br><span class="line">NFREE  =  4</span><br><span class="line">POTIM  =  0.01</span><br><span class="line"></span><br><span class="line">#DOS related values</span><br><span class="line">ISMEAR = 0</span><br><span class="line">SIGMA  = 0.05</span><br><span class="line"></span><br><span class="line">#Write flags</span><br><span class="line">LWAVE  =  F</span><br><span class="line">LCHARG =  F</span><br></pre></td></tr></table></figure><p>计算完成之后，在当前文件夹下执行如下的bash脚本(<code>sh mesh.sh 3.0</code>)，完成数据的提取和处理</p><blockquote><p>注：脚本默认c方向为真空层方向，建模时需要留意；此外，3.0的数值表示材料的实际有效厚度，需要根据自己的材料测量设置。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">c11=`grep -A 9 <span class="string">&quot;TOTAL ELASTIC&quot;</span> OUTCAR | <span class="built_in">tail</span> -n 8 | grep XX | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">c22=`grep -A 9 <span class="string">&quot;TOTAL ELASTIC&quot;</span> OUTCAR | <span class="built_in">tail</span> -n 8 | grep YY | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">c12=`grep -A 9 <span class="string">&quot;TOTAL ELASTIC&quot;</span> OUTCAR | <span class="built_in">tail</span> -n 8 | grep XX | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line">c66=`grep -A 9 <span class="string">&quot;TOTAL ELASTIC&quot;</span> OUTCAR | <span class="built_in">tail</span> -n 8 | grep XY | awk <span class="string">&#x27;&#123;print $5&#125;&#x27;</span>`</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;-----------Elastic Constants are-------------&quot;</span></span><br><span class="line">C11=`<span class="built_in">echo</span> <span class="string">&quot;scale=2;<span class="variable">$c11</span>/10.0&quot;</span> | bc`</span><br><span class="line">C22=`<span class="built_in">echo</span> <span class="string">&quot;scale=2;<span class="variable">$c22</span>/10.0&quot;</span> | bc`</span><br><span class="line">C12=`<span class="built_in">echo</span> <span class="string">&quot;scale=2;<span class="variable">$c12</span>/10.0&quot;</span> | bc`</span><br><span class="line">C66=`<span class="built_in">echo</span> <span class="string">&quot;scale=2;<span class="variable">$c66</span>/10.0&quot;</span> | bc`</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;C11 :  <span class="variable">$C11</span> &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;C22 :  <span class="variable">$C22</span> &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;C12 :  <span class="variable">$C12</span> &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;C66 :  <span class="variable">$C66</span> &quot;</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;---------------------------------------------&quot;</span></span><br><span class="line"></span><br><span class="line">res=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$C11</span> &gt;0&quot;</span> | bc`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$res</span> == 1 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;C11 &gt; 0&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;C11 &lt; 0&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">res=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$C22</span> &gt;0&quot;</span> | bc`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$res</span> == 1 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;C22 &gt; 0&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;C22 &lt; 0&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">res=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$C66</span> &gt;0&quot;</span> | bc`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$res</span> == 1 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;C66 &gt; 0&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;C66 &lt; 0&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">res=`<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$C11</span>*<span class="variable">$C22</span>-<span class="variable">$C12</span>*<span class="variable">$C12</span> &gt;0&quot;</span> | bc`</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$res</span> == 1 ];<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;C11xC22-C12**2 &gt; 0&quot;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">&quot;C11xC22-C12**2 &lt; 0&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">c=`sed -n 5p POSCAR | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>`</span><br><span class="line"><span class="built_in">cat</span>&gt;proc.py&lt;&lt;!</span><br><span class="line">import numpy as np</span><br><span class="line">from numpy import sin,cos,pi</span><br><span class="line">L0=<span class="variable">$1</span>;</span><br><span class="line">c=<span class="variable">$c</span>;</span><br><span class="line">c_L0=c/L0;</span><br><span class="line">C11=<span class="variable">$C11</span>*c_L0;</span><br><span class="line">C22=<span class="variable">$C22</span>*c_L0;</span><br><span class="line">C12=<span class="variable">$C12</span>*c_L0;</span><br><span class="line">C66=<span class="variable">$C66</span>*c_L0;</span><br><span class="line">theta=np.linspace(0,2*pi,360);</span><br><span class="line">v_zz=C12/C22;</span><br><span class="line">d1=C11/C22+1-(C11*C22-C12**2)/C22/C66;</span><br><span class="line">d2=-(2*C12/C22-(C11*C22-C12**2)/C22/C66);</span><br><span class="line">d3=C11/C22;</span><br><span class="line">Y_zz=(C11*C22-C12**2)/C22;</span><br><span class="line">E=Y_zz/((cos(theta))**4+d2*(cos(theta))**2.*(sin(theta))**2+d3*(sin(theta))**4);</span><br><span class="line">V=(v_zz*(cos(theta))**4-d1*(cos(theta))**2.*(sin(theta))**2+v_zz*(sin(theta))**4)/((cos(theta))**4+d2*(cos(theta))**2.*(sin(theta))**2+d3*(sin(theta))**4);</span><br><span class="line">s=sin(theta);</span><br><span class="line">c=cos(theta);</span><br><span class="line">E1=1./((C22*c**<span class="number">4</span>-<span class="number">2</span>*C12*c**<span class="number">2</span>.*s**<span class="number">2</span>+C11*s**<span class="number">4</span>)/(C11*C22-C12**<span class="number">2</span>)+c**<span class="number">2</span>.*s**<span class="number">2</span>/C66);</span><br><span class="line">V1=(C12*c**<span class="number">4</span>-(C11+C22-(C11*C22-C12**<span class="number">2</span>)/C66)*c**<span class="number">2</span>.*s**<span class="number">2</span>+C12*s**<span class="number">4</span>)/(C22*c**<span class="number">4</span>-(<span class="number">2</span>*C12-(C11*C22-C12**<span class="number">2</span>)/C66)*c**<span class="number">2</span>.*s**<span class="number">2</span>+C11*s**<span class="number">4</span>);</span><br><span class="line">res=np.vstack((theta,E,V)).T</span><br><span class="line">np.savetxt(<span class="string">&#x27;EV.dat&#x27;</span>,res,<span class="built_in">fmt</span>=<span class="string">&#x27;%.3f %.3f %.3f&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;%.3f %.3f %.3f %.3f&quot;</span>%(C11,C12,C22,C66))</span><br><span class="line">!</span><br><span class="line"><span class="comment"># call the python to calculate the Young&#x27;s modulus and Poisson&#x27;s ratio.</span></span><br><span class="line">python &lt; proc.py &gt; log.dat</span><br></pre></td></tr></table></figure><p>可以通过log.dat文件来查看是否满足力学稳定性条件以及C11,C12,C22,C66的值。</p><h2 id="画图"><a href="#画图" class="headerlink" title="画图"></a>画图</h2><p>在当前文件夹下保存mech_polar.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">fn=&quot;EV.dat&quot;</span><br><span class="line">f=np.loadtxt(fn)</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">ax=fig.add_subplot(121, projection=&#x27;polar&#x27;)# ,facecolor=&quot;lightgoldenrodyellow&quot;)</span><br><span class="line">skip=2</span><br><span class="line">theta= f[0::skip,0]</span><br><span class="line">Y=f[0::skip,1]</span><br><span class="line">ax.plot(theta, Y, color=&quot;tab:orange&quot;, lw=1, ls=&quot;--&quot;, marker=&#x27;h&#x27;,alpha=0.6, label=&quot;$E$&quot;)</span><br><span class="line">ax.set_rlabel_position(10)  # get radial labels away from plotted line</span><br><span class="line">ax.tick_params(grid_color=&quot;palegoldenrod&quot;)</span><br><span class="line">angle = np.deg2rad(67.5)</span><br><span class="line">ax.legend(loc=&quot;lower left&quot;, bbox_to_anchor=(.5 + np.cos(angle)/2, .5 + np.sin(angle)/2))</span><br><span class="line"></span><br><span class="line">ax1=fig.add_subplot(122, projection=&#x27;polar&#x27;) #,facecolor=&quot;lightgoldenrodyellow&quot;)</span><br><span class="line">ax1.tick_params(grid_color=&quot;palegoldenrod&quot;)</span><br><span class="line">V=f[:,2]</span><br><span class="line">T=f[:,0]</span><br><span class="line">Vp_idx=np.where(V&gt;0)</span><br><span class="line">Vn_idx=np.where(V&lt;0)</span><br><span class="line"></span><br><span class="line">skip1=3</span><br><span class="line">Vp=V[Vp_idx][0::skip1]</span><br><span class="line">theta_p=T[Vp_idx][0::skip1]</span><br><span class="line"></span><br><span class="line">skip2=1</span><br><span class="line">Vn=V[Vn_idx][0::skip2]</span><br><span class="line">theta_n=T[Vn_idx][0::skip2]</span><br><span class="line"></span><br><span class="line">ax1.plot(theta_p, Vp, color=&quot;tab:green&quot;, lw=1, ls=&quot;--&quot;, marker=&#x27;h&#x27;,alpha=0.6, label=r&quot;+ $\nu$&quot;)</span><br><span class="line">ax1.plot(theta_n, Vn, color=&quot;tab:red&quot;, lw=0.1, marker=&#x27;o&#x27;,alpha=.5, label=r&quot;- $\nu$&quot;)</span><br><span class="line">angle = np.deg2rad(67.5)</span><br><span class="line">ax1.legend(loc=&quot;lower left&quot;, bbox_to_anchor=(.5 + np.cos(angle)/2, .5 + np.sin(angle)/2))</span><br><span class="line">#ax1.set_rmax(2)</span><br><span class="line">ax1.set_rlabel_position(45)  # get radial labels away from plotted line</span><br><span class="line">ax1.set_rticks([0.3, 0.60, 0.9])  # less radial ticks</span><br><span class="line"></span><br><span class="line">plt.tight_layout()</span><br><span class="line">#plt.savefig(&#x27;EV.jpg&#x27;,format=&#x27;jpg&#x27;,dpi=300)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>图像如下：<br><img src="https://note.youdao.com/yws/api/personal/file/A22D69ECC94C45138EBBB385DC4AAB95?method=download&shareKey=eebde950bb2defb3f61c1ec285a50b2f" alt="EV"></p><blockquote><p>本例子中因为材料具有负泊松比效应，所以在处理V项时需要对正负分开画图，用不同的颜色表示</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> materials </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> matplotlib </tag>
            
            <tag> vasp </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Materials cell文件转换为siesta fdf格式</title>
      <link href="/2021/07/01/materials/cell2siesta/"/>
      <url>/2021/07/01/materials/cell2siesta/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>Materials Studio 软件支持的结构格式为.cell，如何将cell转换为 siesta软件的fdf输入文件？</p><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><p>cell2fdf.f90</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">program</span></span> main</span><br><span class="line"><span class="comment">!-------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment">! This program can be used to convert myfile.cell file (obtained from Material </span></span><br><span class="line"><span class="comment">! Studio software by &quot;runing&quot; CASTEP modules ) to myfile.fdf</span></span><br><span class="line"><span class="comment">! To run this program ,you have to compile and run it in current folder which </span></span><br><span class="line"><span class="comment">! contains myfile.cell file !!!.</span></span><br><span class="line"><span class="comment">! $ gfortran -o cell2sieta cell2fdf.f90   #maybe you can use other compilers ,such as f95 ,ifort ...</span></span><br><span class="line"><span class="comment">! $ ./cell2fdf</span></span><br><span class="line"><span class="comment">! $ myfile          # &quot;myfile&quot; is the prefix of your cell file ,input it by the keyboard !!! very important</span></span><br><span class="line"><span class="comment">! Then you will find myfile.fdf file</span></span><br><span class="line"><span class="comment">! In order to run siesta program ,you just have to cp *.psf file to your work folder and set</span></span><br><span class="line"><span class="comment">! calculation parameters in para.fdf </span></span><br><span class="line"><span class="comment">! If U find debugs in this program , you may contact me </span></span><br><span class="line"><span class="comment">! Thanks for your use </span></span><br><span class="line"><span class="comment">!----------------------------------------------------------------------------------------------- </span></span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"><span class="keyword">integer</span>,<span class="keyword">parameter</span>::N=<span class="number">20</span>  <span class="comment">!the max Species N.O. </span></span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">90</span>)::str,vector(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">30</span>)::fdf,filename,suffix,prefile</span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">2</span>),<span class="keyword">allocatable</span>::ElemSymb(:)</span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">90</span>),<span class="keyword">allocatable</span>::frac(:)</span><br><span class="line"><span class="keyword">integer</span>::fileid,i,j,aux,total,SpeciNo(N),k,m,point,debug</span><br><span class="line"><span class="keyword">integer</span>,<span class="keyword">allocatable</span>::ElemZ(:)</span><br><span class="line"><span class="keyword">integer</span>,<span class="keyword">external</span>:: GetElemZ</span><br><span class="line"><span class="keyword">character</span>,<span class="keyword">external</span>::num2char</span><br><span class="line"><span class="comment">!=================Debug=============</span></span><br><span class="line"><span class="comment">!debug=1 for debug</span></span><br><span class="line">debug=<span class="number">0</span></span><br><span class="line"><span class="comment">!===================================</span></span><br><span class="line"> read(<span class="number">5</span>,err=<span class="number">20</span>,<span class="keyword">end</span>=<span class="number">20</span>,<span class="keyword">fmt</span>=<span class="string">&#x27;(a)&#x27;</span>) str</span><br><span class="line"><span class="number">20</span>     <span class="keyword">continue</span></span><br><span class="line"> filename=<span class="built_in">trim</span>(<span class="built_in">adjustl</span>(str))//<span class="string">&#x27;.cell&#x27;</span></span><br><span class="line"> fileid=<span class="number">10</span></span><br><span class="line"> open(<span class="keyword">unit</span>=fileid,<span class="keyword">file</span>=filename)</span><br><span class="line"><span class="comment">!=================debug===============</span></span><br><span class="line"><span class="keyword">if</span>(debug==<span class="number">1</span>) <span class="built_in">print</span>*,<span class="string">&#x27;Input string: &#x27;</span>//<span class="built_in">trim</span>(str)</span><br><span class="line"><span class="comment">!=====================================</span></span><br><span class="line"> i=<span class="number">0</span></span><br><span class="line"> <span class="keyword">do</span> <span class="keyword">while</span>(<span class="literal">.true.</span>)</span><br><span class="line">    read(<span class="keyword">unit</span>=fileid,<span class="keyword">fmt</span>=<span class="string">&#x27;(a)&#x27;</span>)str</span><br><span class="line">    i=i+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span>(str(<span class="number">1</span>:<span class="number">24</span>)==<span class="string">&quot;%ENDBLOCK POSITIONS_FRAC&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    close(fileid)</span><br><span class="line">    <span class="keyword">goto</span> <span class="number">30</span> </span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span> </span><br><span class="line"> <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"></span><br><span class="line"><span class="number">30</span> <span class="keyword">continue</span></span><br><span class="line">total=i</span><br><span class="line">aux=total-<span class="number">8</span></span><br><span class="line"><span class="built_in">allocate</span>(frac(aux))</span><br><span class="line"><span class="built_in">allocate</span>(ElemSymb(aux))</span><br><span class="line"><span class="built_in">allocate</span>(ElemZ(aux))</span><br><span class="line"> open(<span class="keyword">unit</span>=fileid,<span class="keyword">file</span>=filename)</span><br><span class="line"> <span class="keyword">do</span> i=<span class="number">1</span>,total-<span class="number">1</span></span><br><span class="line">      read(<span class="keyword">unit</span>=fileid,<span class="keyword">fmt</span>=<span class="string">&#x27;(a)&#x27;</span>)str</span><br><span class="line">      <span class="keyword">if</span>(i&gt;<span class="number">1</span> <span class="keyword">.and.</span> i&lt;<span class="number">5</span>) <span class="keyword">then</span></span><br><span class="line">         vector(i-<span class="number">1</span>)=str </span><br><span class="line">      elseif(i&gt;=<span class="number">8</span>)<span class="keyword">then</span> </span><br><span class="line">         frac(i-<span class="number">7</span>)=str</span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"> <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"> close(<span class="keyword">unit</span>=fileid)</span><br><span class="line">i=<span class="built_in">index</span>(filename,<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line">prefile=filename(<span class="number">1</span>:(i-<span class="number">1</span>))</span><br><span class="line">fdf=<span class="built_in">trim</span>(prefile)//<span class="string">&quot;.fdf&quot;</span></span><br><span class="line">  <span class="keyword">do</span> i=<span class="number">1</span>,aux</span><br><span class="line">    str=frac(i)</span><br><span class="line">    ElemSymb(i)=str(<span class="number">2</span>:<span class="number">3</span>)</span><br><span class="line">    ElemZ(i)=GetElemZ(ElemSymb(i))</span><br><span class="line">    frac(i)=str(<span class="number">4</span>:<span class="number">66</span>)</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"><span class="comment">!========================debug=========================</span></span><br><span class="line"><span class="keyword">if</span>(debug==<span class="number">1</span>)<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">print</span>*,<span class="string">&quot;total N.O.of Atom&quot;</span>,aux</span><br><span class="line">  <span class="built_in">print</span>*,<span class="string">&#x27;ElemSymb&#x27;</span>,ElemSymb</span><br><span class="line">  <span class="built_in">print</span>*,<span class="string">&#x27;ElemZ&#x27;</span>,ElemZ</span><br><span class="line">  <span class="built_in">print</span>*,<span class="string">&#x27;frac&#x27;</span>,frac</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"><span class="comment">!======================================================</span></span><br><span class="line"><span class="comment">!core for calculate NO of species and SpeciNo</span></span><br><span class="line">m=<span class="number">1</span></span><br><span class="line">k=<span class="number">0</span></span><br><span class="line"><span class="keyword">do</span> i=<span class="number">1</span>,aux</span><br><span class="line">   <span class="keyword">if</span>(i==aux)<span class="keyword">then</span></span><br><span class="line">      k=k+<span class="number">1</span></span><br><span class="line">      SpeciNo(m)=k</span><br><span class="line">   <span class="keyword">else</span></span><br><span class="line">      j=i+<span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span>(ElemZ(i)==ElemZ(j))<span class="keyword">then</span></span><br><span class="line">            k=k+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            SpeciNo(m)=k+<span class="number">1</span></span><br><span class="line">            k=<span class="number">0</span></span><br><span class="line">            m=m+<span class="number">1</span></span><br><span class="line">        <span class="keyword">endif</span></span><br><span class="line">   <span class="keyword">endif</span></span><br><span class="line"><span class="keyword">enddo</span></span><br><span class="line"><span class="comment">!========================Debug==========================</span></span><br><span class="line"><span class="keyword">if</span>(debug==<span class="number">1</span>)<span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>*,<span class="string">&#x27;N.O. of species:  &#x27;</span>//num2char(m)</span><br><span class="line"><span class="built_in">print</span>*,<span class="string">&#x27;SpeciNo:&#x27;</span>,speciNo</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="comment">!=======================================================</span></span><br><span class="line"><span class="keyword">call</span> writetofdf(frac,SpeciNo,m,ElemZ,ElemSymb,aux,prefile,fdf,vector)</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">subroutine</span></span> writetofdf(frac,SpeciNo,m,ElemZ,ElemSymb,aux,filename,fdf,vector)</span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"><span class="keyword">integer</span> aux</span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">90</span>) frac(aux),vector(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">2</span>) ElemSymb(aux)</span><br><span class="line"><span class="keyword">integer</span> SpeciNo(m),ElemZ(aux),m,i,<span class="built_in">count</span>,j</span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">30</span>) fdf,filename</span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">90</span>)str</span><br><span class="line"><span class="keyword">integer</span>,<span class="keyword">external</span>::GetElemZ</span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">10</span>),<span class="keyword">external</span> ::num2char</span><br><span class="line">open(<span class="keyword">unit</span>=<span class="number">10</span>,<span class="keyword">file</span>=fdf)</span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;SystemName    &#x27;</span>//filename</span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;SystemLabel   &#x27;</span>//filename</span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;NumberOfSpecies&#x27;</span>//<span class="string">&#x27;  &#x27;</span>//num2char(m)</span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;NumberOfAtoms&#x27;</span>//<span class="string">&#x27;  &#x27;</span>//num2char(aux)</span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;%block ChemicalSpeciesLabel&#x27;</span></span><br><span class="line"><span class="built_in">count</span>=<span class="number">0</span></span><br><span class="line"><span class="keyword">if</span>(aux==<span class="number">1</span>)<span class="keyword">then</span></span><br><span class="line">  <span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(30a)&#x27;</span>)<span class="built_in">trim</span>(num2char(<span class="number">1</span>)//<span class="string">&#x27;  &#x27;</span>//num2char(GetElemZ(ElemSymb(<span class="number">1</span>)))//<span class="string">&#x27; &#x27;</span>//ElemSymb(<span class="number">1</span>))</span><br><span class="line">  <span class="built_in">print</span>*,ElemSymb(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="keyword">do</span> i=<span class="number">1</span>,m</span><br><span class="line">   <span class="built_in">count</span>=<span class="built_in">count</span>+SpeciNo(i)</span><br><span class="line">     str=num2char(i)//<span class="string">&#x27;  &#x27;</span>//num2char(GetElemz(ElemSymb(<span class="built_in">count</span>)))//<span class="string">&#x27;  &#x27;</span>//ElemSymb(<span class="built_in">count</span>)</span><br><span class="line">    <span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="built_in">trim</span>(str)</span><br><span class="line">    <span class="built_in">print</span>*,ElemSymb(<span class="built_in">count</span>)</span><br><span class="line">  <span class="keyword">enddo</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;%endblock ChemicalSpeciesLabel&#x27;</span></span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;LatticeConstant    1.0  Ang&#x27;</span></span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;%block LatticeVectors&#x27;</span></span><br><span class="line"><span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">3</span></span><br><span class="line"> <span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)vector(i)</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;%endblock LatticeVectors&#x27;</span></span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;AtomicCoordinatesFormat     Fractional&#x27;</span></span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;%block AtomicCoordinatesAndAtomicSpecies&#x27;</span></span><br><span class="line"><span class="built_in">count</span>=<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span>(aux==<span class="number">1</span>)<span class="keyword">then</span></span><br><span class="line">   <span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="built_in">trim</span>( frac(<span class="number">1</span>))//<span class="string">&quot;    &quot;</span>//num2char(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"> <span class="keyword">do</span> i=<span class="number">1</span>,m</span><br><span class="line"><span class="comment">!  count=count+SpeciNo(i)</span></span><br><span class="line">    <span class="keyword">do</span> j=<span class="built_in">count</span>,SpeciNo(i)+<span class="built_in">count</span>-<span class="number">1</span></span><br><span class="line">       <span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="built_in">trim</span>( frac(j))//<span class="string">&quot;    &quot;</span>//num2char(i)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">   <span class="built_in">count</span>=<span class="built_in">count</span>+SpeciNo(i)</span><br><span class="line"> <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;%endblock AtomicCoordinatesAndAtomicSpecies&#x27;</span></span><br><span class="line"><span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)<span class="string">&#x27;%include para.fdf&#x27;</span></span><br><span class="line"><span class="comment">!call copyfile(&#x27;later.fdf&#x27;,fdf)</span></span><br><span class="line">close(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">subroutine</span></span> copyfile(file1,file2)</span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">90</span>) line</span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">30</span>)file1,file2</span><br><span class="line">open(<span class="number">11</span>,<span class="keyword">file</span>=<span class="built_in">trim</span>(file1),<span class="keyword">status</span>=<span class="string">&#x27;old&#x27;</span>)</span><br><span class="line"><span class="keyword">do</span> <span class="keyword">while</span>(<span class="literal">.true.</span>)</span><br><span class="line">  read(<span class="number">11</span>,err=<span class="number">40</span>,<span class="keyword">end</span>=<span class="number">40</span>,<span class="keyword">fmt</span>=<span class="string">&#x27;(a)&#x27;</span>)line</span><br><span class="line">  <span class="built_in">write</span>(<span class="number">10</span>,<span class="string">&#x27;(a)&#x27;</span>)line</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line"> <span class="number">40</span>     <span class="keyword">continue</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">character</span>(len=*) <span class="function"><span class="keyword">function</span></span> num2char(num)</span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"><span class="keyword">integer</span> num</span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">10</span>) str</span><br><span class="line"><span class="built_in">write</span>(str,<span class="string">&#x27;(i4)&#x27;</span>)num</span><br><span class="line">num2char=<span class="built_in">trim</span>(<span class="built_in">adjustl</span>(str))</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">integer</span> <span class="function"><span class="keyword">function</span></span> GetElemZ(str)</span><br><span class="line"><span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"><span class="keyword">integer</span> i</span><br><span class="line"><span class="keyword">character</span>(len=<span class="number">2</span>) str</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(str==<span class="string">&quot;H&quot;</span> <span class="keyword">.or.</span> str==<span class="string">&quot;H &quot;</span> <span class="keyword">.or.</span> str== <span class="string">&quot; H&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">1</span></span><br><span class="line"> elseif(str==<span class="string">&quot;He&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">2</span></span><br><span class="line"> elseif(str==<span class="string">&quot;Li&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">3</span></span><br><span class="line"> elseif(str==<span class="string">&quot;Be&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">4</span></span><br><span class="line"> elseif(str==<span class="string">&quot;B&quot;</span> <span class="keyword">.or.</span> str==<span class="string">&quot;B &quot;</span> <span class="keyword">.or.</span> str== <span class="string">&quot; B&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">5</span></span><br><span class="line"> elseif(str==<span class="string">&quot;C&quot;</span> <span class="keyword">.or.</span> str==<span class="string">&quot;C &quot;</span> <span class="keyword">.or.</span> str== <span class="string">&quot; C&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">6</span></span><br><span class="line"> elseif(str==<span class="string">&quot;N&quot;</span> <span class="keyword">.or.</span> str==<span class="string">&quot;N &quot;</span> <span class="keyword">.or.</span> str== <span class="string">&quot; N&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">7</span></span><br><span class="line"> elseif(str==<span class="string">&quot;O&quot;</span> <span class="keyword">.or.</span> str==<span class="string">&quot;O &quot;</span> <span class="keyword">.or.</span> str== <span class="string">&quot; O&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">8</span></span><br><span class="line"> elseif(str==<span class="string">&quot;F&quot;</span> <span class="keyword">.or.</span> str==<span class="string">&quot;F &quot;</span> <span class="keyword">.or.</span> str== <span class="string">&quot; F&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">9</span></span><br><span class="line"> elseif(str==<span class="string">&quot;Na&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">11</span></span><br><span class="line"> elseif(str==<span class="string">&quot;Mg&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">12</span></span><br><span class="line"> elseif(str==<span class="string">&quot;Al&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">13</span></span><br><span class="line"> elseif(str==<span class="string">&quot;Si&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">14</span></span><br><span class="line"> elseif(str==<span class="string">&quot;P&quot;</span> <span class="keyword">.or.</span> str==<span class="string">&quot;P &quot;</span> <span class="keyword">.or.</span> str== <span class="string">&quot; P&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">15</span></span><br><span class="line"> elseif(str==<span class="string">&quot;S&quot;</span> <span class="keyword">.or.</span> str==<span class="string">&quot;S &quot;</span> <span class="keyword">.or.</span> str== <span class="string">&quot; S&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">16</span></span><br><span class="line"> elseif(str==<span class="string">&quot;Cl&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">17</span></span><br><span class="line"> elseif(str==<span class="string">&quot;K&quot;</span> <span class="keyword">.or.</span> str==<span class="string">&quot;K &quot;</span> <span class="keyword">.or.</span> str== <span class="string">&quot; K&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">19</span> </span><br><span class="line"> elseif(str==<span class="string">&quot;Ca&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">20</span></span><br><span class="line"> elseif(str==<span class="string">&quot;Sc&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">21</span></span><br><span class="line">elseif(str==<span class="string">&quot;Ti&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">22</span></span><br><span class="line">elseif(str==<span class="string">&quot;V&quot;</span> <span class="keyword">.or.</span> str==<span class="string">&quot;V &quot;</span> <span class="keyword">.or.</span> str== <span class="string">&quot; V&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">23</span></span><br><span class="line">elseif(str==<span class="string">&quot;Cr&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">24</span></span><br><span class="line">elseif(str==<span class="string">&quot;Mn&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">25</span></span><br><span class="line">elseif(str==<span class="string">&quot;Fe&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">26</span></span><br><span class="line">elseif(str==<span class="string">&quot;Co&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">27</span></span><br><span class="line">elseif(str==<span class="string">&quot;Ni&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">28</span></span><br><span class="line">elseif(str==<span class="string">&quot;Cu&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">29</span></span><br><span class="line">elseif(str==<span class="string">&quot;Zn&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">30</span></span><br><span class="line">elseif(str==<span class="string">&quot;Ga&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">31</span></span><br><span class="line">elseif(str==<span class="string">&quot;Ge&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">32</span></span><br><span class="line">elseif(str==<span class="string">&quot;As&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">33</span></span><br><span class="line">elseif(str==<span class="string">&quot;Se&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">34</span></span><br><span class="line">elseif(str==<span class="string">&quot;Br&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">35</span></span><br><span class="line">elseif(str==<span class="string">&quot;Rb&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">37</span></span><br><span class="line">elseif(str==<span class="string">&quot;Sr&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">38</span></span><br><span class="line">elseif(str==<span class="string">&quot;Y&quot;</span> <span class="keyword">.or.</span> str==<span class="string">&quot;Y &quot;</span> <span class="keyword">.or.</span> str== <span class="string">&quot; Y&quot;</span> )<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">39</span></span><br><span class="line">elseif(str==<span class="string">&quot;Zr&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">40</span></span><br><span class="line">elseif(str==<span class="string">&quot;Nb&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">41</span></span><br><span class="line">elseif(str==<span class="string">&quot;Mo&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">42</span></span><br><span class="line">elseif(str==<span class="string">&quot;Tc&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">43</span></span><br><span class="line">elseif(str==<span class="string">&quot;Ru&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">44</span></span><br><span class="line">elseif(str==<span class="string">&quot;Rh&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">45</span></span><br><span class="line">elseif(str==<span class="string">&quot;Pd&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">46</span></span><br><span class="line">elseif(str==<span class="string">&quot;Ag&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">47</span></span><br><span class="line">elseif(str==<span class="string">&quot;Cd&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">48</span></span><br><span class="line">elseif(str==<span class="string">&quot;In&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">49</span></span><br><span class="line">elseif(str==<span class="string">&quot;Sn&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">50</span></span><br><span class="line">elseif(str==<span class="string">&quot;Sb&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">51</span></span><br><span class="line">elseif(str==<span class="string">&quot;Te&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">52</span></span><br><span class="line">elseif(str==<span class="string">&quot;I&quot;</span> <span class="keyword">.or.</span> str==<span class="string">&#x27; I&#x27;</span> <span class="keyword">.or.</span> str==<span class="string">&#x27;I &#x27;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">53</span></span><br><span class="line">elseif(str==<span class="string">&quot;Cs&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">55</span></span><br><span class="line">elseif(str==<span class="string">&quot;Ba&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">56</span></span><br><span class="line">elseif(str==<span class="string">&quot;Bi&quot;</span>)<span class="keyword">then</span></span><br><span class="line">    i=<span class="number">83</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">stop</span> <span class="string">&quot;element not found !&quot;</span></span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line">GetElemZ=i</span><br><span class="line">  <span class="keyword">if</span>(GetElemZ==<span class="number">0</span>) <span class="keyword">stop</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">function</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>fotran注释行编写了使用方法。另外，部分元素没有加入，需要时可以手动加入。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> materials </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fortran </tag>
            
            <tag> cell </tag>
            
            <tag> fdf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VASP高通量计算</title>
      <link href="/2021/06/30/computer/high-throughput/high-throughput-vasp/"/>
      <url>/2021/06/30/computer/high-throughput/high-throughput-vasp/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>以vasp为例，假定你有很多结构，在init_clusters里面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">init_clusters/N-10-sg-0.vasp  init_clusters/N-12-sg-5.vasp  init_clusters/N-15-sg-4.vasp  init_clusters/N-18-sg-3.vasp</span><br><span class="line">init_clusters/N-10-sg-1.vasp  init_clusters/N-13-sg-0.vasp  init_clusters/N-15-sg-5.vasp  init_clusters/N-18-sg-4.vasp</span><br><span class="line">init_clusters/N-10-sg-2.vasp  init_clusters/N-13-sg-1.vasp  init_clusters/N-16-sg-0.vasp  init_clusters/N-18-sg-5.vasp</span><br><span class="line">init_clusters/N-10-sg-3.vasp  init_clusters/N-13-sg-2.vasp  init_clusters/N-16-sg-1.vasp  init_clusters/N-19-sg-0.vasp</span><br><span class="line">init_clusters/N-10-sg-4.vasp  init_clusters/N-13-sg-3.vasp  init_clusters/N-16-sg-2.vasp  init_clusters/N-19-sg-1.vasp</span><br><span class="line">init_clusters/N-10-sg-5.vasp  init_clusters/N-13-sg-4.vasp  init_clusters/N-16-sg-3.vasp  init_clusters/N-19-sg-2.vasp</span><br><span class="line">init_clusters/N-11-sg-0.vasp  init_clusters/N-13-sg-5.vasp  init_clusters/N-16-sg-4.vasp  init_clusters/N-19-sg-3.vasp</span><br><span class="line">init_clusters/N-11-sg-1.vasp  init_clusters/N-14-sg-0.vasp  init_clusters/N-16-sg-5.vasp  init_clusters/N-19-sg-4.vasp</span><br><span class="line">init_clusters/N-11-sg-2.vasp  init_clusters/N-14-sg-1.vasp  init_clusters/N-17-sg-0.vasp  init_clusters/N-19-sg-5.vasp</span><br><span class="line">init_clusters/N-11-sg-3.vasp  init_clusters/N-14-sg-2.vasp  init_clusters/N-17-sg-1.vasp  init_clusters/N-20-sg-0.vasp</span><br><span class="line">init_clusters/N-11-sg-4.vasp  init_clusters/N-14-sg-3.vasp  init_clusters/N-17-sg-2.vasp  init_clusters/N-20-sg-1.vasp</span><br><span class="line">init_clusters/N-11-sg-5.vasp  init_clusters/N-14-sg-4.vasp  init_clusters/N-17-sg-3.vasp  init_clusters/N-20-sg-2.vasp</span><br><span class="line">init_clusters/N-12-sg-0.vasp  init_clusters/N-14-sg-5.vasp  init_clusters/N-17-sg-4.vasp  init_clusters/N-20-sg-3.vasp</span><br><span class="line">init_clusters/N-12-sg-1.vasp  init_clusters/N-15-sg-0.vasp  init_clusters/N-17-sg-5.vasp  init_clusters/N-20-sg-4.vasp</span><br><span class="line">init_clusters/N-12-sg-2.vasp  init_clusters/N-15-sg-1.vasp  init_clusters/N-18-sg-0.vasp  init_clusters/N-20-sg-5.vasp</span><br><span class="line">init_clusters/N-12-sg-3.vasp  init_clusters/N-15-sg-2.vasp  init_clusters/N-18-sg-1.vasp</span><br><span class="line">init_clusters/N-12-sg-4.vasp  init_clusters/N-15-sg-3.vasp  init_clusters/N-18-sg-2.vasp</span><br></pre></td></tr></table></figure><p>现在想要用相同的INCAR，POTCAR，KPOINTS提交任务（当然，这些也可以不一样，需要适当修改下面程序），计算完的任务全部放在fp文件夹（提前手动建立）里面。</p><hr><p> 实际上需要满足：</p><ul><li><strong>容错</strong> <a href="https://github.com/materialsproject/custodian">custodian</a> 可以自动解决vasp常见错误</li><li><strong>重启</strong> 计算过的任务不会重新计算</li><li><strong>远程提交</strong>  在本地可以提交的远程机器 （比如通过cl10向cl9提交任务）</li><li><strong>队列系统</strong>  需要适用于常见的队列系统</li></ul><h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p>runvasp.py</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import shutil</span><br><span class="line">from glob import glob</span><br><span class="line">from dpgen.remote.decide_machine import decide_fp_machine</span><br><span class="line">from dpgen.dispatcher.Dispatcher import Dispatcher, make_dispatcher</span><br><span class="line">from monty.serialization import loadfn,dumpfn</span><br><span class="line"></span><br><span class="line">def create_path (path,backup=False) :</span><br><span class="line">    if  path[-1] != &quot;/&quot;:</span><br><span class="line">        path += &#x27;/&#x27;</span><br><span class="line">    if os.path.isdir(path) :</span><br><span class="line">        if backup:</span><br><span class="line">           dirname = os.path.dirname(path)</span><br><span class="line">           counter = 0</span><br><span class="line">           while True :</span><br><span class="line">               bk_dirname = dirname + &quot;.bk%06d&quot; % counter</span><br><span class="line">               if not os.path.isdir(bk_dirname) :</span><br><span class="line">                   shutil.move (dirname, bk_dirname)</span><br><span class="line">                   break</span><br><span class="line">               counter += 1</span><br><span class="line">           os.makedirs (path)</span><br><span class="line">           return path</span><br><span class="line">        else:</span><br><span class="line">           return path</span><br><span class="line"></span><br><span class="line">    os.makedirs (path)</span><br><span class="line">    return path</span><br><span class="line">#--------------------------------------------------</span><br><span class="line">pwd=os.getcwd()</span><br><span class="line">work_path = os.path.join(pwd,&#x27;fp&#x27;)</span><br><span class="line"></span><br><span class="line">fs=glob(os.path.join(pwd,&#x27;init_clusters&#x27;,&#x27;*.vasp&#x27;))</span><br><span class="line">fs.sort()</span><br><span class="line"></span><br><span class="line">for i in range(len(fs)):</span><br><span class="line">    task_name=&quot;task.%05d&quot;%i</span><br><span class="line">    task_path=os.path.join(work_path,task_name)</span><br><span class="line">    create_path(task_path)</span><br><span class="line">    os.chdir(task_path)</span><br><span class="line">    shutil.copyfile(os.path.abspath(fs[i]), os.path.basename(fs[i]))</span><br><span class="line">    shutil.copyfile(os.path.basename(fs[i]),&#x27;POSCAR&#x27;)</span><br><span class="line">    shutil.copyfile(os.path.join(pwd,&#x27;INCAR&#x27;),&#x27;INCAR&#x27;)</span><br><span class="line">    shutil.copyfile(os.path.join(pwd,&#x27;POTCAR&#x27;),&#x27;POTCAR&#x27;)</span><br><span class="line">    shutil.copyfile(os.path.join(pwd,&#x27;KPOINTS&#x27;),&#x27;KPOINTS&#x27;)</span><br><span class="line">os.chdir(pwd)</span><br><span class="line">#os._exit(0)</span><br><span class="line">fp_tasks = glob(os.path.join(work_path, &#x27;task.*&#x27;))</span><br><span class="line">fp_tasks.sort()</span><br><span class="line">run_tasks = [os.path.basename(ii) for ii in fp_tasks]</span><br><span class="line">#----------------------------------------------------</span><br><span class="line">forward_files = [&#x27;POSCAR&#x27;, &#x27;INCAR&#x27;, &#x27;POTCAR&#x27;,&#x27;KPOINTS&#x27;]</span><br><span class="line">backward_files = [&#x27;OUTCAR&#x27;,&#x27;vasprun.xml&#x27;,&#x27;CONTCAR&#x27;]</span><br><span class="line">forward_common_files=[]</span><br><span class="line">mark_failure =False</span><br><span class="line">log_file=&#x27;runlog&#x27;</span><br><span class="line">err_file=&#x27;errlog&#x27;</span><br><span class="line">mdata=loadfn(&#x27;machine.json&#x27;)</span><br><span class="line">mdata  = decide_fp_machine(mdata)</span><br><span class="line">#dumpfn(mdata,&#x27;new.json&#x27;,indent=4)</span><br><span class="line">fp_command = mdata[&#x27;fp_command&#x27;]</span><br><span class="line">fp_group_size = mdata[&#x27;fp_group_size&#x27;]</span><br><span class="line">#---------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dispatcher = make_dispatcher(mdata[&#x27;fp_machine&#x27;],</span><br><span class="line">                             mdata_resource=mdata[&#x27;fp_resources&#x27;],</span><br><span class="line">                             work_path=work_path,</span><br><span class="line">                             run_tasks=run_tasks,</span><br><span class="line">                             group_size=fp_group_size)</span><br><span class="line">dispatcher.run_jobs(mdata[&#x27;fp_resources&#x27;],</span><br><span class="line">                        [fp_command],</span><br><span class="line">                        work_path,</span><br><span class="line">                        run_tasks,</span><br><span class="line">                        fp_group_size,</span><br><span class="line">                        forward_common_files,</span><br><span class="line">                        forward_files,</span><br><span class="line">                        backward_files,</span><br><span class="line">                        mark_failure=mark_failure,</span><br><span class="line">                        outlog = log_file,</span><br><span class="line">                        errlog = err_file)</span><br></pre></td></tr></table></figure><h2 id="机器配置文件"><a href="#机器配置文件" class="headerlink" title="机器配置文件"></a>机器配置文件</h2><p>machine.json<br>可以参考<a href="https://github.com/haidi-ustc/dpgen/tree/devel#set-up-machine">dpgen-machine</a><br>这里可以配置任意数量的机器，下面一般本地slurm提交为例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;train&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;machine&quot;: &#123;</span><br><span class="line">        &quot;batch&quot;: &quot;slurm&quot;,</span><br><span class="line">        &quot;hostname&quot;: &quot;&quot;,</span><br><span class="line">        &quot;port&quot;: 22,</span><br><span class="line">        &quot;username&quot;: &quot;haidi&quot;,</span><br><span class="line">        &quot;work_path&quot;: &quot;/fs0/home/haidi/work/Au/runvasp/work&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;resources&quot;: &#123;</span><br><span class="line">        &quot;numb_gpu&quot;: 1,</span><br><span class="line">        &quot;numb_node&quot;: 1,</span><br><span class="line">        &quot;task_per_node&quot;: 30,</span><br><span class="line">        &quot;partition&quot;: &quot;gpu4&quot;,</span><br><span class="line">        &quot;exclude_list&quot;: [],</span><br><span class="line">        &quot;_mem_limit&quot;: 28,</span><br><span class="line">        &quot;source_list&quot;: [],</span><br><span class="line">        &quot;module_list&quot;: [],</span><br><span class="line">        &quot;task_max&quot;: 200,</span><br><span class="line">        &quot;time_limit&quot;: &quot;48:0:0&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;command&quot;: &quot;/fs0/home/haidi/soft/deepmd-kit-gpu-1.2.0/bin/dp&quot;,</span><br><span class="line">      &quot;group_size&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  &quot;model_devi&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;machine&quot;: &#123;</span><br><span class="line">        &quot;batch&quot;: &quot;slurm&quot;,</span><br><span class="line">        &quot;hostname&quot;: &quot;&quot;,</span><br><span class="line">        &quot;port&quot;: 22,</span><br><span class="line">        &quot;username&quot;: &quot;haidi&quot;,</span><br><span class="line">        &quot;work_path&quot;: &quot;/fs0/home/haidi/work/Au/runvasp/work&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;resources&quot;: &#123;</span><br><span class="line">        &quot;numb_gpu&quot;: 1,</span><br><span class="line">        &quot;numb_node&quot;: 1,</span><br><span class="line">        &quot;task_per_node&quot;: 4,</span><br><span class="line">        &quot;partition&quot;: &quot;gpu4&quot;,</span><br><span class="line">        &quot;exclude_list&quot;: [],</span><br><span class="line">        &quot;_mem_limit&quot;: 28,</span><br><span class="line">        &quot;source_list&quot;: [],</span><br><span class="line">        &quot;module_list&quot;: [],</span><br><span class="line">        &quot;task_max&quot;: 100,</span><br><span class="line">        &quot;time_limit&quot;: &quot;23:0:0&quot;,</span><br><span class="line">        &quot;envs&quot; : &#123;</span><br><span class="line">                  &quot;TF_INTRA_OP_PARALLELISM_THREADS&quot;:1,</span><br><span class="line">                  &quot;TF_INTER_OP_PARALLELISM_THREADS&quot;:1,</span><br><span class="line">                  &quot;OMP_NUM_THREADS&quot;:4</span><br><span class="line">                &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;command&quot;: &quot;/fs0/home/haidi/soft/deepmd-kit-gpu-1.2.0/bin/lmp&quot;,</span><br><span class="line">      &quot;group_size&quot;: 10</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  &quot;fp&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;machine&quot;: &#123;</span><br><span class="line">        &quot;batch&quot;: &quot;slurm&quot;,</span><br><span class="line">        &quot;hostname&quot;: &quot;&quot;,</span><br><span class="line">        &quot;port&quot;: 22,</span><br><span class="line">        &quot;username&quot;: &quot;haidi&quot;,</span><br><span class="line">        &quot;work_path&quot;: &quot;/fs0/home/haidi/work/Au/runvasp/work&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;resources&quot;: &#123;</span><br><span class="line">        &quot;allow_failure&quot;: true,</span><br><span class="line">        &quot;ratio_failue&quot;: 0.05,</span><br><span class="line">        &quot;numb_node&quot;: 1,</span><br><span class="line">        &quot;task_per_node&quot;: 40,</span><br><span class="line">        &quot;partition&quot;: &quot;cpu&quot;,</span><br><span class="line">        &quot;with_mpi&quot;: false,</span><br><span class="line">        &quot;task_max&quot;: 100,</span><br><span class="line">        &quot;exclude_list&quot;: [&quot;cu11&quot;,&quot;cu02&quot;],</span><br><span class="line">        &quot;time_limit&quot;: &quot;48:0:0&quot;,</span><br><span class="line">        &quot;source_list&quot;: [&quot;/fs0/software/intel/2017u5/parallel_studio_xe_2017.5.061/psxevars.sh intel64&quot;],</span><br><span class="line">        &quot;envs&quot; : &#123;&quot;PATH&quot; : &quot;/fs0/home/haidi/soft/vasp-5.4.4-2017u5/bin:$PATH&quot;   &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;command&quot;: &quot;mpirun -np 40 vasp_gam&quot;,</span><br><span class="line">      &quot;group_size&quot;: 1</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── fp</span><br><span class="line">├── INCAR</span><br><span class="line">├── init_clusters</span><br><span class="line">│   ├── N-10-sg-0.vasp</span><br><span class="line">│   ├── N-10-sg-1.vasp</span><br><span class="line">│   ├── N-10-sg-2.vasp</span><br><span class="line">│   ├── N-10-sg-3.vasp</span><br><span class="line">│   ├── N-10-sg-4.vasp</span><br><span class="line">│   ├── N-10-sg-5.vasp</span><br><span class="line">│   ├── N-11-sg-0.vasp</span><br><span class="line">│   ├── N-11-sg-1.vasp</span><br><span class="line">│   ├── N-11-sg-2.vasp</span><br><span class="line">│   ├── N-11-sg-3.vasp</span><br><span class="line">│   ├── N-11-sg-4.vasp</span><br><span class="line">│   ├── N-11-sg-5.vasp</span><br><span class="line">│   ├── N-12-sg-0.vasp</span><br><span class="line">│   ├── N-12-sg-1.vasp</span><br><span class="line">│   ├── N-12-sg-2.vasp</span><br><span class="line">│   ├── N-12-sg-3.vasp</span><br><span class="line">│   ├── N-12-sg-4.vasp</span><br><span class="line">│   ├── N-12-sg-5.vasp</span><br><span class="line">│   ├── N-13-sg-0.vasp</span><br><span class="line">│   ├── N-13-sg-1.vasp</span><br><span class="line">│   ├── N-13-sg-2.vasp</span><br><span class="line">│   ├── N-13-sg-3.vasp</span><br><span class="line">│   ├── N-13-sg-4.vasp</span><br><span class="line">│   ├── N-13-sg-5.vasp</span><br><span class="line">│   ├── N-14-sg-0.vasp</span><br><span class="line">│   ├── N-14-sg-1.vasp</span><br><span class="line">│   ├── N-14-sg-2.vasp</span><br><span class="line">│   ├── N-14-sg-3.vasp</span><br><span class="line">│   ├── N-14-sg-4.vasp</span><br><span class="line">│   ├── N-14-sg-5.vasp</span><br><span class="line">│   ├── N-15-sg-0.vasp</span><br><span class="line">│   ├── N-15-sg-1.vasp</span><br><span class="line">│   ├── N-15-sg-2.vasp</span><br><span class="line">│   ├── N-15-sg-3.vasp</span><br><span class="line">│   ├── N-15-sg-4.vasp</span><br><span class="line">│   ├── N-15-sg-5.vasp</span><br><span class="line">│   ├── N-16-sg-0.vasp</span><br><span class="line">│   ├── N-16-sg-1.vasp</span><br><span class="line">│   ├── N-16-sg-2.vasp</span><br><span class="line">│   ├── N-16-sg-3.vasp</span><br><span class="line">│   ├── N-16-sg-4.vasp</span><br><span class="line">│   ├── N-16-sg-5.vasp</span><br><span class="line">│   ├── N-17-sg-0.vasp</span><br><span class="line">│   ├── N-17-sg-1.vasp</span><br><span class="line">│   ├── N-17-sg-2.vasp</span><br><span class="line">│   ├── N-17-sg-3.vasp</span><br><span class="line">│   ├── N-17-sg-4.vasp</span><br><span class="line">│   ├── N-17-sg-5.vasp</span><br><span class="line">│   ├── N-18-sg-0.vasp</span><br><span class="line">│   ├── N-18-sg-1.vasp</span><br><span class="line">│   ├── N-18-sg-2.vasp</span><br><span class="line">│   ├── N-18-sg-3.vasp</span><br><span class="line">│   ├── N-18-sg-4.vasp</span><br><span class="line">│   ├── N-18-sg-5.vasp</span><br><span class="line">│   ├── N-19-sg-0.vasp</span><br><span class="line">│   ├── N-19-sg-1.vasp</span><br><span class="line">│   ├── N-19-sg-2.vasp</span><br><span class="line">│   ├── N-19-sg-3.vasp</span><br><span class="line">│   ├── N-19-sg-4.vasp</span><br><span class="line">│   ├── N-19-sg-5.vasp</span><br><span class="line">│   ├── N-20-sg-0.vasp</span><br><span class="line">│   ├── N-20-sg-1.vasp</span><br><span class="line">│   ├── N-20-sg-2.vasp</span><br><span class="line">│   ├── N-20-sg-3.vasp</span><br><span class="line">│   ├── N-20-sg-4.vasp</span><br><span class="line">│   └── N-20-sg-5.vasp</span><br><span class="line">├── machine.json</span><br><span class="line">├── POTCAR</span><br><span class="line">├── KPOINTS</span><br><span class="line">└── runvasp.py</span><br></pre></td></tr></table></figure><h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><p>通过python paromiko软件打包本地文件到本地计算文件夹、或者远程机器计算文件夹，定时查看远程机器的计算状态，等任务计算完成之后，收回文件<em>backward_files 列表</em></p><h2 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h2><p>nohup python -u runvasp.py  &amp;</p><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><p>jr.json记录提交信息，用于重启，放置已经提交或者已经算完的任务再次被提交</p><p>task.*  实际的计算任务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">jr.json     task.00006  task.00013  task.00020  task.00027  task.00034  task.00041  task.00048  task.00055  task.00062</span><br><span class="line">task.00000  task.00007  task.00014  task.00021  task.00028  task.00035  task.00042  task.00049  task.00056  task.00063</span><br><span class="line">task.00001  task.00008  task.00015  task.00022  task.00029  task.00036  task.00043  task.00050  task.00057  task.00064</span><br><span class="line">task.00002  task.00009  task.00016  task.00023  task.00030  task.00037  task.00044  task.00051  task.00058  task.00065</span><br><span class="line">task.00003  task.00010  task.00017  task.00024  task.00031  task.00038  task.00045  task.00052  task.00059</span><br><span class="line">task.00004  task.00011  task.00018  task.00025  task.00032  task.00039  task.00046  task.00053  task.00060</span><br><span class="line">task.00005  task.00012  task.00019  task.00026  task.00033  task.00040  task.00047  task.00054  task.00061</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> vasp </tag>
            
            <tag> high throughput </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cholesky矩阵分解</title>
      <link href="/2021/06/30/algorithm/cholesky-decomposition/"/>
      <url>/2021/06/30/algorithm/cholesky-decomposition/</url>
      
        <content type="html"><![CDATA[<h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><ul><li>介绍(introductions)</li><li>算法(algorithm)</li><li>代码(code)</li></ul><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>Cholesky 分解是把一个对称正定的矩阵表示成一个下三角矩阵L和其转置的乘积的分解。它要求矩阵的所有特征值必须大于零，故分解的下三角的对角元也是大于零的。Cholesky分解法又称平方根法，是当A为实对称正定矩阵时，LU三角分解法的变形。其中<em>L</em>称之为矩阵<strong>A</strong>的Cholesky 因子。</p><h3 id="2-算法"><a href="#2-算法" class="headerlink" title="2. 算法"></a>2. 算法</h3><p>以3x3的矩阵为例，算法如下<br><img src="https://note.youdao.com/yws/api/personal/file/F81901CEA7D94FEEB016CA9B068A5927?method=download&shareKey=f6b4cc2dc0fb65c9c074ccd2d149ae2c" alt="LL"></p><h3 id="3-代码"><a href="#3-代码" class="headerlink" title="3. 代码"></a>3. 代码</h3><p>fortran 代码如下：</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">!  Cholesky_decomposition.f90</span></span><br><span class="line"><span class="comment">!</span></span><br><span class="line"><span class="comment">!****************************************************************************</span></span><br><span class="line"><span class="comment">!</span></span><br><span class="line"><span class="comment">!  PROGRAM: Cholesky_decomposition</span></span><br><span class="line"><span class="comment">!</span></span><br><span class="line"><span class="comment">!  PURPOSE:  Use the Cholesky method to decopose a positive definite matrix ,S=L*L&#x27;</span></span><br><span class="line"><span class="comment">!  here L&#x27; is transpose matrix of L. We then obtain the inverse matrix of S and L</span></span><br><span class="line"><span class="comment">!  matrix as an output.</span></span><br><span class="line"><span class="comment">!</span></span><br><span class="line"><span class="comment">!****************************************************************************</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">program</span></span> Cholesky_decomposition</span><br><span class="line"></span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">! Variables</span></span><br><span class="line">    <span class="keyword">integer</span>::i,j,k</span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=<span class="number">8</span>)::summ</span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=<span class="number">8</span>)::S(<span class="number">3</span>,<span class="number">3</span>)=(/ <span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">1.0</span>,<span class="number">5.0</span>,<span class="number">3.0</span>,<span class="number">1.0</span>,<span class="number">3.0</span>,<span class="number">11.0</span> /)</span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=<span class="number">8</span>)::L(<span class="number">3</span>,<span class="number">3</span>),L_inv(<span class="number">3</span>,<span class="number">3</span>),L_inv_T(<span class="number">3</span>,<span class="number">3</span>),S_inv(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=<span class="number">8</span>),<span class="keyword">intrinsic</span>::<span class="built_in">sqrt</span>,<span class="built_in">transpose</span>,<span class="built_in">matmul</span></span><br><span class="line">    <span class="comment">! Body of Cholesky_decomposition for the positive definite matrix S</span></span><br><span class="line">    <span class="built_in">write</span>(*,*),<span class="string">&quot;S matrix&quot;</span></span><br><span class="line">    <span class="built_in">write</span>(*,<span class="string">&quot;(3(f12.6,2x))&quot;</span>),S</span><br><span class="line"> <span class="comment">!   L(1,1)=sqrt(S(1,1))</span></span><br><span class="line">    <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">         <span class="keyword">do</span> j=<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">                     </span><br><span class="line">                 <span class="keyword">if</span>(i&gt;j)<span class="keyword">then</span></span><br><span class="line">                     summ=<span class="number">0.0</span></span><br><span class="line">                     <span class="keyword">do</span> k=<span class="number">1</span>,j-<span class="number">1</span></span><br><span class="line">                         summ=summ+L(i,k)*L(j,k)</span><br><span class="line">                     <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">                     L(i,j)=(S(i,j)-summ)/L(j,j)</span><br><span class="line">                 elseif(i==j)<span class="keyword">then</span></span><br><span class="line">                     summ=<span class="number">0.0</span></span><br><span class="line">                     <span class="keyword">do</span> k=<span class="number">1</span>,i-<span class="number">1</span></span><br><span class="line">                         summ=summ+L(i,k)**<span class="number">2</span></span><br><span class="line">                     <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">                     L(i,j)=<span class="built_in">sqrt</span>(S(i,j)-summ)</span><br><span class="line">                 <span class="keyword">else</span></span><br><span class="line">                     L(i,j)=<span class="number">0.0</span></span><br><span class="line">                 <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">                 </span><br><span class="line">           </span><br><span class="line">         <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">write</span>(*,*)<span class="string">&quot;L matrix&quot;</span></span><br><span class="line">    <span class="built_in">write</span>(*,<span class="string">&quot;(3(f12.6,2x))&quot;</span>),((L(j,i),i=<span class="number">1</span>,<span class="number">3</span>),j=<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="comment">!!calculate the inverse matrix of L matrix ,at the same time</span></span><br><span class="line">    <span class="comment">!!  S matrix by be sovled with sqare root method</span></span><br><span class="line">    <span class="keyword">do</span> i=<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">         <span class="keyword">do</span> j=<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">            <span class="keyword">if</span>(i==j)<span class="keyword">then</span></span><br><span class="line">                L_inv(i,j)=<span class="number">1</span>/L(i,j)</span><br><span class="line">            elseif(i&gt;j)<span class="keyword">then</span></span><br><span class="line">                summ=<span class="number">0.0</span></span><br><span class="line">                <span class="keyword">do</span> k=<span class="number">1</span>,i-<span class="number">1</span></span><br><span class="line">                    summ=summ+L(i,k)*L_inv(k,j)</span><br><span class="line">                <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">                L_inv(i,j)=-<span class="number">1</span>*summ/L(i,i)</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                L_inv(i,j)=<span class="number">0.0</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">         <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">write</span>(*,*)<span class="string">&quot;L_inv matrix&quot;</span></span><br><span class="line">    <span class="built_in">write</span>(*,<span class="string">&quot;(3(f12.6,2x))&quot;</span>),((L_inv(j,i),i=<span class="number">1</span>,<span class="number">3</span>),j=<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">    L_inv_T=<span class="built_in">transpose</span>(L_inv)</span><br><span class="line">    S_inv=<span class="built_in">matmul</span>(L_inv_T,L_inv)</span><br><span class="line">    <span class="built_in">write</span>(*,*)<span class="string">&quot;S_inv matrix&quot;</span></span><br><span class="line">    <span class="built_in">write</span>(*,<span class="string">&quot;(3(f12.6,2x))&quot;</span>),((S_inv(j,i),i=<span class="number">1</span>,<span class="number">3</span>),j=<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> Cholesky_decomposition</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过<strong>ifort</strong>进行编译,执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifort Cholesky_decomposition.f90 -o cd.x</span><br><span class="line">./cd.x</span><br></pre></td></tr></table></figure><p>可以得到如下结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">S matrix</span><br><span class="line">   1.000000      1.000000      1.000000</span><br><span class="line">   1.000000      5.000000      3.000000</span><br><span class="line">   1.000000      3.000000     11.000000</span><br><span class="line">L matrix</span><br><span class="line">   1.000000      0.000000      0.000000</span><br><span class="line">   1.000000      2.000000      0.000000</span><br><span class="line">   1.000000      1.000000      3.000000</span><br><span class="line">L_inv matrix</span><br><span class="line">   1.000000      0.000000      0.000000</span><br><span class="line">  -0.500000      0.500000      0.000000</span><br><span class="line">  -0.166667     -0.166667      0.333333</span><br><span class="line">S_inv matrix</span><br><span class="line">   1.277778     -0.222222     -0.055556</span><br><span class="line">  -0.222222      0.277778     -0.055556</span><br><span class="line">  -0.055556     -0.055556      0.111111</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fortran </tag>
            
            <tag> matrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大学物理-功的一般性计算</title>
      <link href="/2021/06/29/physics/calculate-work/"/>
      <url>/2021/06/29/physics/calculate-work/</url>
      
        <content type="html"><![CDATA[<blockquote><p>加载环境 (所有命令可以在jupyter notebook中直接运行)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%pylab inline</span><br></pre></td></tr></table></figure><pre><code>Populating the interactive namespace from numpy and matplotlib</code></pre><ul><li>问题描述： 假定质点的质量为1kg，在$\vec{F}(x,y)$的作用下沿着曲线S运行，其中<br>$$\vec{F}(x,y)=(x+y)\vec{i}+xy\vec{j}$$<br>曲线方程S为：<br>$$x=t, y=sin(t) $$<br>其中t$\in$[0,2$\pi$],计算该段时间内力所作的功</li></ul><ul><li>线积分问题：<br>若$\vec{F}(x,y)=P(x,y)\vec{i}+Q(x,y)\vec{j}$,且曲线参数方程为：</li></ul><p>$$<br>             x=x(t),<br>             y=y(t),<br>$$<br>其中t$\in[t_0,t_1]$,</p><p>则$$<br>\int{\vec{F}d\vec{r}}=\int{(P(x,y)\vec{i}+Q(x,y)\vec{j})(dx\vec{i}+dy\vec{j})}<br>$$<br>$$<br>=\int{(P(x,y)dx+Q(x,y)dy)}<br>$$<br>$$<br>=\int{(P(x(t),y(t))x^{‘}(t)+Q(x(t),y(t))y^{‘}(t))dt}<br>$$<br>即<br>$$<br>work : W=\int_{t_0}^{t_1}{(P(x(t),y(t))x^{‘}(t)+Q(x(t),y(t))y^{‘}(t))dt}<br>$$</p><ul><li>可视化 F(x,y),其中箭头表示力的方向，长度表示力的大小</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二维网格坐标</span></span><br><span class="line">x=linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">y=linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">10</span>)</span><br><span class="line">X,Y=meshgrid(x,y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># U,V 定义方向</span></span><br><span class="line">U = X + Y</span><br><span class="line">V = X *Y</span><br><span class="line"></span><br><span class="line"><span class="comment"># C 定义颜色</span></span><br><span class="line">C = sqrt((X + Y)**<span class="number">2</span>+(X*Y)**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">quiver(X, Y, U, V, C)</span><br><span class="line">xlabel(<span class="string">&#x27;F x component/N&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;F y component/N&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/api/personal/file/692F1D72CA464A30945C474758765260?method=download&shareKey=d08541835d538d3c2333dab1640c5098"></p><ul><li>可视化 质点的轨迹方程，很显然，质点按照正弦函数的轨迹运行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">t=linspace(<span class="number">0</span>,<span class="number">2</span>*pi,<span class="number">100</span>)</span><br><span class="line">s=sin(t)</span><br><span class="line">plot(t,s,<span class="string">&#x27;-o&#x27;</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">xlabel(<span class="string">&#x27;time(s)&#x27;</span>)</span><br><span class="line">ylabel(<span class="string">&#x27;distance(m)&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/api/personal/file/CC982A8C12A744B2AC0EEEB932DB04C0?method=download&shareKey=805f334d18af317e800962b79cb02c1c"></p><ul><li>问题即为在上述的力场下面，质点会沿着正弦曲线运动$2\pi$ 秒所作的功</li></ul><p>按照上面的理论分析,所做的功即为：<br>$$<br>\int_{0}^{2\pi}{\vec{F}d\vec{r}}=\int_{0}^{2\pi}{(t+sin(t)+tsin(t)cos(t))dt}<br>$$</p><p>可以画出 被积分函数$f(t)=t+sin(t)+tsin(t)cos(t)$的图像,所作的功即为曲线下面所围成的面积</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f=t+sin(t)+t*sin(t)*cos(t)</span><br><span class="line">fill_between(t,f,y2=<span class="number">0</span>)</span><br><span class="line">plot(t,f,<span class="string">&#x27;r-.o&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://note.youdao.com/yws/api/personal/file/7312B7944B8149E7B0292D1E6853E687?method=download&shareKey=d34b78314cf7d718efed63078ed2571d"></p><ul><li>可以使用python的 sympy 的符号计算，算出来原函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#%load_ext sympyprinting</span></span><br><span class="line"><span class="keyword">from</span> sympy.interactive <span class="keyword">import</span> printing</span><br><span class="line">printing.init_printing(use_latex = <span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy </span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> I, pi, oo,sin,cos</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 初始化函数</span></span><br><span class="line">t = sympy.Symbol(<span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">f = t+sin(t)+t*sin(t)*cos(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数的积分</span></span><br><span class="line">F = sympy.integrate(f)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;积分得到的函数F(t)为&#x27;</span>)</span><br><span class="line">F</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>积分得到的函数F(t)为</p><p>$$\frac{t^{2}}{2} + \frac{t}{4} \sin^{2}{\left (t \right )} - \frac{t}{4} \cos^{2}{\left (t \right )} + \frac{1}{4} \sin{\left (t \right )} \cos{\left (t \right )} - \cos{\left (t \right )}$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Fd=sympy.diff(F)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;重新计算导数，看看是否和原来的被积分函数一致&#x27;</span>)</span><br><span class="line">Fd</span><br></pre></td></tr></table></figure><pre><code>重新计算导数，看看是否和原来的被积分函数一致</code></pre><p>$$t \sin{\left (t \right )} \cos{\left (t \right )} + t + \sin{\left (t \right )}$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;所需要的功为F(2*pi)-F(0)=%.3fN&#x27;</span>%(F.subs(t,<span class="number">2</span>*pi)-F.subs(t,<span class="number">0</span>)))</span><br></pre></td></tr></table></figure><pre><code>所需要的功为F(2*pi)-F(0)=18.168N</code></pre><blockquote><p>思考，如何计算该系统的末态动能？假定初始状态为静止 ？</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> physics </category>
          
      </categories>
      
      
        <tags>
            
            <tag> work </tag>
            
            <tag> python </tag>
            
            <tag> matplotlib </tag>
            
            <tag> jupyter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript之再学习</title>
      <link href="/2021/06/29/computer/javascript/javascript-zhi-zai-xue-xi/"/>
      <url>/2021/06/29/computer/javascript/javascript-zhi-zai-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>JavaScript 是一种面向对象的动态语言，它包含类型、运算符、标准内置（ built-in）对象和方法。它的语法来源于 Java 和 C，所以这两种语言的许多语法特性同样适用于 JavaScript。需要注意的一个主要区别是 JavaScript 不支持类，类这一概念在 JavaScript 通过对象原型（object prototype）得到延续。另一个主要区别是 JavaScript 中的函数也是对象，JavaScript 允许函数在包含可执行代码的同时，能像其他对象一样被传递。</p><h2 id="数据类型和结构"><a href="#数据类型和结构" class="headerlink" title="数据类型和结构"></a>数据类型和结构</h2><h3 id="1-动态类型"><a href="#1-动态类型" class="headerlink" title="1. 动态类型"></a>1. 动态类型</h3><p><code>JavaScript</code>是一种弱类型或者说动态语言。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。这也意味着你可以使用同一个变量保存不同类型的数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">42</span>;    <span class="comment">// foo is a Number now</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">&quot;bar&quot;</span>; <span class="comment">// foo is a String now</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="literal">true</span>;  <span class="comment">// foo is a Boolean now</span></span><br></pre></td></tr></table></figure><h3 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2. 数据类型"></a>2. 数据类型</h3><p>最新的<code>ECMAScript</code>标准定义了 7 种数据类型:</p><ul><li>6 种原始类型<ul><li><code>Null</code> (空, 只有一个值<code>null</code>)</li><li><code>Undefined</code> (未定义, 一个没有被赋值的变量的默认值是<code>undefined</code>):</li><li><code>Boolean</code> (布尔, 可以有两个值：<code>true</code> 和 <code>false</code>)</li><li><code>Number</code> (数字)</li><li><code>String</code> (字符串)</li><li><code>Symbol</code> (符号, ECMAScript 6 新定义的类型，表示独一无二的值)</li></ul></li><li>和 <code>Object</code> (对象)<ul><li><code>Function</code> (函数)</li><li><code>Array</code> (数组)</li><li><code>Date</code> (日期)</li><li><code>JSON</code> (JS对象标识,来序列化对象、数组、数值、字符串、布尔值和 <code>null</code>)</li><li><code>Math</code> (数学方面的计算)</li><li><code>RegExp</code> (正则表达式)</li><li><code>Error</code> (错误)</li><li><code>Map</code></li><li><code>Set</code></li></ul></li></ul><h3 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h3><p>这里的<strong>内置对象</strong>指的是在全局作用域(<code>global scope</code>)中的对象，由于很多，不再一一列出说明，更全面的解释在<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">这里</a>。</p><p>全局对象本身可通过<code>this</code>操作符在全局作用域中获得。实际上，全局作用域就是由全局对象的各个属性组成的（包括继承来的属性）。</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>除了正常运行模式，ECMAscript 5添加了第二种运行模式：”严格模式”（<code>strict mode</code>）。顾名思义，这种模式使得Javascript在更严格的条件下运行。</p><p>严格模式可以应用到整个script标签或个别函数中。设立”严格模式”的目的，主要有以下几个：</p><ul><li>消除 Javascript 语法的一些不合理、不严谨之处，减少一些怪异行为;</li><li>消除代码运行的一些不安全之处，保证代码运行的安全；</li><li>提高编译器效率，增加运行速度；</li><li>为未来新版本的 Javascript 做好铺垫。</li></ul><h3 id="为某个script标签开启严格模式"><a href="#为某个script标签开启严格模式" class="headerlink" title="为某个script标签开启严格模式"></a>为某个script标签开启严格模式</h3><p>进入严格模式的标志，是下面这行语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="为某个函数开启严格模式"><a href="#为某个函数开启严格模式" class="headerlink" title="为某个函数开启严格模式"></a>为某个函数开启严格模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strict</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 函数级别严格模式语法</span></span><br><span class="line">  <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;I&#x27;m a strict mode function!  &quot;</span> + <span class="title function_">nested</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">notStrict</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;I&#x27;m not strict.&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="相等性判断"><a href="#相等性判断" class="headerlink" title="相等性判断"></a>相等性判断</h2><p>JavaScript提供三种不同的值比较操作：</p><ul><li>严格相等 (“triple equals” 或 “identity”)，使用<code>===</code></li><li>宽松相等 (“double equals”) ，使用<code>==</code></li><li>以及<code>Object.is</code> (ECMAScript 2015/ ES6 新特性)</li></ul><p>简而言之，在比较两件事情时，双等号将执行类型转换; 三等号将进行相同的比较，而不进行类型转换 (如果类型不同, 只是总会返回 false );  而<code>Object.is</code>的行为方式与三等号相同，但是对于NaN和-0和+0进行特殊处理，所以最后两个不相同，而<code>Object.is(NaN，NaN)</code>将为 true。</p><p><img src="https://statics.sh1a.qingstor.com/2020/11/27/js_equals.png" alt="各原始类型值的相等比较对照表"></p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期。在JavaScript中，变量的作用域有<strong>全局作用域</strong>和<strong>局部作用域</strong>两种。</p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><p>在代码中任何地方都能访问到的对象拥有全局作用域。一般来说以下几种情形：</p><ul><li>最外层函数和在最外层函数外面定义的变量拥有全局作用域。</li><li>所有未定义而直接赋值的变量自动声明为拥有全局作用域。</li><li>所有window对象的属性拥有全局作用域。如：<code>window.name</code>、<code>window.location</code>等。</li></ul><blockquote><p><strong>注</strong>：全局变量存在于程序的整个生命周期。没有块级作用域。</p></blockquote><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>局部作用域一般只在固定的代码片段内可访问到，最常见的是在函数内部，所有在一些地方也会看到有人把这种作用域称为<strong>函数作用域</strong>。</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>JavaScript里一切都是对象。函数对象和其它对象一样，拥有可以通过代码访问的属性和一系列仅供JavaScript引擎访问的内部属性。其中一个内部属性是<code>Scope</code>，该内部属性包含了函数被创建的作用域中对象的集合，这个集合被称为函数的作用域链，它决定了哪些数据能被函数访问。</p><p>因为全局变量总是存在于<strong>运行时上下文</strong>作用域链的最末端。所以，在标识符解析的时候，查找全局变量是最慢的。所以，在编写代码的时候应尽量少使用全局变量，尽可能使用局部变量。一个好的经验法则是：<strong>如果一个跨作用域的对象被引用了一次以上，则先把它存储到局部变量里再使用</strong>。</p><p><code>with</code>语句主要用来临时扩展作用域链，将语句中的对象添加到作用域的头部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">person = &#123;<span class="attr">name</span>: <span class="string">&quot;yhb&quot;</span>, <span class="attr">age</span>: <span class="number">22</span>, <span class="attr">height</span>:<span class="number">175</span>, <span class="attr">wife</span>: &#123;<span class="attr">name</span>: <span class="string">&quot;lwy&quot;</span>, <span class="attr">age</span>: <span class="number">21</span>&#125;&#125;;</span><br><span class="line"><span class="title function_">with</span> (person.<span class="property">wife</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>with语句将<code>person.wife</code>添加到当前作用域链的头部，所以输出的就是：<code>lwy</code>；with语句结束后，作用域链恢复正常。</p><blockquote><p>当代码运行到with语句时，运行期上下文的作用域链临时被改变了。一个新的可变对象被创建，它包含了参数指定的对象的所有属性。这个对象将被推入作用域链的头部，这意味着函数的所有局部变量现在处于第二个作用域链对象中，因此访问代价更高了。<br><strong>注</strong>：在程序中应避免使用with语句。</p></blockquote><h2 id="闭包-Closures"><a href="#闭包-Closures" class="headerlink" title="闭包(Closures)"></a>闭包(Closures)</h2><h3 id="一个示例"><a href="#一个示例" class="headerlink" title="一个示例"></a>一个示例</h3><p>如何从外部读取局部变量？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(n); <span class="comment">// 999</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。这就是Javascript语言特有的”链式作用域”结构（<code>chain scope</code>），子对象会一级一级地向上寻找所有父对象的变量。所以，<strong>父对象的所有变量，对子对象都是可见的，反之则不成立</strong>。</p><p>既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> n=<span class="number">999</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f2</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(n); <span class="comment">// 999</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result=<span class="title function_">f1</span>();</span><br><span class="line"><span class="title function_">result</span>(); <span class="comment">// 999</span></span><br></pre></td></tr></table></figure><h3 id="闭包解释"><a href="#闭包解释" class="headerlink" title="闭包解释"></a>闭包解释</h3><blockquote><p><strong>闭包定义</strong>：闭包是一个函数和函数所声明的词法环境的结合。</p></blockquote><p>在上面的代码中，f2函数就是闭包。<strong>闭包</strong>（<code>closure</code>）定义非常抽象，很难看懂。我的理解是，<strong>闭包就是能够读取其他函数内部变量的函数</strong>。在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p><p>闭包最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中，不会在调用结束后被垃圾回收机制（<code>garbage collection</code>）回收。</p><h3 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h3><p>有时你想模拟一个模拟块级作用域，例如你想将变量从全局作用域隔离。完成这个工作的模式叫做<code>IIFE</code>(立即执行函数表达式(<code>Immediately Invoked Function Expression</code>))：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// 块开始</span></span><br><span class="line">    <span class="keyword">var</span> tmp = ...;  <span class="comment">// 非全局变量</span></span><br><span class="line">&#125;());  <span class="comment">// 块结束</span></span><br></pre></td></tr></table></figure><h3 id="用闭包模拟私有方法"><a href="#用闭包模拟私有方法" class="headerlink" title="用闭包模拟私有方法"></a>用闭包模拟私有方法</h3><p>JavaScript 并不提供原生的支持私有方法，但是可以使用闭包模拟私有方法。私有方法不仅仅有利于限制对代码的访问：还提供了管理全局命名空间的强大能力，避免非核心的方法弄乱了代码的公共接口部分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Counter</span> = (<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> privateCounter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">changeBy</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        privateCounter += val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">increment</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">changeBy</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">decrement</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">changeBy</span>(-<span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">value</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> privateCounter;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 0 */</span></span><br><span class="line"><span class="title class_">Counter</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="title class_">Counter</span>.<span class="title function_">increment</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 2 */</span></span><br><span class="line"><span class="title class_">Counter</span>.<span class="title function_">decrement</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Counter</span>.<span class="title function_">value</span>()); <span class="comment">/* logs 1 */</span></span><br></pre></td></tr></table></figure><p>上面创建了一个环境，为三个函数所共享：<code>Counter.increment</code>, <code>Counter.decrement</code>和<code>Counter.value</code>。该共享环境创建于一个匿名函数体内，该函数一经定义立刻执行。环境中包含两个私有项：名为<code>privateCounter</code>的变量和名为<code>changeBy</code>的函数。这两项都无法在匿名函数外部直接访问。必须通过匿名包装器返回的三个公共函数访问。</p><p><strong>注意</strong>：</p><ul><li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li><li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li></ul><h2 id="内存机制"><a href="#内存机制" class="headerlink" title="内存机制"></a>内存机制</h2><p>首先JavaScript中的变量分为<strong>基本类型</strong>和<strong>引用类型</strong>。</p><ul><li>基本类型就是保存在栈内存中的简单数据段。基本类型有<code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>和<code>String</code>。这些类型在内存中分别占有固定大小的空间，他们的值保存在<strong>栈空间</strong>，我们通过按值来访问的。</li><li>引用类型指的是那些保存在堆内存中的对象。引用类型，值大小不固定，栈内存中存放地址指向堆内存中的对象。是按引用访问的。栈内存中存放的只是该对象的访问地址，在堆内存中为这个值分配空间。</li></ul><h3 id="为什么会有栈内存和堆内存之分？"><a href="#为什么会有栈内存和堆内存之分？" class="headerlink" title="为什么会有栈内存和堆内存之分？"></a>为什么会有栈内存和堆内存之分？</h3><p>与垃圾回收机制有关，为了使程序运行时占用的内存最小。</p><p>当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量将会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁了。因此，所有在方法中定义的变量都是放在栈内存中的；</p><p>当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复利用（因为对象的创建成本通常较大），这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用（方法的参数传递时很常见），则这个对象依然不会被销毁，只有当一个对象没有任何引用变量引用它时，系统的垃圾回收机制才会在核实的时候回收它。</p><h3 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h3><p>Javascript具有自动垃圾回收机制(<code>GC</code>:<code>Garbage Collecation</code>)，也就是说，执行环境会负责管理代码执行过程中使用的内存。</p><p>JavaScript垃圾回收的机制很简单：<strong>找出不再使用的变量，然后释放掉其占用的内存，但是这个过程不是实时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行</strong>。</p><p>不再使用的变量也就是生命周期结束的变量，当然只可能是局部变量，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后在函数中使用这些变量，直至函数结束，而闭包中由于内部函数的原因，外部函数并不能算是结束。</p><h4 id="清除方式"><a href="#清除方式" class="headerlink" title="清除方式"></a>清除方式</h4><ul><li><strong>标记清除</strong>：垃圾回收器在运行的时候会给存储在内存中的所有变量都加上标记。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记（闭包）。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾回收器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。</li><li><strong>引用计数</strong>：引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾回收器下次再运行时，它就会释放那些引用次数为0的值所占用的内存。</li></ul><h2 id="原型-prototype"><a href="#原型-prototype" class="headerlink" title="原型(prototype)"></a>原型(prototype)</h2><p>原型是一个对象，其他对象可以通过它实现属性继承。JavaScript的对象中都包含了一个<code>Prototype</code>内部属性，这个属性所对应的就是该对象的原型。<code>Prototype</code>作为对象的内部属性，是不能被直接访问的。所以为了方便查看一个对象的原型，Firefox和Chrome中提供了<code>__proto__</code>这个非标准的访问器。</p><ul><li>所有的对象都有<code>__proto__</code>属性，该属性对应着该对象的原型。</li><li>所有的函数对象都有<code>prototype</code>属性，该属性的值会被赋值给该函数创建的对象的<code>__proto__</code>属性</li><li>所有的原型对象都有<code>constructor</code>属性，该属性对应创建所有指向该原型的实例的构造函数</li><li>函数对象和原型对象通过<code>prototype</code>和<code>constructor</code>属性进行相互关联</li><li><code>Object</code>实例对象的原型<code>obj.__proto__</code>就是<code>Object.prototype</code></li><li><code>hasOwnProperty</code>是<code>Object.prototype</code>的一个方法，该方法能判断一个对象是否包含自定义属性而不是原型链上的属性，因为”hasOwnProperty” 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数</li></ul><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>因为每个对象和原型都有原型，对象的原型指向对象的父，而父的原型又指向父的父，这种原型层层连接起来的就构成了原型链。</p><p>当通过原型链查找一个属性的时候，首先查找的是对象本身的属性，如果找不到才会继续按照原型链进行查找。这样一来，如果想要覆盖原型链上的一些属性，我们就可以直接在对象中引入这些属性，达到属性隐藏的效果。</p><h2 id="对象创建方式"><a href="#对象创建方式" class="headerlink" title="对象创建方式"></a>对象创建方式</h2><h3 id="1-Object构造函数方式"><a href="#1-Object构造函数方式" class="headerlink" title="1. Object构造函数方式"></a>1. Object构造函数方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">name</span> = <span class="string">&#x27;Nike&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">age</span> = <span class="number">29</span>;</span><br></pre></td></tr></table></figure><p>这行代码创建了<code>Object</code>引用类型的一个新实例，然后把实例保存在变量<code>Person</code>中。</p><h3 id="2-对象字面量方式"><a href="#2-对象字面量方式" class="headerlink" title="2. 对象字面量方式"></a>2. 对象字面量方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = &#123;</span><br><span class="line"> <span class="attr">name</span>: <span class="string">&#x27;Nike&#x27;</span>;</span><br><span class="line"> <span class="attr">age</span>: <span class="number">29</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对象字面量是对象定义的一种简写形式，目的在于简化创建包含大量属性对象的过程。</p><blockquote><p><strong>注</strong>：前两种方法的缺点在于：它们都是用了同一个接口创建很多对象，会产生大量的重复代码，就是如果你有100个对象，那你要输入100次很多相同的代码。那我们有什么方法来避免过多的重复代码呢，就是把创建对象的过程封装在函数体内，通过函数的调用直接生成对象。</p></blockquote><h3 id="3-工厂模式"><a href="#3-工厂模式" class="headerlink" title="3. 工厂模式"></a>3. 工厂模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    o.<span class="property">name</span> = name;</span><br><span class="line">    o.<span class="property">age</span> = age;</span><br><span class="line">    o.<span class="property">job</span> = job;</span><br><span class="line">    o.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="title function_">createPerson</span>(<span class="string">&#x27;Nike&#x27;</span>, <span class="number">29</span>, <span class="string">&#x27;teacher&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在使用工厂模式创建对象的时候，我们都可以注意到，在<code>createPerson</code>函数中，返回的是一个对象。但我们就无法判断返回的对象究竟是一个什么样的类型。于是就出现了第四种创建对象的模式。</p><h3 id="4-构造函数方式"><a href="#4-构造函数方式" class="headerlink" title="4. 构造函数方式"></a>4. 构造函数方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Nike&#x27;</span>, <span class="number">29</span>, <span class="string">&#x27;teacher&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(person1 <span class="keyword">instanceof</span> <span class="title class_">Object</span>); <span class="comment">//ture</span></span><br></pre></td></tr></table></figure><p>对比工厂模式，我们可以发现以下区别：</p><ul><li>没有显示地创建对象</li><li>直接将属性和方法赋给了<code>this</code>对象</li><li>没有<code>return</code>语句</li><li>终于可以识别的对象的类型。对于检测对象类型，我们应该使用instanceof操作符，我们来进行自主检测：</li></ul><p>那么构造函数确实挺好用的，但是它也有它的缺点：就是每个方法都要在每个实例上重新创建一遍，方法指的就是我们在对象里面定义的函数。如果方法的数量很多，就会占用很多不必要的内存。于是出现了第五种创建对象的方法。</p><h3 id="5-原型创建对象模式"><a href="#5-原型创建对象模式" class="headerlink" title="5. 原型创建对象模式"></a>5. 原型创建对象模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;Nike&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">jbo</span> = <span class="string">&#x27;teacher&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;Greg&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(person1.<span class="property">name</span>); <span class="comment">//&#x27;Greg&#x27; --来自实例</span></span><br><span class="line"><span class="title function_">alert</span>(person2.<span class="property">name</span>); <span class="comment">//&#x27;Nike&#x27; --来自原型</span></span><br></pre></td></tr></table></figure><p>当为对象实例添加一个属性时，这个属性就会屏蔽原型对象中保存的同名属性。</p><p>这时候我们就可以使用构造函数模式与原型模式结合的方式，构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。</p><h3 id="6-组合使用构造函数模式和原型模式"><a href="#6-组合使用构造函数模式和原型模式" class="headerlink" title="6. 组合使用构造函数模式和原型模式"></a>6. 组合使用构造函数模式和原型模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">constructor</span>: <span class="title class_">Person</span>,</span><br><span class="line">    <span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Nike&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;teacher&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="7-动态原型模式"><a href="#7-动态原型模式" class="headerlink" title="7. 动态原型模式"></a>7. 动态原型模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">sayName</span> != <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Nike&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;teacher&#x27;</span>);</span><br><span class="line">person1.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure><p>动态原型模式将所有信息封装在了构造函数中，而通过构造函数中初始化原型（仅第一个对象实例化时初始化原型），这个可以通过判断该方法是否有效而选择是否需要初始化原型。</p><h3 id="8-寄生构造函数方式"><a href="#8-寄生构造函数方式" class="headerlink" title="8. 寄生构造函数方式"></a>8. 寄生构造函数方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    o.<span class="property">name</span> = name;</span><br><span class="line">    o.<span class="property">age</span> = age;</span><br><span class="line">    o.<span class="property">job</span> = job;</span><br><span class="line">    o.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Nike&#x27;</span>, <span class="number">29</span>, <span class="string">&#x27;teacher&#x27;</span>);</span><br></pre></td></tr></table></figure><p>寄生模式和工厂模式几乎一样，寄生模式和工厂模式的区别：</p><ul><li>寄生模式创建对象时使用了<code>new</code>关键字</li><li>寄生模式的外部包装函数是一个构造函数</li></ul><blockquote><p><strong>作用</strong>:寄生模式可以在特殊的情况下为对象来创建构造函数,原因在于我们可以通过构造函数重写对象的值，并通过return返回。重写调用构造函数(创建的对象的实例)之后的对象实例的新的值。</p></blockquote><h3 id="9-稳妥构造函数方式"><a href="#9-稳妥构造函数方式" class="headerlink" title="9. 稳妥构造函数方式"></a>9. 稳妥构造函数方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    o.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Nike&#x27;</span>, <span class="number">29</span>, <span class="string">&#x27;teacher&#x27;</span>);</span><br><span class="line">person.<span class="title function_">sayName</span>(); <span class="comment">// 使用稳妥构造函数模式只能通过其构造函数内部的方法来获取里面的属性值</span></span><br></pre></td></tr></table></figure><p>道格拉斯·克拉克福德发明了JavaScript中的稳妥对象这个概念。所谓稳妥对象，是指没有公共属性，而且其方法也不引用<code>this</code>对象。稳妥对象最适合在一些安全环境中（这些环境会禁止使用<code>this</code>和<code>new</code>），或者在防止数据被其他应用程序改动时使用。稳妥构造函数遵循的与寄生构造函数类似的模式，但又两点不同：</p><ul><li>一是新创建对象的实例方法不引用<code>this</code>；</li><li>二是不使用<code>new</code>操作符调用构造函数。</li></ul><blockquote><p><strong>注</strong>：与寄生构造函数模式类似，使用稳妥构造函数模式创建的对象与构造函数之间没有什么关系，因此instanceof操作符对这种对象也没有意义。</p></blockquote><h2 id="并发模型和事件循环-event-loop"><a href="#并发模型和事件循环-event-loop" class="headerlink" title="并发模型和事件循环(event loop)"></a>并发模型和事件循环(event loop)</h2><p>JavaScript 的并发模型基于<strong>事件循环</strong>。</p><p><img src="https://statics.sh1a.qingstor.com/2020/11/27/js_event.png" alt="Js堆栈队列图"></p><h3 id="1-运行时概念"><a href="#1-运行时概念" class="headerlink" title="1. 运行时概念"></a>1. 运行时概念</h3><h4 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h4><p>函数调用形成了一个栈帧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">b</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">return</span> a + b + <span class="number">11</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">3</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">foo</span>(x * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bar</span>(<span class="number">7</span>));</span><br></pre></td></tr></table></figure><p>当调用 bar 时，创建了第一个帧 ，帧中包含了 bar 的参数和局部变量。当 bar 调用 foo 时，第二个帧就被创建，并被压到第一个帧之上，帧中包含了 foo 的参数和局部变量。当 foo 返回时，最上层的帧就被弹出栈（剩下 bar 函数的调用帧 ）。当 bar 返回的时候，栈就空了。</p><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>对象被分配在一个堆中，即用以表示一个大部分非结构化的内存区域。</p><h4 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h4><p>一个 JavaScript 运行时包含了一个待处理的消息队列。每一个消息都与一个函数相关联。当栈拥有足够内存时，从队列中取出一个消息进行处理。这个处理过程包含了调用与这个消息相关联的函数（以及因而创建了一个初始堆栈帧）。当栈再次为空的时候，也就意味着消息处理结束。</p><h3 id="2-事件循环"><a href="#2-事件循环" class="headerlink" title="2. 事件循环"></a>2. 事件循环</h3><p>之所以称为<strong>事件循环</strong>，是因为它经常被用于类似如下的方式来实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (queue.<span class="title function_">waitForMessage</span>()) &#123;</span><br><span class="line">  queue.<span class="title function_">processNextMessage</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前没有任何消息，queue.waitForMessage 会等待着同步将要到来的消息。</p><p>每一个消息完整的执行后，其它消息才会被执行。这个模型的一个缺点在于当一个消息的完成耗时过长，网络应用无法处理用户的交互如点击或者滚动。浏览器用“程序需要过长时间运行”的对话框来缓解这个问题。一个比较好的解决方案是使消息处理变短且如果可能的话，将一个消息拆分成几个消息。</p><p>在浏览器里，当一个事件出现且有一个事件监听器被绑定时，消息会被随时添加。如果没有事件监听器，事件会丢失。所以点击一个附带点击事件处理函数的元素会添加一个消息。其它事件亦然。</p><h3 id="3-绝不阻塞"><a href="#3-绝不阻塞" class="headerlink" title="3. 绝不阻塞"></a>3. 绝不阻塞</h3><p>事件循环(event loop)模型特性在于它<strong>永不阻塞</strong>。通常由事件或者回调函数进行 I/O (input/output)处理 。</p><hr><p>参考文档：</p><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">MDN</a></li></ul><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitLab CI/CD 介绍和使用</title>
      <link href="/2021/06/29/computer/devops/gitlab-ci-jie-shao-he-shi-yong/"/>
      <url>/2021/06/29/computer/devops/gitlab-ci-jie-shao-he-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="一、持续集成介绍"><a href="#一、持续集成介绍" class="headerlink" title="一、持续集成介绍"></a>一、持续集成介绍</h2><blockquote><p>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试)来验证，从而尽快地发现集成错误。许多团队发现这个过程可以大大减少集成的问题，让团队能够更快的开发内聚的软件。—— Martin Fowler</p></blockquote><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h3><ul><li><strong>持续集成</strong>(<code>Continuous Integration</code>)：<strong>频繁地(一天多次)将代码集成到主干。</strong>让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。“持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</li><li><strong>持续交付</strong>(<code>Continuous Delivery</code>)：<strong>频繁地将软件的新版本，交付给质量团队或者用户，以供评审。</strong>如果评审通过，代码就进入生产阶段。持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</li><li><strong>持续部署</strong>(<code>continuous Deployment</code>)：<strong>代码通过评审以后，自动部署到生产环境。</strong>是持续部署是持续交付的下一步，持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</li></ul><h3 id="2-持续集成的好处"><a href="#2-持续集成的好处" class="headerlink" title="2 持续集成的好处"></a>2 持续集成的好处</h3><ul><li><strong>自动化构建且状态对每个人可见</strong>。可以使用<code>Maven</code>、<code>Gradle</code>等来实现自动化构建，可以在构建过程中实现自动化测试（前提是有写单元测试用例）。集成服务器在持续集成过程中发现问题可以及时发送警告给相关的干系人。</li><li><strong>解放了重复性劳动。</strong>自动化部署工作可以解放集成、测试、部署等重复性劳动，而机器集成的频率明显比手工高很多。</li><li><strong>更快地发现和修复问题。</strong>持续集成更早的获取变更，更早的进入测试，更早的发现问题，解决问题的成本显著下降。</li><li><strong>更快的交付成果。</strong>更早发现错误减少解决错误所需的工作量。集成服务器在构建环节发现错误可以及时通知开发人员修复。集成服务器在部署环节发现错误可以回退到上一版本，服务器始终有一个可用的版本。</li><li><strong>减少手工的错误。</strong>在重复性动作上，人容易犯错，而机器犯错的几率几乎为零。</li><li><strong>减少了等待时间。</strong>缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间可以出现的等待时机。持续集成，意味着开发、集成、测试、部署也得以持续。</li><li><strong>更高的产品质量。</strong>集成服务器往往提供代码质量检测等功能，对不规范或有错误的地方会进行标致，也可以设置邮件和短信等进行警告。</li></ul><h3 id="3-常用持续集成工具"><a href="#3-常用持续集成工具" class="headerlink" title="3 常用持续集成工具"></a>3 常用持续集成工具</h3><ul><li><a href="https://jenkins.io/">Jenkins</a></li><li><a href="https://docs.gitlab.com/ee/ci/README.html">GitLab CI</a></li><li><a href="https://www.jetbrains.com/teamcity/">TeamCity</a></li><li><a href="https://www.travis-ci.org/">Travis CI</a></li><li><a href="https://www.atlassian.com/software/bamboo">Bamboo</a></li><li><a href="https://circleci.com/">CircleCI</a></li><li>…</li></ul><h2 id="二、Gitlab-持续集成"><a href="#二、Gitlab-持续集成" class="headerlink" title="二、Gitlab 持续集成"></a>二、Gitlab 持续集成</h2><p><img src="https://statics.sh1a.qingstor.com/2018/11/22/pipelines.png" alt="GitLab CI/CD"></p><h3 id="1-概念介绍"><a href="#1-概念介绍" class="headerlink" title="1 概念介绍"></a>1 概念介绍</h3><h4 id="1-GitLab"><a href="#1-GitLab" class="headerlink" title="(1) GitLab"></a>(1) GitLab</h4><p><a href="https://about.gitlab.com/">GitLab</a> 是一个利用<code>Ruby on Rails</code>开发的开源应用程序，实现一个自托管的 Git 项目仓库，可通过 Web 界面进行访问公开的或者私人项目。它拥有与<a href="https://github.com/">GitHub</a>类似的功能，能够浏览源代码，管理缺陷和注释。可以管理团队对仓库的访问，它非常易于浏览提交过的版本并提供一个文件历史库。</p><h4 id="2-GitLab-CI-CD"><a href="#2-GitLab-CI-CD" class="headerlink" title="(2) GitLab CI/CD"></a>(2) GitLab CI/CD</h4><p><a href="https://docs.gitlab.com/ee/ci/README.html">GitLab CI/CD</a> 是<code>GitLab Continuous Integration</code>（Gitlab持续集成）的简称。GitLab 自<code>GitLab 8.0</code>开始提供了持续集成的功能，且对所有项目默认开启。只要在项目仓库的根目录添加<code>.gitlab-ci.yml</code>文件，并且配置了Runner（运行器），那么每一次<code>push</code>或者合并请求（<code>Merge Request</code>）都会触发<a href="https://docs.gitlab.com/ce/ci/pipelines.html">CI Pipeline</a>。</p><h4 id="3-GitLab-Runner"><a href="#3-GitLab-Runner" class="headerlink" title="(3) GitLab Runner"></a>(3) GitLab Runner</h4><p><a href="https://docs.gitlab.com/runner/">GitLab Runner</a> <code>GitLab Runner</code>是一个开源项目，可以运行在 GNU / Linux，macOS 和 Windows 操作系统上。每次<code>push</code>的时候 GitLab CI 会根据<code>.gitlab-ci.yml</code>配置文件运行你流水线（<code>Pipeline</code>）中各个阶段的任务（<code>Job</code>），并将结果发送回 GitLab。GitLab Runner 是基于 Gitlab CI 的 API 进行构建的相互隔离的机器（或虚拟机）。GitLab Runner 不需要和 Gitlab 安装在同一台机器上，且考虑到 GitLab Runner 的资源消耗问题和安全问题，也不建议这两者安装在同一台机器上。</p><p>Gitlab Runner 分为三种：</p><ul><li>共享Runner(<code>Shared runners</code>)</li><li>专享Runner(<code>Specific runners</code>)</li><li>分组Runner(<code>Group Runners</code>)</li></ul><h4 id="4-Pipelines"><a href="#4-Pipelines" class="headerlink" title="(4) Pipelines"></a>(4) Pipelines</h4><p><a href="https://docs.gitlab.com/ce/ci/pipelines.html">Pipelines</a> 中文称为流水线，是分阶段执行的构建任务。如：安装依赖、运行测试、打包、部署开发服务器、部署生产服务器等流程。每一次<code>push</code>或者<code>Merge Request</code>都会触发生成一条新的Pipeline。</p><p>下面是流水线示例图：</p><p><img src="https://docs.gitlab.com/ce/ci/img/pipelines_index.png" alt="Pipeline Status"></p><h4 id="5-Stages"><a href="#5-Stages" class="headerlink" title="(5) Stages"></a>(5) Stages</h4><p><a href="https://docs.gitlab.com/ce/ci/yaml/README.html#stages">Stages</a> 表示构建阶段，可以理解为上面所说“安装依赖”、“运行测试”等环节的流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p><ul><li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始（当然可以在<code>.gitlab-ci.yml</code>文件中配置上一阶段失败时下一阶段也执行）</li><li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</li><li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</li></ul><p>下面是一个流水线内的阶段任务示例图：</p><p><img src="https://docs.gitlab.com/ce/ci/img/pipelines.png" alt="Job Status"></p><h4 id="6-Jobs"><a href="#6-Jobs" class="headerlink" title="(6) Jobs"></a>(6) Jobs</h4><p><a href="https://docs.gitlab.com/ce/ci/pipelines.html#jobs">Jobs</a> 表示构建的作业（或称之为任务），表示某个 Stage 里面执行的具体任务。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p><ul><li>相同 Stage 中的 Jobs 无执行顺序要求，会并行执行</li><li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功</li><li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 也失败（可以在<code>.gitlab-ci.yml</code>文件中配置允许某 Job 可以失败，也算该 Stage 成功）</li></ul><h4 id="7-gitlab-ci-yml"><a href="#7-gitlab-ci-yml" class="headerlink" title="(7) .gitlab-ci.yml"></a>(7) .gitlab-ci.yml</h4><p>GitLab 中默认开启了 Gitlab CI/CD 的支持，且使用<a href="http://yaml.org/">YAML</a>文件<a href="https://docs.gitlab.com/ee/ci/yaml/README.html#examples">.gitlab-ci.yml</a>来管理项目构建配置。该文件需要存放于项目仓库的根目录（默认路径，可在 GitLab 中修改），它定义该项目的 CI/CD 如何配置。所以，我们只需要在<code>.gitlab-ci.yml</code>配置文件中定义流水线的各个阶段，以及各个阶段中的若干作业（任务）即可。</p><p>下面是<code>.gitlab-ci.yml</code>文件的一个简单的<code>Hello World</code>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义 test 和 package 两个 Stages</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">package</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 package 阶段的一个 job</span></span><br><span class="line"><span class="attr">package-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">package</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Hello, package-job&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;I am in package stage&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义 test 阶段的一个 job</span></span><br><span class="line"><span class="attr">test-job:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Hello, test-job&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;I am in test stage&quot;</span></span><br></pre></td></tr></table></figure><p>以上配置中，用 stages 关键字来定义 Pipeline 中的各个构建阶段，然后用一些非关键字来定义 jobs。每个 job 中可以可以再用 stage 关键字来指定该 job 对应哪个 stage。job 里面的<code>script</code>关键字是每个 job 中必须要包含的，它表示每个 job 要执行的命令。</p><blockquote><p><strong>注</strong>：猜猜上面例子的运行结果？</p></blockquote><h4 id="8-Badges"><a href="#8-Badges" class="headerlink" title="(8) Badges"></a>(8) Badges</h4><p><a href="https://docs.gitlab.com/ce/ci/pipelines.html#badges">Badges</a> 即：<strong>徽章</strong>，当 Pipelines 执行过程中或者执行完成时会生成徽章，你可以将这些徽章加入到你的<code>README.md</code>文件中，便于从仓库主页看到最新的构建状态。</p><p>徽章的链接形如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://example.gitlab.com/namespace/project/badges/branch/build.svg </span><br></pre></td></tr></table></figure><p>我们用 GitLab 项目的徽章作为例子，效果如下：</p><p><img src="https://gitlab.com/gitlab-org/gitlab-ce/badges/master/build.svg" alt="Gitlab build badges"> <img src="https://gitlab.com/gitlab-org/gitlab-ce/badges/master/coverage.svg?job=coverage" alt="Gitlab coverage badges"></p><h3 id="2-安装-GitLab-Runner"><a href="#2-安装-GitLab-Runner" class="headerlink" title="2 安装 GitLab Runner"></a>2 安装 GitLab Runner</h3><p><a href="https://docs.gitlab.com/runner/install/index.html">这里</a>有 GitLab Runner安装相关的资源和文档可供大家参考。以下仅以咱们公司常用的<code>Centos</code>为例来做安装说明。</p><h4 id="1-在线安装"><a href="#1-在线安装" class="headerlink" title="(1) 在线安装"></a>(1) 在线安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加官方的repo.</span></span><br><span class="line">curl -L https://packages.gitlab.com/install/repositories/runner/gitlab-runner/script.rpm.sh | <span class="built_in">sudo</span> bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># yum 安装Gtilab Runner.</span></span><br><span class="line"><span class="built_in">sudo</span> yum install gitlab-runner</span><br></pre></td></tr></table></figure><h4 id="2-离线安装"><a href="#2-离线安装" class="headerlink" title="(2) 离线安装"></a>(2) 离线安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装Git</span></span><br><span class="line"><span class="built_in">sudo</span> yum –y install git</span><br><span class="line"></span><br><span class="line"><span class="comment"># rpm离线安装事先下载好的 Gitlab Runner rpm包.</span></span><br><span class="line">rpm -ivh gitlab-runner-10.5.0-1.x86_64.rpm</span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：Gitlab Runner 依赖了<code>Git</code>，所以，离线安装 Gitlab Runner 之前得首先安装Git，离线安装包可以从<a href="https://packages.gitlab.com/runner/gitlab-runner">这里</a>下载。</p></blockquote><h3 id="3-注册-Gitlab-Runner"><a href="#3-注册-Gitlab-Runner" class="headerlink" title="3 注册 Gitlab Runner"></a>3 注册 Gitlab Runner</h3><p>安装了 GitLab Runner 之后,就可以为 GitLab 中的仓库<a href="https://docs.gitlab.com/runner/register/index.html">注册一个 Runner</a>，注册的交互式命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> gitlab-runner register</span><br></pre></td></tr></table></figure><p>命令的交互式的过程如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入注册命令</span></span><br><span class="line"><span class="built_in">sudo</span> gitlab-runner register</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入公司的 GitLab 网站地址</span></span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com )</span><br><span class="line">http://gitlab.xxxx.com/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你项目仓库的token，token可以在 Settings -&gt; CI/CD -&gt; Runners settings 中找到.</span></span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner</span><br><span class="line">xxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入描述这个 runner 的名称</span></span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner</span><br><span class="line">[hostame] my-runner</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 runner 的标签</span></span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line">my-tag,another-tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入 runner 的执行器.</span></span><br><span class="line">Please enter the executor: ssh, docker+machine, docker-ssh+machine, kubernetes, docker, parallels, virtualbox, docker-ssh, shell:</span><br><span class="line">shell</span><br></pre></td></tr></table></figure><p>以上流程注册成功之后，就可以在你的项目仓库中 <code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Runners settings</code> 看到这个 Runner 了。</p><h3 id="4-Gitlab-Runner-常用命令汇总"><a href="#4-Gitlab-Runner-常用命令汇总" class="headerlink" title="4 Gitlab Runner 常用命令汇总"></a>4 Gitlab Runner 常用命令汇总</h3><p>下面的表格中列出了一些常用的<a href="https://docs.gitlab.com/runner/commands/README.html#gitlab-runner-list">Gitlab Runner命令</a>，以供参考：</p><table><thead><tr><th>命令</th><th align="left">描述</th></tr></thead><tbody><tr><td>gitlab-runner run</td><td align="left">运行一个runner服务</td></tr><tr><td>gitlab-runner register</td><td align="left">注册一个新的runner</td></tr><tr><td>gitlab-runner start</td><td align="left">启动服务</td></tr><tr><td>gitlab-runner stop</td><td align="left">关闭服务</td></tr><tr><td>gitlab-runner restart</td><td align="left">重启服务</td></tr><tr><td>gitlab-runner status</td><td align="left">查看各个runner的状态</td></tr><tr><td>gitlab-runner unregister</td><td align="left">注销掉某个runner</td></tr><tr><td>gitlab-runner list</td><td align="left">显示所有运行着的runner</td></tr><tr><td>gitlab-runner verify</td><td align="left">检查已注册的运行程序是否可以连接到GitLab，但它不验证GitLab Runner服务是否正在使用运行程序。</td></tr></tbody></table><h2 id="三、一个Web项目-CI-CD-简单示例"><a href="#三、一个Web项目-CI-CD-简单示例" class="headerlink" title="三、一个Web项目 CI/CD 简单示例"></a>三、一个Web项目 CI/CD 简单示例</h2><p>接下来，用一个实际项目来演示 GitLab CI/CD 的配置和使用，其中主要包括：编译测试、项目打包、部署服务、Sonar手动检查、Sonar定时检查五个阶段。</p><p>下面用一个传统的 Java web 项目(这里称之为<code>cidemo</code>)和<code>Tomcat</code>来作为示例，并用来展示常用配置的使用。当我每次<code>push</code>代码或者<code>Merge Request</code>时，都会生成一条流水线，且会自动执行我们上面所说的一些阶段，而Sonar手动检查我们设置为手动操作，且再额外配置Sonar定时检查的任务。</p><blockquote><p><strong>注</strong>：我 Gitlab Runner 是安装在<code>Centos</code>环境中，并使用的<code>shell</code>执行器。</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义stages</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">run</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sonar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义安装包的存放位置和Tomcat服务器的地址的变量，便于后续部署使用.</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">CIDEMO_PACKAGE_DIR:</span> <span class="string">&#x27;/home/gitlab-runner/packages/cidemo/&#x27;</span></span><br><span class="line">  <span class="attr">SERVER_HOME_DIR:</span> <span class="string">&#x27;/home/gitlab-runner/tomcat/cidemo-tomcat/&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### 构建编译和单元测试的job. #######################</span></span><br><span class="line"></span><br><span class="line"><span class="string">编译测试任务:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">branches</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">clean</span> <span class="string">test</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### Maven安装得到war包的job. #######################</span></span><br><span class="line"></span><br><span class="line"><span class="string">打包任务:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">install</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&#x27;准备将最新的war包复制、保存到某个目录里面供后续使用.&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">$CIDEMO_PACKAGE_DIR/*.war</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cp</span> <span class="string">target/*.war</span> <span class="string">$CIDEMO_PACKAGE_DIR/cidemo.war</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################### 部署运行war包的job. #######################</span></span><br><span class="line"></span><br><span class="line"><span class="string">部署运行任务:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">run</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&#x27;准备部署和运行war包！(为了方便部署到了Tomcat中运行)&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">$SERVER_HOME_DIR</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">sh</span> <span class="string">bin/shutdown.sh</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">webapps/cidemo.war</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cp</span> <span class="string">$CIDEMO_PACKAGE_DIR/cidemo.war</span> <span class="string">$SERVER_HOME_DIR/webapps/cidemo.war</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nohup</span> <span class="string">sh</span> <span class="string">./bin/startup.sh</span> <span class="string">&gt;</span> <span class="string">logs/cidemo_nohup.log</span> <span class="number">2</span><span class="string">&gt;&amp;1</span> <span class="string">&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### Sonar手动构建的job. #######################</span></span><br><span class="line"></span><br><span class="line"><span class="string">Sonar手动检查:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">sonar</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">manual</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">develop</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&#x27;准备对项目代码做sonar的质量检查！&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">compile</span> <span class="string">&amp;&amp;</span> <span class="string">mvn</span> <span class="string">sonar:sonar</span> <span class="string">-Dsonar.host.url=http://172.16.34.102:9000</span> <span class="string">-Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###################### Sonar每晚定时构建的job. #######################</span></span><br><span class="line"></span><br><span class="line"><span class="string">Sonar定时检查:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">sonar</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">schedules</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&#x27;开始定时对项目代码做sonar的质量检查！&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">compile</span> <span class="string">&amp;&amp;</span> <span class="string">mvn</span> <span class="string">sonar:sonar</span> <span class="string">-Dsonar.host.url=http://172.16.34.102:9000</span> <span class="string">-Dsonar.login=497a0e0e2fc07f64c4b54edc17bb47dfa251ba34</span></span><br></pre></td></tr></table></figure><h2 id="四、Gitlab-CI-CD-yaml-常用配置介绍"><a href="#四、Gitlab-CI-CD-yaml-常用配置介绍" class="headerlink" title="四、Gitlab CI/CD yaml 常用配置介绍"></a>四、Gitlab CI/CD yaml 常用配置介绍</h2><p>开始构建之前<code>.gitlab-ci.yml</code>文件定义了一系列带有约束说明的任务。这些任务都是以任务名开始并且至少要包含script部分，<code>.gitlab-ci.yml</code>允许指定无限量 jobs。每个 jobs 必须有一个唯一的名字，且名字不能是下面列出的保留字段：</p><ul><li><code>image</code></li><li><code>services</code></li><li><code>stages</code></li><li><code>types</code></li><li><code>before_script</code></li><li><code>after_script</code></li><li><code>variables</code></li><li><code>cache</code></li></ul><p>job由一列参数来定义 jobs 的行为：</p><table><thead><tr><th>Keyword</th><th>Required</th><th>Description</th></tr></thead><tbody><tr><td>script</td><td>yes</td><td>Runner执行的命令或脚本</td></tr><tr><td>extends</td><td>no</td><td>定义此作业将继承的配置条目</td></tr><tr><td>image</td><td>no</td><td>所使用的docker镜像，查阅<a href="https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml">使用docker镜像</a></td></tr><tr><td>services</td><td>no</td><td>所使用的docker服务，查阅<a href="https://docs.gitlab.com/ce/ci/docker/using_docker_images.html#define-image-and-services-from-gitlab-ciyml">使用docker镜像</a></td></tr><tr><td>stage</td><td>no</td><td>定义job stage（默认：<code>test</code>）</td></tr><tr><td>type</td><td>no</td><td><code>stage</code>的别名（已弃用）</td></tr><tr><td>variables</td><td>no</td><td>定义job级别的变量</td></tr><tr><td>only</td><td>no</td><td>定义一列git分支，并为其创建job</td></tr><tr><td>except</td><td>no</td><td>定义一列git分支，不创建job</td></tr><tr><td>tags</td><td>no</td><td>定义一列tags，用来指定选择哪个Runner（同时Runner也要设置tags）</td></tr><tr><td>allow_failure</td><td>no</td><td>允许job失败。失败的job不影响commit状态</td></tr><tr><td>when</td><td>no</td><td>定义何时开始job。可以是<code>on_success</code>，<code>on_failure</code>，<code>always</code>或者<code>manual</code></td></tr><tr><td>dependencies</td><td>no</td><td>定义job依赖关系，这样他们就可以互相传递artifacts</td></tr><tr><td>cache</td><td>no</td><td>定义应在后续运行之间缓存的文件列表</td></tr><tr><td>before_script</td><td>no</td><td>重写一组在作业前执行的命令</td></tr><tr><td>after_script</td><td>no</td><td>重写一组在作业后执行的命令</td></tr><tr><td>environment</td><td>no</td><td>定义此作业完成部署的环境名称</td></tr><tr><td>coverage</td><td>no</td><td>定义给定作业的代码覆盖率设置</td></tr><tr><td>etry</td><td>no</td><td>定义在发生故障时可以自动重试作业的时间和次数</td></tr><tr><td>parallel</td><td>no</td><td>定义应并行运行的作业实例数</td></tr></tbody></table><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><blockquote><p>是在 GitLab 11.3 中引入的。</p></blockquote><p><code>extends</code>定义了一个使用<code>extends</code>的作业将继承的条目名称。它是使用<a href="https://docs.gitlab.com/ee/ci/yaml/README.html#anchors">YAML锚点</a>的替代方案，并且更加灵活和可读：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">.tests:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">rake</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">branches</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rspec:</span></span><br><span class="line">  <span class="attr">extends:</span> <span class="string">.tests</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">rake</span> <span class="string">rspec</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">variables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$RSPEC</span></span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>rspec</code>作业继承自<code>.tests</code>模板作业。 GitLab 将根据键执行反向深度合并。 GitLab将：</p><ul><li>将<code>rspec</code>内容以递归方式合并到<code>.tests</code>中。</li><li>不合并键的值。</li></ul><p>这实际生成的是以下<code>rspec</code>作业：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rspec:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">rake</span> <span class="string">rspec</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="attr">refs:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">branches</span></span><br><span class="line">    <span class="attr">variables:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$RSPEC</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>: <code>rake test</code>已被<code>rake rspec</code>脚本覆盖。</p></blockquote><h3 id="image-和-services"><a href="#image-和-services" class="headerlink" title="image 和 services"></a>image 和 services</h3><p>这两个关键字允许使用一个自定义的 Docker 镜像和一系列的服务，并且可以用于整个 job 周期。详细配置文档请查看<a href="https://docs.gitlab.com/ee/ci/docker/README.html">a separate document</a>。</p><h3 id="before-script-和-after-script"><a href="#before-script-和-after-script" class="headerlink" title="before_script 和 after_script"></a>before_script 和 after_script</h3><p><code>before_script</code>用来定义所有 job 之前运行的命令，<code>after_script</code>用来定义所有 job 之后运行的命令。它们可以是一个数组或者是多行字符串。</p><h3 id="stages"><a href="#stages" class="headerlink" title="stages"></a>stages</h3><p>stages 用来定义可以被 job 调用的 stages。stages 的规范允许有灵活的多级 pipelines。</p><p>stages中的元素顺序决定了对应job的执行顺序：</p><ol><li>相同 stage 的 job 可以平行执行。</li><li>下一个 stage 的 job 会在前一个 stage 的 job 成功后开始执行。</li></ol><p>接下仔细看看这个例子，它包含了3个 stage：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure><ol><li>首先，所有 build 的 jobs 都是并行执行的。</li><li>所有 build 的 jobs 执行成功后，test 的 jobs 才会开始并行执行。</li><li>所有 test 的 jobs 执行成功，deploy 的 jobs 才会开始并行执行。</li><li>所有的 deploy 的 jobs 执行成功，<code>commit</code>才会标记为<code>success</code>。</li><li>任何一个前置的 jobs 失败了，<code>commit</code>会标记为<code>failed</code>并且下一个 stages 的 jobs 都不会执行。</li></ol><p>这有两个特殊的例子值得一提：</p><ol><li>如果<code>.gitlab-ci.yml</code>中没有定义stages，那么 job’s stages 会默认定义为<code>build</code>，<code>test</code>和<code>deploy</code>。</li><li>如果一个 job 没有指定 stage，那么这个任务会分配到 test stage。</li></ol><h3 id="only-和-except"><a href="#only-和-except" class="headerlink" title="only 和 except"></a>only 和 except</h3><p><code>only</code>和<code>except</code>是两个参数用分支策略来限制 jobs 构建：</p><ul><li><code>only</code>定义哪些分支和标签的git项目将会被job执行。</li><li><code>except</code>定义哪些分支和标签的git项目将不会被job执行。</li></ul><p>下面是refs策略的使用规则：</p><ul><li><p>only 和 except 可同时使用。如果<code>only</code>和<code>except</code>在一个 job 配置中同时存在，则以 only 为准，跳过 except(从下面示例中得出)。</p></li><li><p>only 和 except 可以使用正则表达式。</p></li><li><p>only 和 except 允许使用特殊的关键字：<code>branches</code>，<code>tags</code>和<code>triggers</code>。</p></li><li><p>only 和 except 允许使用指定仓库地址但不是forks的仓库(查看示例3)。</p><p>在下面这个例子中，job 将只会运行以<code>issue-</code>开始的refs(分支)，然而<code>except</code>中设置将被跳过。</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job:</span></span><br><span class="line">  <span class="comment"># use regexp</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/^issue-.*$/</span></span><br><span class="line">  <span class="comment"># use special keyword</span></span><br><span class="line">  <span class="attr">except:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">branches</span></span><br></pre></td></tr></table></figure><p>在下面这个例子中，job 将只会执行有<code>tags</code>的refs，或者通过<code>API</code>触发器明确地请求构建。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job:</span></span><br><span class="line">  <span class="comment"># use special keywords</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">triggers</span></span><br></pre></td></tr></table></figure><p>下面这个例子将会为所有的分支执行job，但 master 分支除外。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">branches@gitlab-org/gitlab-ce</span></span><br><span class="line">  <span class="attr">except:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master@gitlab-org/gitlab-ce</span></span><br></pre></td></tr></table></figure><h3 id="variables"><a href="#variables" class="headerlink" title="variables"></a>variables</h3><p>GItLab CI 允许在<code>.gitlab-ci.yml</code>文件中添加变量，并在 job 环境中起作用。因为这些配置是存储在 git 仓库中，所以<strong>最好是存储项目的非敏感配置</strong>，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="string">DATABASE_URL:&quot;postgres://postgres@postgres/my_database&quot;</span></span><br></pre></td></tr></table></figure><p>这些变量可以被后续的命令和脚本使用。</p><p>除了用户自定义的变量外，Runner 也可以定义它自己的变量。<code>CI_COMMIT_REG_NAME</code>就是一个很好的例子，它的值表示用于构建项目的分支或tag名称。除了在<code>.gitlab-ci.yml</code>中设置变量外，还有可以通过 GitLab 的界面上设置私有变量。</p><p>这里有更多关于<a href="https://docs.gitlab.com/ce/ci/variables/README.html">variables</a>的介绍。</p><h3 id="cache"><a href="#cache" class="headerlink" title="cache"></a>cache</h3><h4 id="cache-paths"><a href="#cache-paths" class="headerlink" title="cache: paths"></a>cache: paths</h4><p>使用<code>paths</code>指令选择要缓存的文件或目录。也可以使用通配符。</p><p>如果 cache 定义在 jobs 的作用域之外，那么它就是全局缓存，所有 jobs 都可以使用该缓存。</p><p>缓存<code>binaries</code>和<code>.config</code>中的所有文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rspec:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">binaries/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.config</span></span><br></pre></td></tr></table></figure><p>缓存<code>git</code>中没有被跟踪的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rspec:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>缓存<code>binaries</code>下没有被<code>git</code>跟踪的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rspec:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">untracked:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">binaries/</span></span><br></pre></td></tr></table></figure><p>job 中优先级高于全局的。下面这个<code>rspec</code> job中将只会缓存<code>binaries/</code>下的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">my/files</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rspec:</span></span><br><span class="line">  <span class="attr">script:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">rspec</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">binaries/</span></span><br></pre></td></tr></table></figure><p>注意，缓存是在 jobs 之前进行共享的。如果你不同的 jobs 缓存不同的文件路径，必须设置不同的<code>cache:key</code>，否则缓存内容将被重写。缓存只是尽力而为之，所以别期望缓存会一直存在。</p><h4 id="cache-key"><a href="#cache-key" class="headerlink" title="cache: key"></a>cache: key</h4><p><code>key</code>指令允许我们定义缓存的作用域(亲和性)，可以是所有 jobs 的单个缓存，也可以是每个 job，也可以是每个分支或者是任何你认为合适的地方。它也可以让你很好的调整缓存，允许你设置不同 jobs 的缓存，甚至是不同分支的缓存。</p><p><code>cache:key</code>可以使用任何的<a href="https://docs.gitlab.com/ce/ci/variables/README.html">预定义变量</a>。</p><p>默认key是默认设置的这个项目缓存，因此默认情况下，从GitLab 9.0开始，每个 pipelines 和 jobs 中可以共享一切。</p><p>配置示例</p><p>缓存每个job：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;$CI_JOB_NAME&quot;</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>缓存每个分支：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;$CI_COMMIT_REF_NAME&quot;</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>缓存每个 job 且每个分支：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;$CI_JOB_NAME/$CI_COMMIT_REF_NAME&quot;</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>缓存每个分支且每个stage：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;$CI_JOB_STAGE/$CI_COMMIT_REF_NAME&quot;</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>如果使用的Windows Batch(windows批处理)来跑脚本需要用%替代$：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">key:</span> <span class="string">&quot;%CI_JOB_STAGE%/%CI_COMMIT_REF_NAME%&quot;</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="allow-failure"><a href="#allow-failure" class="headerlink" title="allow_failure"></a>allow_failure</h3><p><code>allow_failure</code>可以用于当你想设置一个 job 失败的之后并不影响后续的CI组件的时候。失败的 jobs 不会影响到<code>commit</code>状态。</p><p>当开启了允许 job 失败，所有的 intents 和 purposes 里的 pipeline 都是成功/绿色，但是也会有一个”<code>CI build passed with warnings</code>“信息显示在<code>Merge Request</code>或<code>commit</code>或<code>job page</code>。这被允许失败的作业使用，但是如果失败表示其他地方应采取其他（手动）步骤。</p><p>下面的这个例子中，job1和job2将会并列进行，如果job1失败了，它也不会影响进行中的下一个 stage，因为这里有设置了<code>allow_failure: true</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">job1:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">execute_script_that_will_fail</span></span><br><span class="line">  <span class="attr">allow_failure:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job2:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">execute_script_that_will_succeed</span></span><br><span class="line"></span><br><span class="line"><span class="attr">job3:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">deploy_to_staging</span></span><br></pre></td></tr></table></figure><h3 id="when"><a href="#when" class="headerlink" title="when"></a>when</h3><p><code>when</code>用于实现在发生故障或尽管失败时运行的作业。when可以设置以下值：</p><ul><li><code>on_success</code> - 只有前面 stages 的所有工作成功时才执行。这是默认值。</li><li><code>on_failure</code> - 当前面 stages 中任意一个jobs失败后执行。</li><li><code>always</code> - 无论前面 stages 中 jobs 状态如何都执行。</li><li><code>manual</code> - 手动执行(GitLab8.10增加)。更多请查看手动操作。</li></ul><h3 id="artifacts"><a href="#artifacts" class="headerlink" title="artifacts"></a>artifacts</h3><p><code>artifacts</code>用于指定成功后应附加到 job 的文件和目录的列表。只能使用项目工作间内的文件或目录路径。在job成功完成后artifacts将会发送到GitLab中，同时也会在 GitLab UI 中提供下载。如果想要在不通的 job 之间传递<code>artifacts</code>，请查阅<a href="https://docs.gitlab.com/ce/ci/yaml/README.html#dependencies">依赖关系</a>。以下是一些例子：</p><p>发送<code>binaries</code>和<code>.config</code>中的所有文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">binaries/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">.config</span></span><br></pre></td></tr></table></figure><p>发送所有没有被Git跟踪的文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>发送没有被Git跟踪和<code>binaries</code>中的所有文件：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">artifacts:</span></span><br><span class="line">  <span class="attr">untracked:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">binaries/</span></span><br></pre></td></tr></table></figure><h2 id="五、其他相关内容"><a href="#五、其他相关内容" class="headerlink" title="五、其他相关内容"></a>五、其他相关内容</h2><h3 id="1-API触发器-Triggers"><a href="#1-API触发器-Triggers" class="headerlink" title="1 API触发器 Triggers"></a>1 API触发器 Triggers</h3><p>Triggers 可用于强制使用API调用重建特定分支，<code>tag</code>或<code>commits</code>。API的使用示例可以在<code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Pipeline triggers</code>中找到。</p><p>在<code>triggers</code>文档中<a href="https://docs.gitlab.com/ce/ci/triggers/README.html">查看更多</a>。</p><h3 id="2-配置定时任务"><a href="#2-配置定时任务" class="headerlink" title="2 配置定时任务"></a>2 配置定时任务</h3><p>GitLab CI 中可以在 GitLab <code>Settings</code> -&gt; <code>CI/CD</code> -&gt; <code>Schedules</code>中配置定时任务，点击<code>New Schedule</code>按钮，可以配置你流水线的定时执行任务，包括：描述信息、定时的Cron表达式、目标分支、变量等信息。</p><p>然后在需要定时执行的作业的<code>only</code>分支写上<code>schedules</code>即可。</p><h3 id="3-校验-gitlab-ci-yml"><a href="#3-校验-gitlab-ci-yml" class="headerlink" title="3 校验 .gitlab-ci.yml"></a>3 校验 .gitlab-ci.yml</h3><p>GitLab CI 的每个实例都有一个名为<code>Lint</code>的嵌入式调试工具。 你可以在 GitLab 实例的<code>-/ci/lint</code>下找到该链接。</p><h3 id="4-配置邮件发送"><a href="#4-配置邮件发送" class="headerlink" title="4 配置邮件发送"></a>4 配置邮件发送</h3><p>如果希望在每次构建完成后（或者在仅构建失败的情况下），想邮件发送给相关开发人员，则可以在 GitLab <code>Settings</code> -&gt; <code>Integrations</code> 中找到<code>Pipelines emails</code>，点击进去就可以配置邮件发送相关的内容了。</p><h3 id="5-GitLab-Pages"><a href="#5-GitLab-Pages" class="headerlink" title="5 GitLab Pages"></a>5 GitLab Pages</h3><p><a href="https://gitlab.com/pages/">GitLab Pages</a>是用于托管静态文件的服务。而<code>pages</code>是一个特殊的job，用于将静态的内容上传到GitLab，可用于为您的网站提供服务。它有特殊的语法，因此必须满足以下两个要求：</p><ul><li>任何静态内容必须放在<code>public/</code>目录下</li><li>artifacts必须定义在<code>public/</code>目录下</li></ul><p>下面的这个例子是将所有文件从项目根目录移动到<code>public/</code>目录。<code>.public</code>工作流是<code>cp</code>，并且它不会循环复制<code>public/</code>本身。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pages:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mkdir</span> <span class="string">.public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cp</span> <span class="string">-r</span> <span class="string">*</span> <span class="string">.public</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">mv</span> <span class="string">.public</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>更多内容请查看<a href="https://docs.gitlab.com/ce/user/project/pages/index.html">GitLab Pages用户文档</a>。</p><h3 id="6-跳过-jobs"><a href="#6-跳过-jobs" class="headerlink" title="6 跳过 jobs"></a>6 跳过 jobs</h3><p>如果你的<code>commit</code>信息中包含<code>[ci skip]</code>或者<code>[skip ci]</code>，不论大小写，那么这个<code>commit</code>将会创建但是 jobs 也会跳过。</p><hr><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://docs.gitlab.com/ce/ci/yaml/README.html">官方文档地址</a></li><li><a href="https://segmentfault.com/a/1190000010442764#articleHeader24">segmentfault yaml配置中文翻译</a></li></ul><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab CI </tag>
            
            <tag> DevOps </tag>
            
            <tag> Jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Bash命令整理之查看文件和目录</title>
      <link href="/2021/06/29/computer/linux/chang-yong-bash-ming-ling-zheng-li-zhi-cha-kan-wen-jian-he-mu-lu/"/>
      <url>/2021/06/29/computer/linux/chang-yong-bash-ming-ling-zheng-li-zhi-cha-kan-wen-jian-he-mu-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ls-列出文件名和目录"><a href="#1-ls-列出文件名和目录" class="headerlink" title="1. ls - 列出文件名和目录"></a>1. ls - 列出文件名和目录</h2><p><code>ls</code>命令是<code>Linux</code>中最常用的命令之一，其作用就是列出文件名和目录。在命令行提示符下，直接输入<code>ls</code>命令，不带任何选项，将列出当前目录下所有文件和目录，但不会显示详细的信息，比如，文件类型、大小、修改日期和时间、权限等。</p><p>以下便是<code>ls</code>命令及其选项的作用说明：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 仅列出当前目录下所有文件和目录</span></span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每行显示一条记录，每条记录包括文件类型、大小、修改日期和时间、权限等</span></span><br><span class="line"><span class="built_in">ls</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件大小显示符合人类阅读习惯的格式</span></span><br><span class="line"><span class="built_in">ls</span> -lh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将使用不同的特殊字符归类不同的文件类型</span></span><br><span class="line"><span class="built_in">ls</span> -F</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以长列表格式列出某个目录的信息</span></span><br><span class="line"><span class="built_in">ls</span> -ld /var/log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将递归地列出子目录的内容</span></span><br><span class="line"><span class="built_in">ls</span> -R /etc/sysconfig/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以长列表格式按文件或目录的修改时间倒序地列出文件和目录</span></span><br><span class="line"><span class="built_in">ls</span> -ltr</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以长列表格式按文件大小顺序列出文件和目录</span></span><br><span class="line"><span class="built_in">ls</span> -<span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出包括隐藏文件或目录在内的所有文件和目录，包括“.”（当前目录）和“..”（父目录）</span></span><br><span class="line"><span class="built_in">ls</span> -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出包括隐藏文件或目录在内的所有文件和目录，不包括“.”（当前目录）和“..”（父目录）</span></span><br><span class="line"><span class="built_in">ls</span> -A</span><br><span class="line"></span><br><span class="line">输出的内容类似于-l选项，指示显示uid和gid，替代显示所有者和用户组</span><br><span class="line"><span class="built_in">ls</span> -n</span><br></pre></td></tr></table></figure><h2 id="2-cat-连接显示文件内容"><a href="#2-cat-连接显示文件内容" class="headerlink" title="2. cat - 连接显示文件内容"></a>2. cat - 连接显示文件内容</h2><p><code>cat</code> 命令也是Linux系统中最常用的命令之一。<code>cat</code>命令让我们可以看看文件的内容、连接文件、创建一个或多个文件和重定向输出到终端或文件。</p><p><code>cat</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> [OPTION] [FILE]...</span><br></pre></td></tr></table></figure><p><code>cat</code>常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 cat 命令查看文件 /etc/group 的内容</span></span><br><span class="line"><span class="built_in">cat</span> /etc/group</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示多个文件的内容</span></span><br><span class="line"><span class="built_in">cat</span> /etc/redhat-release /etc/issue</span><br><span class="line"></span><br><span class="line"><span class="comment"># -n 选项，可以显示文件内容的行号</span></span><br><span class="line"><span class="built_in">cat</span> -n /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># -b 选项和 -n 选项类似，但只标识非空白行的行号</span></span><br><span class="line"><span class="built_in">cat</span> -b /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># -e 选项，将在每一行的结尾显示“$”字符</span></span><br><span class="line"><span class="built_in">cat</span> -e /etc/fstab</span><br></pre></td></tr></table></figure><blockquote><p>当你只输入 cat 命令，而没有任何参数时，它只是接收标准输入的内容并在标准输出中显示。所以你在输入一行内容并回车后，会在接下来的一行显示相同的内容。你也可以重定向标准输出到一个新文件。</p></blockquote><h2 id="3-less、more-分屏显示文件"><a href="#3-less、more-分屏显示文件" class="headerlink" title="3.less、more - 分屏显示文件"></a>3.less、more - 分屏显示文件</h2><p><code>more</code>命令在你使用小的xterm窗口时，或是想不使用文本编辑器而只是简单地阅读一个文件时是很有用的。more命令是一个用于一次翻阅一整屏文件的过滤器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看一个文件，自动清空屏幕并显示文件开头部分</span></span><br><span class="line">more /etc/inittab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定一次显示num行</span></span><br><span class="line">more -num /etc/inittab</span><br></pre></td></tr></table></figure><p>与<code>more</code>命令相比，我个人更喜欢<code>less</code>命令来查看文件。<code>less</code>命令与<code>more</code>命令类似，但<code>less</code>命令向前和向后翻页都支持，而且<code>less</code>命令不需要在查看前加载整个文件，即<code>less</code>命令查看文件更快速。</p><p><code>less</code>常用命令参数如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">-b  &lt;缓冲区大小&gt; 设置缓冲区的大小</span><br><span class="line">-e  当文件显示结束后，自动离开</span><br><span class="line">-f  强迫打开特殊文件，例如外围设备代号、目录和二进制文件</span><br><span class="line">-g  只标志最后搜索的关键词</span><br><span class="line">-i  忽略搜索时的大小写</span><br><span class="line">-m  显示类似more命令的百分比</span><br><span class="line">-N  显示每行的行号</span><br><span class="line">-o  &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</span><br><span class="line">-Q  不使用警告音</span><br><span class="line">-s  显示连续空行为一行</span><br><span class="line">-S  行过长时间将超出部分舍弃</span><br><span class="line">-x  &lt;数字&gt; 将“tab”键显示为规定的数字空格</span><br><span class="line">/字符串：向下搜索“字符串”的功能</span><br><span class="line">?字符串：向上搜索“字符串”的功能</span><br><span class="line">n： 重复前一个搜索（与 / 或 ? 有关）</span><br><span class="line">N： 反向重复前一个搜索（与 / 或 ? 有关）</span><br><span class="line">b  向后翻一页</span><br><span class="line">d  向后翻半页</span><br><span class="line">h  显示帮助界面</span><br><span class="line">Q  退出less 命令</span><br><span class="line">u  向前滚动半页</span><br><span class="line">y  向前滚动一行</span><br><span class="line">空格键 滚动一行</span><br><span class="line">回车键 滚动一页</span><br><span class="line">[pagedown]： 向下翻动一页</span><br><span class="line">[pageup]：   向上翻动一页</span><br></pre></td></tr></table></figure><h2 id="4-head-显示文件头部"><a href="#4-head-显示文件头部" class="headerlink" title="4.head - 显示文件头部"></a>4.head - 显示文件头部</h2><p><code>head</code>命令用于打印指定输入的开头部分内容。默认情况下，打印每个指定输入的前10行内容。</p><p>使用<code>-n</code>选项可以指定打印文件的前N行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定打印文件的前5行</span></span><br><span class="line"><span class="built_in">head</span> -n 5 /etc/inittab</span><br><span class="line">（或）<span class="built_in">head</span> -5 /etc/inittab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印文件的前N个字节的数据</span></span><br><span class="line"><span class="built_in">head</span> -c 10 /etc/inittab</span><br></pre></td></tr></table></figure><h2 id="5-tail-显示文件尾部"><a href="#5-tail-显示文件尾部" class="headerlink" title="5.tail - 显示文件尾部"></a>5.tail - 显示文件尾部</h2><p><code>tail</code>命令和<code>head</code>命令相反，它打印指定输入的结尾部分的内容。默认情况下，它打印指定输入的最后10行内容。</p><p>使用<code>-n</code>选项可以指定打印文件的最后N行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定打印文件的后10行</span></span><br><span class="line"><span class="built_in">tail</span> -n 10 /etc/inittab</span><br><span class="line"><span class="built_in">tail</span> -10 /etc/inittab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 即时打印文件中新写入的行</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/messages</span><br><span class="line"></span><br><span class="line"><span class="comment"># --retry选项表示持续尝试打开某个文件，当你想打开一个稍后才会创建或即使不可用的文件</span></span><br><span class="line"><span class="built_in">tail</span> -f /tmp/debug.log --retry</span><br></pre></td></tr></table></figure><h2 id="6-file-查看文件类型"><a href="#6-file-查看文件类型" class="headerlink" title="6.file - 查看文件类型"></a>6.file - 查看文件类型</h2><p><code>file</code>命令用于接收一个文件作为参数并执行某些测试，已确定正确的文件类型。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看文件类型</span></span><br><span class="line">file /etc/inittab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以MIME类型的格式显示文件类型的信息</span></span><br><span class="line">file -i  /etc/inittab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用-N 选项，输出的队列可以以在文件名之后无空白填充的形式显示</span></span><br><span class="line">file -N *</span><br></pre></td></tr></table></figure><h2 id="7-wc-查看文件统计信息"><a href="#7-wc-查看文件统计信息" class="headerlink" title="7.wc - 查看文件统计信息"></a>7.wc - 查看文件统计信息</h2><p><code>wc</code>命令用于查看文件的行数、单词数和字符数等信息。语法类似如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wc</span> filename</span><br><span class="line">X Y Z /etc/inittab</span><br></pre></td></tr></table></figure><p>其中X表示行数，Y表示单词数，Z表示字节数，filename表示文件名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -l选项，可以只统计文件的行数信息</span></span><br><span class="line"><span class="built_in">wc</span> -l /etc/inittab</span><br><span class="line"></span><br><span class="line"><span class="comment"># -w选项，可以只统计文件的单词数信息</span></span><br><span class="line"><span class="built_in">wc</span> -w /etc/inittab</span><br><span class="line"></span><br><span class="line"><span class="comment"># -c选项，可以只统计文件的字节数信息</span></span><br><span class="line"><span class="built_in">wc</span> -c /etc/inittab</span><br><span class="line"></span><br><span class="line"><span class="comment"># -L选项，可以只统计文件中最长的行的长度</span></span><br><span class="line"><span class="built_in">wc</span> -L /etc/inittab</span><br></pre></td></tr></table></figure><h2 id="8-find-查找文件或目录"><a href="#8-find-查找文件或目录" class="headerlink" title="8.find - 查找文件或目录"></a>8.find - 查找文件或目录</h2><p><code>find</code>命令用于根据你指定的参数搜索和定位文件和目录的列表。<code>find</code>命令可以在多种情况下使用，比如你可以通过权限、用户、用户组、文件类型、日期、大小和其他可能的条件来查找文件。</p><p><code>find</code>命令常用使用和说明如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找指定目录下的某个文件</span></span><br><span class="line">find /etc/ -name inittab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前目录下查找名称为 inittab 的文件</span></span><br><span class="line">find . -name inittab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前目录下，文件不区分大小写是example的所有文件</span></span><br><span class="line">find . -iname example</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出当前目录下所有以 sh 结尾的文件</span></span><br><span class="line">find . -<span class="built_in">type</span> f -name <span class="string">&quot;*.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出当前目录下，文件权限是 777 的所有文件</span></span><br><span class="line">find . -<span class="built_in">type</span> f -perm 777</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出当前目录下，文件权限不是 777 的所有文件</span></span><br><span class="line">find . -<span class="built_in">type</span> f ! -perm 777</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出当前目录下所有只读文件</span></span><br><span class="line">find . -<span class="built_in">type</span> f ! -perm /a+w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出你帐号主目录下的所有可执行文件</span></span><br><span class="line">find ~ -<span class="built_in">type</span> f -perm /a+w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出 /tmp 目录下的.log文件并将其删除：</span></span><br><span class="line">find /tmp/ -<span class="built_in">type</span> f -name <span class="string">&quot;*.log&quot;</span> -<span class="built_in">exec</span> <span class="built_in">rm</span> -f &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出当前目录下的所有空文件</span></span><br><span class="line">find . -<span class="built_in">type</span> f -empty</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出当前目录下的所有空目录</span></span><br><span class="line">find . -<span class="built_in">type</span> d -empty</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出 /tmp 目录下的所有隐藏文件</span></span><br><span class="line">find /tmp/ -<span class="built_in">type</span> f -name <span class="string">&quot;.*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出 /tmp 目录下，所有者是 root 的文件和目录</span></span><br><span class="line">find /tmp/ -user root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出 /tmp 目录下，用户组是 developer 的文件和目录</span></span><br><span class="line">find /tmp/ -group root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出你账号的主目录下，3 天前修改的文件</span></span><br><span class="line">find ~ -<span class="built_in">type</span> f -mtime 3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出你账号的主目录下，30 天以前修改的所有文件</span></span><br><span class="line">find ~ -<span class="built_in">type</span> f -mtime +30</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出你账号的主目录下，3 天以内修改的所有文件</span></span><br><span class="line">find ~ -<span class="built_in">type</span> f -mtime -3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出你账号的主目录下，30 天以前，60 天以内修改的所有文件</span></span><br><span class="line">find ~ -<span class="built_in">type</span> f -mtime +30 -mtime -60</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出 /etc 目录下，一小时以内变更过的文件</span></span><br><span class="line">find /etc -<span class="built_in">type</span> f -cmin -60</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出 /etc 目录下，一小时以内访问过的文件</span></span><br><span class="line">find /etc -<span class="built_in">type</span> f -amin -60</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出你账号主目录下，大小是50MB的所有文件</span></span><br><span class="line">find ~ -<span class="built_in">type</span> f -size 50MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出你账号主目录下，大于50MB小于100MB的所有文件</span></span><br><span class="line">find ~ -<span class="built_in">type</span> f -size +50MB -size -100MB</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出你账号主目录下，大于100MB的文件并将其删除</span></span><br><span class="line">find ~ -<span class="built_in">type</span> f -size +100MB -<span class="built_in">exec</span> <span class="built_in">rm</span> -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Bash命令整理之文本处理</title>
      <link href="/2021/06/29/computer/linux/chang-yong-bash-ming-ling-zheng-li-zhi-wen-ben-chu-li/"/>
      <url>/2021/06/29/computer/linux/chang-yong-bash-ming-ling-zheng-li-zhi-wen-ben-chu-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-sort-文本排序"><a href="#1-sort-文本排序" class="headerlink" title="1. sort - 文本排序"></a>1. sort - 文本排序</h2><p><code>sort</code>命令用于将文本文件的行排序。默认情况下，<code>sort</code>命令是按照字符串的字母顺序排序。</p><p>sort 的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将文本内容按字母顺序排序</span></span><br><span class="line"><span class="built_in">sort</span> example.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -u 选项，移除所有重复行后排序</span></span><br><span class="line"><span class="built_in">sort</span> -u example.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -n 选项，将令数字按数值的大小排序</span></span><br><span class="line"><span class="built_in">sort</span> -n example.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -r 选项，以倒序方式排序</span></span><br><span class="line"><span class="built_in">sort</span> -n -r example.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时将 file1、file2 的内容排序</span></span><br><span class="line"><span class="built_in">sort</span> file1 file2</span><br></pre></td></tr></table></figure><h2 id="2-uniq-文本去重"><a href="#2-uniq-文本去重" class="headerlink" title="2.uniq - 文本去重"></a>2.uniq - 文本去重</h2><p><code>uniq</code>命令用于移除或发现文件中重复的条目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 它将移除文件中重复的行并显示单一行</span></span><br><span class="line"><span class="built_in">uniq</span> example.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以统计重复行出现的次数</span></span><br><span class="line"><span class="built_in">uniq</span> -c example.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -d 选项，只显示文件中有重复的行并只显示一次</span></span><br><span class="line"><span class="built_in">uniq</span> -d example.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -D 选项，显示文件中所有重复的行</span></span><br><span class="line"><span class="built_in">uniq</span> -D example.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -u 选项，只显示文件中不重复的行</span></span><br><span class="line"><span class="built_in">uniq</span> -u example.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -w 选项，限制 uniq 命令只比较每行的前 3 个字符是否重复</span></span><br><span class="line"><span class="built_in">uniq</span> -w 3 example.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -s 选项，避免 uniq 命令比较每行的前 3 个字符，只比较后面的字符是否重复</span></span><br><span class="line"><span class="built_in">uniq</span> -s 3 example.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -f 选项，避免 uniq 命令比较第一列的内容，只比较后面的字符是否重复</span></span><br><span class="line"><span class="built_in">uniq</span> -f 1 example.txt</span><br></pre></td></tr></table></figure><h2 id="3-tr-替换或删除字符"><a href="#3-tr-替换或删除字符" class="headerlink" title="3.tr - 替换或删除字符"></a>3.tr - 替换或删除字符</h2><p><code>tr</code>命令主要用于删除文件中控制字符或进行字符转换。使用<code>tr</code>时要转换两个字符串：字符串 1 用于查询，字符串 2 用于处理各种转换。<code>tr</code>刚执行时，字符串 1 中的字符被映射到字符串 2 中的字符，然后转换操作开始。</p><p><code>tr</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tr</span> [OPTION]... SET1 [SET2]</span><br></pre></td></tr></table></figure><p>常用命令示例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若要将大括号转换为小括号</span></span><br><span class="line"><span class="built_in">tr</span> <span class="string">&#x27;&#123;&#125;&#x27;</span> <span class="string">&#x27;()&#x27;</span> &lt; textfile &gt; newfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若要将大括号转换成方括号</span></span><br><span class="line"><span class="built_in">tr</span> <span class="string">&#x27;&#123;&#125;&#x27;</span> <span class="string">&#x27;\[]&#x27;</span> &lt; textfile &gt; newfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若要将小写字符转换成大写，请输入：</span></span><br><span class="line"><span class="built_in">tr</span> <span class="string">&#x27;a-z&#x27;</span> <span class="string">&#x27;A-Z&#x27;</span> &lt; textfile &gt; newfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若要创建一个文件中的单词列表</span></span><br><span class="line"><span class="built_in">tr</span> -cs <span class="string">&#x27;[:lower:][:upper:]&#x27;</span> <span class="string">&#x27;[\n*]&#x27;</span> &lt; textfile &gt; newfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若要从某个文件中删除所有空字符</span></span><br><span class="line"><span class="built_in">tr</span> -d <span class="string">&#x27;\0&#x27;</span> &lt; textfile &gt; newfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若要用单独的换行替换每一序列的一个或多个换行，请输入：</span></span><br><span class="line"><span class="built_in">tr</span> -s <span class="string">&#x27;\n&#x27;</span> &lt; textfile &gt; newfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要以单个“#”字符替换 &lt;space&gt; 字符类中的每个字符序列</span></span><br><span class="line"><span class="built_in">tr</span> -s <span class="string">&#x27;[:space:]&#x27;</span> <span class="string">&#x27;[#*]&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="4-grep-查找字符串"><a href="#4-grep-查找字符串" class="headerlink" title="4.grep - 查找字符串"></a>4.grep - 查找字符串</h2><p><code>grep</code>命令用于搜索文本或指定的文件中与指定的字符串或模式相匹配的行。默认情况下，<code>grep</code>命令只显示匹配的行。</p><p><code>grep</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep [OPTION]... PATTERN [FILE]...</span><br><span class="line">grep [OPTION]... [-e PATTERN | -f FILE] [FILE]...</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `grep`命令查找文件/etc/passwd 中帐号 blinkfox 的信息</span></span><br><span class="line">grep blinkfox /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -i 选项，强制 grep 命令忽略搜索关键字的大小写</span></span><br><span class="line">grep -i blinkfox /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -r 选项，可以递归搜索指定目录下的所有文件</span></span><br><span class="line">grep -r blinkfox /etc/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -w 选项，只匹配包含指定单词的行</span></span><br><span class="line">grep -w blinkfox /etc/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -c 选项，报告文件或文本中模式被匹配的次数</span></span><br><span class="line">grep -c blinkfox /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -n 选项，显示每一个匹配的行的行号</span></span><br><span class="line">grep -n blinkfox /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -v 选项，可以输出除匹配指定模式的行以外的其他所有行</span></span><br><span class="line">grep -v blinkfox /etc/passwd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 --color 选项，在输出中将匹配的字符串以彩色的形式标出</span></span><br><span class="line">grep --color blinkfox /etc/passwd</span><br></pre></td></tr></table></figure><h2 id="5-diff-比较两个文件"><a href="#5-diff-比较两个文件" class="headerlink" title="5.diff - 比较两个文件"></a>5.diff - 比较两个文件</h2><p><code>diff</code>命令用于比较两个文件，并找出它们之间的不同。<code>diff</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff [OPTION]... from-file to-file</span><br></pre></td></tr></table></figure><p>常用使用方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 比较两个文件</span></span><br><span class="line">diff nsswitch.conf nsswitch.conf.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -w 选项，比较时忽略空格</span></span><br><span class="line">diff -w nsswitch.conf nsswitch.conf.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -y 选项，以并排的格式输出两个文件的比较结果</span></span><br><span class="line">diff -y nsswitch.conf nsswitch.conf.org</span><br><span class="line"></span><br><span class="line">使用 -c 选项，以上下对比的格式输出两个文件的比较结果</span><br><span class="line">diff -c nsswitch.conf nsswitch.conf.org</span><br></pre></td></tr></table></figure><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Bash命令整理之操作文件和目录</title>
      <link href="/2021/06/29/computer/linux/chang-yong-bash-ming-ling-zheng-li-zhi-cao-zuo-wen-jian-he-mu-lu/"/>
      <url>/2021/06/29/computer/linux/chang-yong-bash-ming-ling-zheng-li-zhi-cao-zuo-wen-jian-he-mu-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="1-touch-创建文件"><a href="#1-touch-创建文件" class="headerlink" title="1. touch - 创建文件"></a>1. touch - 创建文件</h2><p><code>touch</code>命令就可用于创建、变更和修改文件的时间戳。它是 Linux 操作系统的标准程序。<code>touch</code>命令又如下选项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-a: 只改变访问时间 </span><br><span class="line">-c: 不创建任何文件</span><br><span class="line">-m: 只改变修改时间</span><br><span class="line">-r: 使用指定文件的时间替代当前时间</span><br><span class="line">-t: 使用 [[CC]YY]MMDDhhmm[.ss] 替代当前时间</span><br></pre></td></tr></table></figure><p>touch 命令的常见用法如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个名为 effyl 的新空文件</span></span><br><span class="line"><span class="built_in">touch</span> effyl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同时创建名称分别为 effyl myeffyl lueffyl 的三个文件</span></span><br><span class="line"><span class="built_in">touch</span> effyl myeffyl lueffyl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -a 选项，可以改变或更新文件的最新访问时间，如果文件 effyl 不存在，则新创建一个</span></span><br><span class="line"><span class="built_in">touch</span> -a effyl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -c 选项，可以避免创建一个新文件，并用当前时间更新文件的时间戳</span></span><br><span class="line"><span class="built_in">touch</span> -c effyl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -m 选项，可以只改变文件的修改时间，而访问时间不变</span></span><br><span class="line"><span class="built_in">touch</span> -m effyl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -c 和 -t 选项，来明确设置文件的时间</span></span><br><span class="line"><span class="built_in">touch</span> -c -t YYMMDDHHMM filename</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想使用文件 myeffyl 的时间戳更新文件 effyl 的时间戳，可以使用 -r 选项</span></span><br><span class="line"><span class="built_in">touch</span> -r myeffyl effyl</span><br></pre></td></tr></table></figure><h2 id="2-mkdir-创建目录"><a href="#2-mkdir-创建目录" class="headerlink" title="2.mkdir - 创建目录"></a>2.mkdir - 创建目录</h2><p><code>mkdir</code>命令用于创建一个新目录。最基本的<code>mkdir</code>命令的使用方法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录下创建一个给定的目录名</span></span><br><span class="line"><span class="built_in">mkdir</span> &lt;<span class="built_in">dirname</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 backup 中的相对路径创建一个名为 old 的目录</span></span><br><span class="line"><span class="built_in">mkdir</span> backup/old</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 backup 中的绝对路径中创建一个名为 old 的目录</span></span><br><span class="line"><span class="built_in">mkdir</span> /home/blinkfox/backup/old</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -p 选项，会自动创建所有还不存在的父目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p backup/old</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -m 选项，可以设置将要创建目录的权限</span></span><br><span class="line"><span class="comment"># 如：创建一个任何人都有读写访问权限的目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p -m 777 backup/old</span><br></pre></td></tr></table></figure><h2 id="3-cp-复制文件或目录"><a href="#3-cp-复制文件或目录" class="headerlink" title="3.cp - 复制文件或目录"></a>3.cp - 复制文件或目录</h2><p><code>cp</code>命令用于将文件从一个地方复制到另一个地方。原来的文件保持不变，新文件可能保持原名或用一个不同的名字。</p><p>使用 cp 命令复制文件和目录的语法有以下几种：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 复制源文件到目标文件</span></span><br><span class="line"><span class="built_in">cp</span> [OPTION] SOURCE DEST</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制一个或多个源文件到一个目录</span></span><br><span class="line"><span class="built_in">cp</span> [OPTION] SOURCE... DIRECTORY</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同上</span></span><br><span class="line"><span class="built_in">cp</span> [OPTION] -t DIRECTORY SOURCE... </span><br></pre></td></tr></table></figure><p>常用使用示例如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录下，创建一个文件 file.txt 的副本，取名为 newfile.txt</span></span><br><span class="line"><span class="built_in">cp</span> file.txt newfile.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制当前目录下的 file.txt 文件到 /tmp 目录下</span></span><br><span class="line"><span class="built_in">cp</span> file.txt /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制当前目录下的所有文件到 /tmp 目录下</span></span><br><span class="line"><span class="built_in">cp</span> * /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -p 选项，可以使复制一个文件到新文件时，保留源文件的所有者、权限等信息</span></span><br><span class="line"><span class="built_in">cp</span> -p filename /path/to/new/location/myfile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -R 或 -r 选项，恶意递归地复制一个目录</span></span><br><span class="line"><span class="comment"># 即将一个目录及其下的所有文件和子目录都复制到另一个目录</span></span><br><span class="line"><span class="built_in">cp</span> -R * /home/blinkfox/backup</span><br></pre></td></tr></table></figure><h2 id="4-ln-链接文件或目录"><a href="#4-ln-链接文件或目录" class="headerlink" title="4.ln - 链接文件或目录"></a>4.ln - 链接文件或目录</h2><p><code>ln</code>命令用于创建软链接或硬链接。使用 -s 选项，可以创建一个软链接：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在目录 lib 下创建一个软链接 library.so，链接到 /home/blinkfox/src/library.so</span></span><br><span class="line"><span class="built_in">ln</span> -s /home/blinkfox/src/library.so /home/blinkfox/lib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录的软链接</span></span><br><span class="line"><span class="built_in">ln</span> -s /home/blinkfox/src <span class="built_in">source</span></span><br></pre></td></tr></table></figure><h2 id="5-mv-移动文件或目录"><a href="#5-mv-移动文件或目录" class="headerlink" title="5. mv - 移动文件或目录"></a>5. mv - 移动文件或目录</h2><p><code>mv</code>命令用于将文件和目录从一个位置移到另外一个位置。除了移动文件，<code>mv</code>命令还可用于修改文件或目录的名字。</p><p>mv 命令的基本语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mv</span> SOURCE... DIRECTORY</span><br></pre></td></tr></table></figure><p>常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将当前目录下的文件 source.txt 移到目录 /tmp 下</span></span><br><span class="line"><span class="built_in">mv</span> source.txt /tmp</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将目录 dir1、dir2 移到目录 dir_dist 下</span></span><br><span class="line"><span class="built_in">mv</span> dir1 dir2 dir_dist</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录下的 old.txt 文件更名为 new.txt</span></span><br><span class="line"><span class="built_in">mv</span> old.txt new.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -i 选项，在重写覆盖目标文件或目录之前给出提示信息</span></span><br><span class="line"><span class="built_in">mv</span> -i old.txt new.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录下的所有文件移动到目录 /tmp 下</span></span><br><span class="line"><span class="built_in">mv</span> * /tmp/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -i 选项，从 dir1 中移动那些在目标目录中不存在的文件到目标目录</span></span><br><span class="line"><span class="built_in">mv</span> -u dir1/* dir2/</span><br></pre></td></tr></table></figure><h2 id="6-rm-删除文件或目录"><a href="#6-rm-删除文件或目录" class="headerlink" title="6.rm - 删除文件或目录"></a>6.rm - 删除文件或目录</h2><p><code>rm</code>命令用于删除指定的文件和目录。其语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> [OPTIONS]... FILE...</span><br></pre></td></tr></table></figure><p><code>rm</code>的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除当前目录下的文件 file1.txt、file2.txt、file3.txt</span></span><br><span class="line"><span class="built_in">rm</span> file1.txt file2.txt file3.txt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前目录下的所有文件</span></span><br><span class="line"><span class="built_in">rm</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除你当前帐号主目录下的 temp 目录中的所有文件</span></span><br><span class="line"><span class="built_in">rm</span> ~/temp/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -i 选项，可以在删除每个文件或目录前提示用户确认</span></span><br><span class="line"><span class="built_in">rm</span> -i *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前目录下所有以&quot;.doc&quot;结尾的文件</span></span><br><span class="line"><span class="built_in">rm</span> *.doc</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前目录下所有文件名中包含&quot;movie&quot;字符串的文件</span></span><br><span class="line"><span class="built_in">rm</span> *movie*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前目录下所有以&quot;a&quot;开头的文件</span></span><br><span class="line"><span class="built_in">rm</span> a*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前目录下整个文件名（包括扩展名）只有 3 个字符的所有文件</span></span><br><span class="line"><span class="built_in">rm</span> ???</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前目录下文件扩展名有两个字符的所有文件</span></span><br><span class="line"><span class="built_in">rm</span> *.??</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前目录下文件名中含有字母 a 或 b 或 c 的所有文件</span></span><br><span class="line"><span class="built_in">rm</span> *[abc]*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前目录下文件名中包含 0~9 的所有文件</span></span><br><span class="line"><span class="built_in">rm</span> *[0-9]*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除当前目录下文件扩展名是字母 c 或 h 的所有文件</span></span><br><span class="line"><span class="built_in">rm</span> *.[ch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除 /tmp 目录下的所有文件及其子目录</span></span><br><span class="line"><span class="built_in">rm</span> -rf /tmp/*</span><br></pre></td></tr></table></figure><blockquote><p>-f 删除前不提示用户确认，并忽略不存在的文件</p></blockquote><blockquote><p>-r 递归地删除目录及其下的内容</p></blockquote><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用Bash命令整理之其他常用命令</title>
      <link href="/2021/06/29/computer/linux/chang-yong-bash-ming-ling-zheng-li-zhi-qi-ta-chang-yong-ming-ling/"/>
      <url>/2021/06/29/computer/linux/chang-yong-bash-ming-ling-zheng-li-zhi-qi-ta-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="1-hostname-查看主机名"><a href="#1-hostname-查看主机名" class="headerlink" title="1. hostname - 查看主机名"></a>1. hostname - 查看主机名</h2><p><code>hostname</code>命令用于查看系统的主机名，或是修改系统的主机名。</p><p><code>hostname</code>的常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示系统的当前主机名</span></span><br><span class="line">hostname</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改你系统的主机名</span></span><br><span class="line">hostname blinkfox-system</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -F 选项，从指定的文件中读取主机名</span></span><br><span class="line">hostname -F /root/hostname.txt</span><br></pre></td></tr></table></figure><h2 id="2-uptime-查看系统运行时间"><a href="#2-uptime-查看系统运行时间" class="headerlink" title="2. uptime - 查看系统运行时间"></a>2. uptime - 查看系统运行时间</h2><p><code>uptime</code>命令用于打印系统的运行时间等信息。使用如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uptime</span></span><br></pre></td></tr></table></figure><h2 id="3-w、who-列出登录的用户"><a href="#3-w、who-列出登录的用户" class="headerlink" title="3. w、who - 列出登录的用户"></a>3. w、who - 列出登录的用户</h2><p><code>w</code>命令用于显示登录用户及他们当前运行的进程。输入的内容格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">w</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印如下</span></span><br><span class="line">22:42  up 18 days, 1 hr, 2 <span class="built_in">users</span>, load averages: 1.23 1.79 1.75</span><br><span class="line">USER     TTY      FROM              LOGIN@  IDLE WHAT</span><br><span class="line">blinkfox console  -                日19   6days -</span><br><span class="line">blinkfox s000     -                五23       - w</span><br></pre></td></tr></table></figure><p><code>who</code>命令有与<code>w</code>命令类似的用途，但它的功能比<code>w</code>命令更强大一些。语法格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">who</span> [OPTION]... [FILE | ARG1 ARG2]</span><br></pre></td></tr></table></figure><p><code>who</code>常用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前登录的所有用户信息</span></span><br><span class="line"><span class="built_in">who</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示系统的启动时间</span></span><br><span class="line"><span class="built_in">who</span> -b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示系统登录进程</span></span><br><span class="line"><span class="built_in">who</span> -l</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示与当前标准输入关联的用户信息</span></span><br><span class="line"><span class="built_in">who</span> -m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示系统的运行级别</span></span><br><span class="line"><span class="built_in">who</span> -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有登录用户的用户名和登录用户数</span></span><br><span class="line"><span class="built_in">who</span> -q</span><br></pre></td></tr></table></figure><h2 id="4-uname-查看系统信息"><a href="#4-uname-查看系统信息" class="headerlink" title="4. uname - 查看系统信息"></a>4. uname - 查看系统信息</h2><p><code>uname</code>命令用于打印内核名称和版本、主机名等系统信息。命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> [OPTION]...</span><br></pre></td></tr></table></figure><p>常用使用方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只打印内核的名称</span></span><br><span class="line"><span class="built_in">uname</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -n 选项，只打印系统的主机名</span></span><br><span class="line"><span class="built_in">uname</span> -n</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -r 选项，打印内核版本信息</span></span><br><span class="line"><span class="built_in">uname</span> -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -m 选项，打印系统的硬件名称</span></span><br><span class="line"><span class="built_in">uname</span> -m</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -p 选项，打印系统的处理器类型信息</span></span><br><span class="line"><span class="built_in">uname</span> -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -i 选项，打印系统的硬件平台信息</span></span><br><span class="line"><span class="built_in">uname</span> -i</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -a 选项，打印上述所有示例中的信息</span></span><br><span class="line"><span class="built_in">uname</span> -a</span><br></pre></td></tr></table></figure><h2 id="5-date-显示和设置系统日期和时间"><a href="#5-date-显示和设置系统日期和时间" class="headerlink" title="5. date - 显示和设置系统日期和时间"></a>5. date - 显示和设置系统日期和时间</h2><p><code>date</code>命令用于以多种格式显示日期和时间，或设置系统的日期和时间。<code>date</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">date</span> [OPTION]... [+FORMAT]</span><br><span class="line"><span class="built_in">date</span> [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</span><br></pre></td></tr></table></figure><p>常用使用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以默认格式显示系统的当前日期时间</span></span><br><span class="line"><span class="built_in">date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化当前日期</span></span><br><span class="line"><span class="built_in">date</span> +<span class="string">&quot;%Y-%m-%d&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化输出昨天的日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;1 day ago&quot;</span> +<span class="string">&quot;%Y-%m-%d&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2秒后格式化输出</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;2 second&quot;</span> +<span class="string">&quot;%Y-%m-%d %H:%M.%S&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 普通格式化转出</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;2009-12-12&quot;</span> +<span class="string">&quot;%Y/%m/%d %H:%M.%S&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># apache格式转换</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;Dec 5, 2009 12:00:37 AM&quot;</span> +<span class="string">&quot;%Y-%m-%d %H:%M.%S&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日期加减操作</span></span><br><span class="line"><span class="built_in">date</span> +%Y%m%d <span class="comment">#显示前天年月日</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;+1 day&quot;</span> +%Y%m%d <span class="comment">#显示前一天的日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;-1 day&quot;</span> +%Y%m%d <span class="comment">#显示后一天的日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;-1 month&quot;</span> +%Y%m%d <span class="comment">#显示上一月的日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;+1 month&quot;</span> +%Y%m%d <span class="comment">#显示下一月的日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;-1 year&quot;</span> +%Y%m%d <span class="comment">#显示前一年的日期</span></span><br><span class="line"><span class="built_in">date</span> -d <span class="string">&quot;+1 year&quot;</span> +%Y%m%d <span class="comment">#显示下一年的日期</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定时间</span></span><br><span class="line"><span class="built_in">date</span> -s <span class="comment"># 设置当前时间，只有root权限才能设置，其他只能查看</span></span><br><span class="line"><span class="built_in">date</span> -s 20160816 <span class="comment"># 设置成20160816，这样会把具体时间设置成空00:00:00</span></span><br><span class="line"><span class="built_in">date</span> -s 01:01:01 <span class="comment"># 设置具体时间，不会对日期做更改</span></span><br><span class="line"><span class="built_in">date</span> -s <span class="string">&quot;01:01:01 2012-05-23&quot;</span> <span class="comment"># 这样可以设置全部时间 </span></span><br><span class="line"><span class="built_in">date</span> -s <span class="string">&quot;01:01:01 20120523&quot;</span> <span class="comment"># 这样可以设置全部时间</span></span><br><span class="line"><span class="built_in">date</span> -s <span class="string">&quot;2012-05-23 01:01:01&quot;</span> <span class="comment"># 这样可以设置全部时间 </span></span><br><span class="line"><span class="built_in">date</span> -s <span class="string">&quot;20120523 01:01:01&quot;</span> <span class="comment"># 这样可以设置全部时间</span></span><br></pre></td></tr></table></figure><h2 id="6-id-显示用户属性"><a href="#6-id-显示用户属性" class="headerlink" title="6. id - 显示用户属性"></a>6. id - 显示用户属性</h2><p><code>id</code>命令用于打印输出用户<code>uid</code>、<code>gid</code>、用户名和组名等用户身份信息。<code>id</code>命令的语法如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">id</span> [OPTION]... [USERNAME]</span><br></pre></td></tr></table></figure><p>常见使用命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出当前用户的uid、用户名、gid、组名及用户属于的群组信息</span></span><br><span class="line"><span class="built_in">id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -u 选项，输出用户的 uid</span></span><br><span class="line"><span class="built_in">id</span> -u</span><br><span class="line"></span><br><span class="line"><span class="comment">#-u 选项和 -n 选项结合使用，输出账户的用户名</span></span><br><span class="line"><span class="built_in">id</span> -un</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -g 选项，输出帐号当前起作用的gid</span></span><br><span class="line"><span class="built_in">id</span> -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># -g 与 -n 选项结合使用，输出帐号当前起作用的用户组名</span></span><br><span class="line"><span class="built_in">id</span> -gn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 -G 选项，输出帐号所属的所有群组id</span></span><br><span class="line"><span class="built_in">id</span> -G root</span><br><span class="line"></span><br><span class="line"><span class="comment"># -G 与 -n 选项结合使用，输出账号所属的所有群组的名称</span></span><br><span class="line"><span class="built_in">id</span> -Gn root</span><br></pre></td></tr></table></figure><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git知识点整理</title>
      <link href="/2021/06/29/computer/git/git-zhi-shi-dian-zheng-li/"/>
      <url>/2021/06/29/computer/git/git-zhi-shi-dian-zheng-li/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Git基本概念。"><a href="#1-Git基本概念。" class="headerlink" title="1. Git基本概念。"></a>1. Git基本概念。</h2><ul><li><code>repository</code></li><li><code>config</code></li><li><code>init</code></li><li><code>clone</code></li><li><code>fetch</code></li><li><code>pull</code></li><li><code>commit</code></li><li><code>push</code></li><li><code>branch</code></li><li><code>head</code></li><li><code>tag</code></li><li><code>merge</code></li><li><code>conflict</code></li><li><code>diff</code></li><li><code>log</code></li><li><code>show</code></li><li><code>status</code></li></ul><h2 id="2-Git工作空间和文件状态"><a href="#2-Git工作空间和文件状态" class="headerlink" title="2. Git工作空间和文件状态"></a>2. Git工作空间和文件状态</h2><h3 id="1-工作空间"><a href="#1-工作空间" class="headerlink" title="(1).工作空间"></a>(1).工作空间</h3><p><img src="http://blog.chinaunix.net/attachment/201402/19/10415985_139279770639pM.jpg" alt="Git工作空间"></p><p>左侧为工作区，右侧为版本库。</p><ul><li>工作区（<code>Working Directory</code>） 就是在电脑里能看到的目录，比如learngit文件夹就是一个工作区。</li><li>版本库（<code>Repository</code>）工作区有一个隐藏目录<code>.git</code>，是Git的版本库。</li></ul><p>在版本库中标记为<code>index</code>的区域为暂存区，标记为<code>master</code>的是Git为我们自动创建的第一个分支，代表的是目录树。此时<code>HEAD</code>实际是指向<code>master</code>分支的一个“游标”，所以图示的命令中出现HEAD的地方可以用<code>master</code>来替换。图中的objects标识的区域为git的对象库，实际位于<code>.git/objects</code>目录下。</p><ul><li>当对工作区修改（或新增）的文件执行<code>git add</code>命令时，暂存区的目录树会被更新，同时工作区修改（或新增）的文件内容会被写入到对象库中的一个新的对象中，而该对象的id被记录在暂存区的文件索引中。</li><li>当执行提交操作<code>git commit</code>时，暂存区的目录树会写到版本库（对象库）中，master分支会做相应的更新，即master最新指向的目录树就是提交时原暂存区的目录树。</li><li>当执行<code>git reset HEAD</code>命令时，暂存区的目录树会被重写，会被master分支指向的目录树所替换，但是工作区不受影响。</li><li>当执行<code>git rm --cached</code>命令时，会直接从暂存区删除文件，工作区则不做出改变。</li><li>当执行<code>git checkout .</code>或<code>git checkout --</code> 命令时，会用暂存区全部的文件或指定的文件替换工作区的文件。这个操作很危险，会清楚工作区中未添加到暂存区的改动。</li><li>当执行<code>git checkout HEAD .</code>或<code>git checkout HEAD</code>命令时，会用HEAD指向的master分支中的全部或部分文件替换暂存区和工作区中的文件。这个命令也是极度危险的。因为不但会清楚工作区中未提交的改动，也会清楚暂存区中未提交的改动。</li></ul><h3 id="1-文件状态"><a href="#1-文件状态" class="headerlink" title="(1).文件状态"></a>(1).文件状态</h3><p>Git 有三种状态，你的文件可能处于其中之一：<strong>已提交(<code>committed</code>)**、</strong>已修改(<code>modified</code>)<strong>和</strong>已暂存(<code>staged</code>)**。</p><h2 id="3-Git配置系统级、全局、当前仓库用户名、邮箱的命令"><a href="#3-Git配置系统级、全局、当前仓库用户名、邮箱的命令" class="headerlink" title="3. Git配置系统级、全局、当前仓库用户名、邮箱的命令"></a>3. Git配置系统级、全局、当前仓库用户名、邮箱的命令</h2><p>系统级、全局、当前仓库选项分别是:仓库-system、-global、-local(或默认不填)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;Jerry Mouse&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;jerry@yiibai.com&quot;</span></span><br></pre></td></tr></table></figure><p>列出Git设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git config --list</span><br><span class="line">git config -l</span><br></pre></td></tr></table></figure><h2 id="4-Git-fetch和pull的区别"><a href="#4-Git-fetch和pull的区别" class="headerlink" title="4. Git fetch和pull的区别"></a>4. Git fetch和pull的区别</h2><ul><li><code>git fetch</code>：相当于是从远程获取最新版本到本地，不会自动merge.</li><li><code>git pull</code>：相当于是从远程获取最新版本并merge到本地.</li></ul><h3 id="1-git-fetch示例："><a href="#1-git-fetch示例：" class="headerlink" title="(1). git fetch示例："></a>(1). git fetch示例：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Git fetch origin master</span><br><span class="line">git <span class="built_in">log</span> -p master..origin/master</span><br><span class="line">git merge origin/master</span><br></pre></td></tr></table></figure><p>以上命令的含义：</p><ul><li>首先从远程的<code>origin</code>的<code>master</code>主分支下载最新的版本到<code>origin/master</code>分支上</li><li>然后比较本地的<code>master</code>分支和<code>origin/master</code>分支的差别</li><li>最后进行合并</li><li>上述过程其实可以用以下更清晰的方式来进行：</li></ul><h3 id="1-git-pull示例："><a href="#1-git-pull示例：" class="headerlink" title="(1). git pull示例："></a>(1). git pull示例：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>上述命令其实相当于<code>git fetch</code>和<code>git merge</code>。在实际使用中，<code>git fetch</code>更安全一些，因为在merge前，我们可以查看更新情况，然后再决定是否合并。</p><h2 id="5-Git-reset和revert的却别"><a href="#5-Git-reset和revert的却别" class="headerlink" title="5. Git reset和revert的却别"></a>5. Git reset和revert的却别</h2><ul><li><code>git revert</code>是用一次新的commit来回滚之前的commit，<code>git reset</code>是直接删除指定的commit。 </li><li>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为<code>git revert</code>是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，但是<code>git reset</code>是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入。</li><li><code>git reset</code>是把HEAD向后移动了一下，而<code>git revert</code>是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</li><li>git revert与git reset最大的不同是，git revert 仅仅是撤销某次提交。</li></ul><p>另外，说一下<code>git revert</code>， <code>git reset –hard</code>和 <code>–soft</code>的区别</p><ul><li><code>git reset –mixed id</code>: 是将git的HEAD变了（也就是提交记录变了），但文件并没有改变，（也就是working tree并没有改变）。</li><li><code>git reset –soft id</code>: 实际上，是<code>git reset –mixed id</code>后，又做了一次<code>git add</code>。</li><li><code>git reset –herd id</code>: 是将git的HEAD变了，文件也变了。</li></ul><h2 id="6-Git-merge和reabse的相同点和不同点"><a href="#6-Git-merge和reabse的相同点和不同点" class="headerlink" title="6. Git merge和reabse的相同点和不同点"></a>6. Git merge和reabse的相同点和不同点</h2><p><code>merge</code>是合并的意思，<code>rebase</code>是复位基底的意思，相同点都是用来合并分支的。</p><p><img src="http://images2015.cnblogs.com/blog/759200/201608/759200-20160806092734215-279978821.png" alt="merge和rebase"></p><p>不同点:</p><ul><li><code>merge</code>操作会生成一个新的节点，之前的提交分开显示。而<code>rebase</code>操作不会生成新的节点，是将两个分支融合成一个线性的提交。</li><li>解决冲突时。merge操作遇到冲突的时候，当前merge不能继续进行下去。手动修改冲突内容后，add 修改，commit就可以了。而<code>rebase</code>操作的话，会中断rebase,同时会提示去解决冲突。解决冲突后,将修改add后执行<code>git rebase –continue</code>继续操作，或者<code>git rebase –skip</code>忽略冲突。</li><li><code>git pull</code>和<code>git pull --rebase</code>区别：<code>git pull</code>做了两个操作分别是”获取”和”合并”。所以加了rebase就是以rebase的方式进行合并分支，默认为merge。</li></ul><p><strong>总结</strong>：选择 merge 还是 rebase？</p><ul><li>merge 是一个合并操作，会将两个分支的修改合并在一起，默认操作的情况下会提交合并中修改的内容</li><li>merge 的提交历史忠实地记录了实际发生过什么，关注点在真实的提交历史上面</li><li>rebase 并没有进行合并操作，只是提取了当前分支的修改，将其复制在了目标分支的最新提交后面</li><li>rebase 的提交历史反映了项目过程中发生了什么，关注点在开发过程上面</li><li>merge 与 rebase 都是非常强大的分支整合命令，没有优劣之分，使用哪一个应由项目和团队的开发需求决定</li><li>merge 和 rebase 还有很多强大的选项，可以使用 git help <command> 查看</li></ul><h2 id="7-Git-stash是什么？它的相关使用方式命令"><a href="#7-Git-stash是什么？它的相关使用方式命令" class="headerlink" title="7. Git stash是什么？它的相关使用方式命令"></a>7. Git stash是什么？它的相关使用方式命令</h2><ul><li>git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</li><li>git stash pop: 从Git栈中读取最近一次保存的内容，恢复工作区的相关内容。由于可能存在多个Stash的内容，所以用栈来管理，pop会从最近的一个stash中读取内容并恢复。</li><li>git stash pop –index stash@{0}: 恢复编号为0的进度的工作区和暂存区。</li><li>git stash apply stash@{1} 以将你指定版本号为stash@{1}的工作取出来</li><li>git stash drop[<stash>] 删除某一个进度，默认删除最新进度</li><li>git stash list: 显示Git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</li><li>git stash clear: 清空Git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复工作进度</span></span><br><span class="line">git stash pop [--index] [&lt;stash&gt;]</span><br><span class="line">--index 参数：不仅恢复工作区，还恢复暂存区</span><br><span class="line">&lt;stash&gt; 指定恢复某一个具体进度。如果没有这个参数，默认恢复最新进度</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是git stash保存进度的完整命令形式</span></span><br><span class="line">git stash [save message] [-k|--no-keep-index] [--patch]</span><br><span class="line">-k和--no-keep-index指定保存进度后，是否重置暂存区</span><br><span class="line">--patch 会显示工作区和HEAD的差异,通过编辑差异文件，排除不需要保存的内容。和git add -p命令类似</span><br><span class="line"></span><br><span class="line">使用save可以对进度添加备注</span><br><span class="line"><span class="comment"># git stash save &quot;这是保存的进度&quot;</span></span><br></pre></td></tr></table></figure><h2 id="8-Git只从暂存区删除，从工作空间删除的命令分别是什么"><a href="#8-Git只从暂存区删除，从工作空间删除的命令分别是什么" class="headerlink" title="8. Git只从暂存区删除，从工作空间删除的命令分别是什么?"></a>8. Git只从暂存区删除，从工作空间删除的命令分别是什么?</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">rm</span> --cached</span><br><span class="line"></span><br><span class="line">git <span class="built_in">rm</span></span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><h2 id="9-Git标签的使用"><a href="#9-Git标签的使用" class="headerlink" title="9. Git标签的使用"></a>9. Git标签的使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出现有的标签</span></span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打标签</span></span><br><span class="line">git tag -a v1.01 -m <span class="string">&quot;Relase version 1.01&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看相应标签的版本信息</span></span><br><span class="line">git show v1.4</span><br></pre></td></tr></table></figure><ul><li>-a 选项,创建一个含附注类型的标签</li><li>-m 选项,指定了对应的标签说明</li></ul><h2 id="9-Git分支的使用"><a href="#9-Git分支的使用" class="headerlink" title="9. Git分支的使用"></a>9. Git分支的使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看远程分支</span></span><br><span class="line">git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建本地分支(注意新分支创建后不会自动切换为当前分支)</span></span><br><span class="line">git branch [name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line">git checkout [name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新分支并立即切换到新分支</span></span><br><span class="line">git checkout -b [name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除一个分支</span></span><br><span class="line">git branch -D [name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并分支(将名称为[name]的分支与当前分支合并)</span></span><br><span class="line">git merge [name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看各个分支最后提交信息</span></span><br><span class="line">git br -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已经被合并到当前分支的分支</span></span><br><span class="line">git br --merged</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看尚未被合并到当前分支的分支</span></span><br><span class="line">git br --no-merged</span><br></pre></td></tr></table></figure><h2 id="10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。"><a href="#10-介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。" class="headerlink" title="10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。"></a>10. 介绍Git冲突处理经验，以及merge和rebase中的ours和theirs的差别。</h2><p>merge和rebase对于ours和theirs的定义是完全相反的。在merge时，ours指代的是当前分支，theirs代表需要被合并的分支。而在rebase过程中，ours指向了修改参考分支，theirs却是当前分支。因为rebase 隐含了一个<code>git checkout upstream</code>的过程，将<code>HEAD</code>从local分支变成了upstream分支。git会在rebase结束后撤销这个改变，但它已经不可避免地影响了冲突的状态，使rebase中ours和theirs的定义与merge 截然相反。因此，在使用ours与theirs时请格外小心。</p><h2 id="11-Git远程操作相关"><a href="#11-Git远程操作相关" class="headerlink" title="11. Git远程操作相关"></a>11. Git远程操作相关</h2><h3 id="1-clone"><a href="#1-clone" class="headerlink" title="(1). clone"></a>(1). clone</h3><blockquote><p>git clone &lt;版本库的网址&gt;<br>git clone &lt;版本库的网址&gt; &lt;本地目录名&gt;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 克隆jQuery的版本库</span></span><br><span class="line"> git <span class="built_in">clone</span> https://github.com/jquery/jquery.git</span><br><span class="line"> </span><br><span class="line"> git <span class="built_in">clone</span> -o jQuery https://github.com/jquery/jquery.git</span><br></pre></td></tr></table></figure><h3 id="2-remote"><a href="#2-remote" class="headerlink" title="(2). remote"></a>(2). remote</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有远程主机</span></span><br><span class="line">git remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用-v选项，可以参看远程主机的网址</span></span><br><span class="line">git remote -v</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 可以查看该主机的详细信息</span></span><br><span class="line">git remote show &lt;主机名&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 添加远程主机</span></span><br><span class="line">git remote add &lt;主机名&gt; &lt;网址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程主机</span></span><br><span class="line">git remote <span class="built_in">rm</span> &lt;主机名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程主机名称</span></span><br><span class="line">git remote rename &lt;原主机名&gt; &lt;新主机名&gt;</span><br></pre></td></tr></table></figure><h3 id="3-fetch"><a href="#3-fetch" class="headerlink" title="(3). fetch"></a>(3). fetch</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取回所有分支(branch)的更新到本地</span></span><br><span class="line">git fetch &lt;远程主机名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回某的特定分支的更新</span></span><br><span class="line">git fetch &lt;远程主机名&gt; &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回origin主机的master分支的更新</span></span><br><span class="line">git fetch origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所取回的更新，在本地主机上要用”远程主机名/分支名”的形式读取。比如origin主机的master，就要用origin/master读取。可以使用git merge命令或者git rebase命令，在本地分支上合并远程分支</span></span><br><span class="line">git merge origin/master</span><br><span class="line">git rebase origin/master</span><br></pre></td></tr></table></figure><h3 id="4-pull"><a href="#4-pull" class="headerlink" title="(4). pull"></a>(4). pull</h3><blockquote><p>git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取回origin主机的next分支，与本地的master分支合并</span></span><br><span class="line">git pull origin next:master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span></span><br><span class="line">git pull origin next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面的命令实质上等同于先做git fetch，再做git merge。</span></span><br><span class="line">git fetch origin</span><br><span class="line">git merge origin/next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并需要采用rebase模式</span></span><br><span class="line">git pull --rebase &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br></pre></td></tr></table></figure><h3 id="5-push"><a href="#5-push" class="headerlink" title="(5). push"></a>(5). push</h3><blockquote><p>git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</p></blockquote><p><strong>注意</strong>:分支推送顺序的写法是”&lt;来源地&gt;:&lt;目的地&gt;”，所以git pull是”&lt;远程分支&gt;:&lt;本地分支&gt;”，而git push是”&lt;本地分支&gt;:&lt;远程分支&gt;”。</p><ul><li>如果省略远程分支名，则表示将本地分支推送与之存在”追踪关系”的远程分支(通常两者同名)，如果该远程分支不存在，则会被新建。</li><li>如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地的master分支推送到origin主机的master分支。如果后者不存在，则会被新建</span></span><br><span class="line">git push origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 省略了本地分支，以下等同，删除origin主机的master分支</span></span><br><span class="line">git push origin :master</span><br><span class="line">git push origin --delete master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果当前分支与远程分支之间存在追踪关系，则本地分支和远程分支都可以省略</span></span><br><span class="line">git push origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果当前分支只有一个追踪分支，那么主机名都可以省略。</span></span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果当前分支与多个主机存在追踪关系，则可以使用-u选项指定一个默认主机，这样后面就可以不加任何参数使用git push</span></span><br><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机</span></span><br><span class="line">git push --all origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制推送</span></span><br><span class="line">git push --force origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># git push不会推送标签(tag)，除非使用–tags选项</span></span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><h2 id="12-Git-Flow使用简介"><a href="#12-Git-Flow使用简介" class="headerlink" title="12. Git Flow使用简介"></a>12. Git Flow使用简介</h2><p>就像代码需要代码规范一样，代码管理同样需要一个清晰的流程和规范。三种广泛使用的工作流程：</p><ul><li>Git flow</li><li>Github flow</li><li>Gitlab flow</li></ul><p>三种工作流程，有一个共同点：都采用”功能驱动式开发”（Feature-driven development，简称FDD）。它指的是，需求是开发的起点，先有需求再有功能分支（feature branch）或者补丁分支（hotfix branch）。完成开发后，该分支就合并到主分支，然后被删除。最早诞生、并得到广泛采用的一种工作流程，就是<a href="http://nvie.com/posts/a-successful-git-branching-model/">Git flow</a>。</p><p>它最主要的特点有两个。首先，项目存在两个长期分支，分别是：主分支master、开发分支develop。其次，项目存在三种短期分支，分别是：功能分支（feature branch）、补丁分支（hotfix branch）、预发分支（release branch），一旦完成开发，它们就会被合并进develop或master，然后被删除。</p><h3 id="1-Git-Flow流程图"><a href="#1-Git-Flow流程图" class="headerlink" title="(1). Git Flow流程图"></a>(1). Git Flow流程图</h3><p><img src="https://statics.sh1a.qingstor.com/2018/09/24/imagegit-flow.png" alt="Git Flow流程图"></p><h3 id="2-Git-Flow常用的分支"><a href="#2-Git-Flow常用的分支" class="headerlink" title="(2). Git Flow常用的分支"></a>(2). Git Flow常用的分支</h3><ul><li><code>Production</code>分支。也就是我们经常使用的Master分支，这个分支最近发布到生产环境的代码，最近发布的Release， 这个分支只能从其他分支合并，不能在这个分支直接修改。</li><li><code>Develop</code>分支。这个分支是我们是我们的主开发分支，包含所有要发布到下一个Release的代码，这个主要合并与其他分支，比如Feature分支。</li><li><code>Feature</code>分支。这个分支主要是用来开发一个新的功能，一旦开发完成，我们合并回Develop分支进入下一个Release。</li><li><code>Release</code>分支。当你需要一个发布一个新Release的时候，我们基于Develop分支创建一个Release分支，完成Release后，我们合并到Master和Develop分支。</li><li><code>Hotfix</code>分支。当我们在Production发现新的Bug时候，我们需要创建一个Hotfix, 完成Hotfix后，我们合并回Master和Develop分支，所以Hotfix的改动会进入下一个Release。</li></ul><h3 id="3-Git-Flow代码示例"><a href="#3-Git-Flow代码示例" class="headerlink" title="(3). Git Flow代码示例"></a>(3). Git Flow代码示例</h3><h4 id="a-创建develop分支"><a href="#a-创建develop分支" class="headerlink" title="a. 创建develop分支"></a>a. 创建develop分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch develop</span><br><span class="line">git push -u origin develop</span><br></pre></td></tr></table></figure><h4 id="b-开始新Feature开发"><a href="#b-开始新Feature开发" class="headerlink" title="b. 开始新Feature开发"></a>b. 开始新Feature开发</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b some-feature develop</span><br><span class="line"><span class="comment"># Optionally, push branch to origin:</span></span><br><span class="line">git push -u origin some-feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 做一些改动</span></span><br><span class="line">git status</span><br><span class="line">git add some-file</span><br><span class="line">git commit</span><br></pre></td></tr></table></figure><h4 id="c-完成Feature"><a href="#c-完成Feature" class="headerlink" title="c. 完成Feature"></a>c. 完成Feature</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git pull origin develop</span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff some-feature</span><br><span class="line">git push origin develop</span><br><span class="line"></span><br><span class="line">git branch -d some-feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you pushed branch to origin:</span></span><br><span class="line">git push origin --delete some-feature</span><br></pre></td></tr></table></figure><h4 id="d-开始Relase"><a href="#d-开始Relase" class="headerlink" title="d. 开始Relase"></a>d. 开始Relase</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b release-0.1.0 develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional: Bump version number, commit</span></span><br><span class="line"><span class="comment"># Prepare release, commit</span></span><br></pre></td></tr></table></figure><h4 id="e-完成Release"><a href="#e-完成Release" class="headerlink" title="e. 完成Release"></a>e. 完成Release</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --no-ff release-0.1.0</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff release-0.1.0</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">git branch -d release-0.1.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you pushed branch to origin:</span></span><br><span class="line">git push origin --delete release-0.1.0   </span><br><span class="line"></span><br><span class="line">git tag -a v0.1.0 master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><h4 id="f-开始Hotfix"><a href="#f-开始Hotfix" class="headerlink" title="f. 开始Hotfix"></a>f. 开始Hotfix</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hotfix-0.1.1 master</span><br></pre></td></tr></table></figure><h4 id="g-完成Hotfix"><a href="#g-完成Hotfix" class="headerlink" title="g. 完成Hotfix"></a>g. 完成Hotfix</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge --no-ff hotfix-0.1.1</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">git checkout develop</span><br><span class="line">git merge --no-ff hotfix-0.1.1</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">git branch -d hotfix-0.1.1</span><br><span class="line"></span><br><span class="line">git tag -a v0.1.1 master</span><br><span class="line">git push --tags</span><br></pre></td></tr></table></figure><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>UML各类关系介绍</title>
      <link href="/2021/06/29/computer/common/uml-ge-lei-guan-xi-jie-shao/"/>
      <url>/2021/06/29/computer/common/uml-ge-lei-guan-xi-jie-shao/</url>
      
        <content type="html"><![CDATA[<h2 id="继承关系（generalization）"><a href="#继承关系（generalization）" class="headerlink" title="继承关系（generalization）"></a>继承关系（generalization）</h2><p><strong>继承</strong>关系用一条带<strong>空心箭头的直线</strong>表示。如下图所示（A继承自B）：</p><p><img src="https://statics.sh1a.qingstor.com/2018/10/22/uml-demo-1.png" alt="A继承自B"></p><p><strong>继承</strong>指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。<strong>继承关系为<code>is-a</code>的关系</strong>，是类与类或者接口与接口之间最常见的关系之一，在Java中此类关系通过关键字<code>extends</code>来表示。</p><blockquote><p><strong>注意</strong>：表现在代码中，继承关系表现为<strong>一个类继承另一个类或者一个接口继承另一个接口</strong>。</p></blockquote><h2 id="实现关系（realization）"><a href="#实现关系（realization）" class="headerlink" title="实现关系（realization）"></a>实现关系（realization）</h2><p><strong>实现</strong>关系是用一条带<strong>空心箭头的虚线</strong>表示。如下图所示（A实现B）：：</p><p><img src="https://statics.sh1a.qingstor.com/2018/10/22/uml-demo-2.png" alt="A实现B"></p><p><strong>实现</strong>指的是一个<code>class</code>类实现<code>interface</code>接口（可以是多个）的功能。实现是类与接口之间最常见的关系之一，在Java中此类关系通过关键字<code>implements</code>来表示。</p><blockquote><p><strong>注意</strong>：表现在代码中，实现关系表现为<strong>普通类实现某个接口</strong>。</p></blockquote><h2 id="关联关系（association）"><a href="#关联关系（association）" class="headerlink" title="关联关系（association）"></a>关联关系（association）</h2><p><strong>关联</strong>关系是用一条<strong>可能会有方向的直线</strong>表示的。关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如上图，表示A关联B，但B不关联A；如下图所示：</p><p><img src="https://statics.sh1a.qingstor.com/2018/10/22/uml-demo-3.png" alt="A关联B"></p><p><strong>关联</strong>关系体现的是两个类、或者类与接口之间语义级别的一种强依赖的结构关系，是一种长期的静态稳定的关系，通常与运行状态无关，一般由常识等因素决定的。</p><p>例如：乘车人和车票之间就是一种关联关系。</p><blockquote><p><strong>注意</strong>：表现在代码中，<strong>被关联类以类属性的形式出现在关联类中，也可能是关联类引用了一个类型为被关联类的全局变量</strong>。</p></blockquote><h2 id="聚合关系（aggregation）"><a href="#聚合关系（aggregation）" class="headerlink" title="聚合关系（aggregation）"></a>聚合关系（aggregation）</h2><p><strong>聚合</strong>关系用一条带<strong>空心菱形箭头的直线</strong>表示，如下图所示A聚合到B，或者说B由A组成。</p><p><img src="https://statics.sh1a.qingstor.com/2018/10/22/uml-demo-4.png" alt="A聚合到B"></p><p><strong>聚合</strong>关系用于表示实体对象之间的关系，表示整体由部分构成的意思。<strong>聚合是关联关系的一种特例，它体现的是整体与部分、拥有的关系，即<code>has-a</code>的关系</strong>，此时整体与部分之间是<strong>可分离</strong>的，他们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。例如一个部门由多个员工组成。</p><blockquote><p><strong>注意</strong>：表现在代码中，和关联关系是一致的，只能从语义级别来区分。聚合与组合不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如，部门撤销了，人员不会消失，他们依然存在。</p></blockquote><h2 id="组合关系（composition）"><a href="#组合关系（composition）" class="headerlink" title="组合关系（composition）"></a>组合关系（composition）</h2><p><strong>组合</strong>关系用一条带<strong>实心菱形箭头的直线</strong>表示，如下图表示A组成B，或者B由A组成。</p><p><img src="https://statics.sh1a.qingstor.com/2018/10/22/uml-demo-5.png" alt="A组合到B"></p><p><strong>组合</strong>关系同样表示整体由部分组成的意思。与聚合关系一样，<strong>组合也是关联关系的一种特例，它体现的是一种整体与部分不可分割的关系，即<code>contains-a</code>的关系，这种关系比聚合更强，也称为强聚合</strong>。例如公司由多个部门组成组合，但此时整体与部分是<strong>不可分离</strong>的，整体的生命周期结束也就意味着部分的生命周期结束。</p><blockquote><p><strong>注意</strong>：表现在代码中，和关联关系是一致的，只能从语义级别来区分。组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也就不存在了。例如，公司不存在了，部门也将不存在了。</p></blockquote><h2 id="依赖关系（dependency）"><a href="#依赖关系（dependency）" class="headerlink" title="依赖关系（dependency）"></a>依赖关系（dependency）</h2><p><strong>依赖</strong>关系是用一套<strong>带箭头的虚线</strong>表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系。</p><p><img src="https://statics.sh1a.qingstor.com/2018/10/22/uml-demo-6.png" alt="A依赖于B"></p><p><strong>依赖</strong>关系是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A，与关联关系不同的是，它是一种<strong>临时性</strong>的关系，通常在运行期间产生，并且随着运行时的变化依赖关系也可能发生变化。</p><p>显然，依赖也有方向，双向依赖是一种非常糟糕的结构，我们总是应该保持单向依赖，杜绝双向依赖的产生。</p><blockquote><p><strong>注意</strong>：表现在代码中，依赖关系体现为<strong>类的构造方法及类方法的传入参数</strong>。</p></blockquote><h2 id="UML类关系图示例"><a href="#UML类关系图示例" class="headerlink" title="UML类关系图示例"></a>UML类关系图示例</h2><p>请看以下这个UML类关系图：</p><p><img src="https://statics.sh1a.qingstor.com/2018/10/22/uml-demo-0.png" alt="UML示例"></p><ul><li>开车的类图结构表示的是一个接口</li><li>有一个自行车的抽象类，实现了开车的接口，它们之间的关系为实现关系，使用带空心三角箭头的虚线表示</li><li>自行车与摩拜单车之间是继承关系，使用带空心三角箭头的实线表示</li><li>学生上学需要用到摩拜单车，与摩拜单车是一种依赖关系，使用带箭头的虚线表示</li><li>学生与身份证之间为关联关系，使用一根实线表示，如果两个类之间互相通过属性引用，则是双向关联关系</li><li>学生与班级、学生与学校之间是聚合关系，使用带空心菱形箭头的实线表示</li><li>学校与班级是组合关系，使用带实心菱形箭头的实线表示</li></ul><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件程序设计原则</title>
      <link href="/2021/06/29/computer/common/ruan-jian-cheng-xu-she-ji-yuan-ze/"/>
      <url>/2021/06/29/computer/common/ruan-jian-cheng-xu-she-ji-yuan-ze/</url>
      
        <content type="html"><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>软件也像人一样，具有生命力，从出生到死亡，会经历多种变化。软件架构设计也不是一蹴而就的，是不断地演进发展。每个程序员都可以从理解编程原则和模式中受益。</p><p>软件设计原则是一组帮助我们避开不良设计的指导方针。根据<code>Robert Martin</code>的理论，应该避免不良设计的以下三个重要特点：</p><ul><li><strong>僵化</strong>：很难做改动，因为每一个细微的改动都会影响到系统大量的其他功能</li><li><strong>脆弱</strong>：每当你做一次改动，总会引起系统中预期之外的部分出现故障</li><li><strong>死板</strong>：代码很难在其他应用中重用，因其不能从当前应用中单独抽离出来</li></ul><p>下面这些软件设计原则是我从一些书籍和网络中收集而来，并不完整，而且你也需要在一些有“冲突的原则”之间进行权衡和取舍。本文或许会对你的编程、程序设计、讨论或评审工作有所帮助。</p><h2 id="二、通用设计原则"><a href="#二、通用设计原则" class="headerlink" title="二、通用设计原则"></a>二、通用设计原则</h2><h3 id="1-KISS"><a href="#1-KISS" class="headerlink" title="1. KISS"></a>1. KISS</h3><p>所谓<code>KISS</code>原则，即：<code>Keep It Simple,Stupid</code>，指<strong>设计时要坚持简约原则，避免不必要的复杂化，并且易于修改</strong>。</p><blockquote><p>Everything should be made as simple as possible, but not simpler. - Albert Einstein</p></blockquote><p>简单清晰、功能强大是软件设计最重要的原则和目标。但是软件工程天然错综复杂，而“简单”却没有一个衡量标准，判断和实现一个东西是不是简单，可以通过以下方式来参考。</p><ul><li>让别的软件工程师以一种最容易的方式使用你的方案。</li><li>简单不是走捷径，不是为手边的问题找一个最快的方案。</li><li>当系统变得更庞大更复杂的时候依然能够被理解。</li><li>如果系统无法保持简单，那么我们能做的就是保持各个局部简单，即任何单个的类、模块、应用的设计目标及工作原理都能被快速理解。</li></ul><blockquote><p><strong>我的理解</strong>：保持简单但不能掩盖软件丰富的内涵。即<strong>简约而不简单</strong>！简约是对复杂的事物抽丝剥茧、去除细枝末节显露主要逻辑的过程。就像小时候老师教写文章，要求尽可能用朴实的语言，言简意赅的写出来，但却又要避免语言过于贫乏。软件的“抽象”和它的“直观性”，其实是一对矛盾的关系，软件设计就要保证这两者的平衡。代码抽象过于复杂会陷入“过度设计”不易理解的困境；为了“直观性”缺乏抽象，长此以往又会出现大量的重复、不易于扩展和难维护的困境。</p></blockquote><h3 id="2-DRY"><a href="#2-DRY" class="headerlink" title="2. DRY"></a>2. DRY</h3><p>所谓<code>DRY</code>原则，即：<code>Don&#39;t Repeat Yourself</code>，<strong>不要让自己重复</strong>。</p><p><strong>重复代码是软件程序变烂的万恶之首</strong>。<code>DRY</code>并不是指你不能复制代码，而是你复制的代码不能包含重复的“信息”。复制的东西并不仅仅是复制了代码，而是由于你把同一个信息散播在了代码的各个部分导致了有很多相近的代码也散播在各个地方。代码之所以要写的好，不要重复某些“信息”，因为需求人员总是要改需求，不改代码你就要“死”，改代码你就要加班，所以为了减少修改代码的痛苦，我们不能重复任何信息。举个例子，有一天需求人员说，要把分隔符从分号改成顿号！一下子就要改多个地方了。</p><p>所以，<strong>去掉重复的信息会让你的代码结构发生本质的变化</strong>。</p><p>“重复代码”有很多变体：</p><ul><li>魔法数字、魔法字符串等</li><li>相同代码块</li><li>相似的代码逻辑及操作</li></ul><p>对于消除重复的代码有<strong>事不过三</strong>法则。</p><ul><li>第一次先写了一段代码。</li><li>第二次在另一个地方写了一段相同或相似逻辑的代码，你已经有消除和提取重复代码的冲动了。</li><li>再次在另一个地方写了同样的代码，你已忍无可忍，现在可以考虑抽取和消除重复代码了。</li></ul><blockquote><p><strong>我的理解</strong>：解决重复的最佳的方式是通过培养良好的编码习惯来避免重复，通过重构的手段来消除重复。发现和解决重复并不困难，通过提取抽象、提取方法等措施就能消除重复，但困难的是<strong>立即行动</strong>去解决重复，从而不断的磨砺和提升自己的编程技艺，不断将私人代码变成公共代码，这才是自我提升的过程。解决了重复，经过一段时间，你就会发现，你对整个系统的理解程度在不知不觉中提高了不少。</p></blockquote><h3 id="3-Maximize-Cohesion，-Minimize-Coupling"><a href="#3-Maximize-Cohesion，-Minimize-Coupling" class="headerlink" title="3. Maximize Cohesion， Minimize Coupling"></a>3. Maximize Cohesion， Minimize Coupling</h3><p>所谓<code>Maximize Cohesion,Minimize Coupling</code>原则，即：<strong>高内聚低耦合</strong>。这是判断设计好坏的标准，主要是看<strong>模块内的内聚性是否高，模块间的耦合度是否低。</strong></p><ul><li><strong>耦合性</strong>：也称块间联系。指软件系统结构中各模块间相互联系紧密程度的一种度量。模块之间联系越紧密，其耦合性就越强，模块的独立性则越差。模块间耦合高低取决于模块间接口的复杂性、调用的方式及传递的信息。耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。</li><li><strong>内聚性</strong>：又称块内联系。指模块的功能强度的度量，即一个模块内部各个元素彼此结合的紧密程度的度量。若一个模块内各元素（语名之间、程序段之间）联系的越紧密，则它的内聚性就越高。内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。它描述的是模块内的功能联系。</li></ul><p>内聚和耦合是密切相关的，同其他模块存在高耦合的模块意味着低内聚，而高内聚的模块意味着该模块同其他模块之间是低耦合。在进行软件设计时，应力争做到高内聚，低耦合。</p><p>Java中实现高内聚低耦合的常用方式：</p><ul><li>少使用类的继承，多用接口隐藏实现的细节。</li><li>模块的功能化分尽可能的单一，道理也很简单，功能单一的模块供其它模块调用的机会就少。</li><li>遵循一个定义只在一个地方出现。</li><li>少使用全局变量。</li><li>类属性和方法的声明少用<code>public</code>，多用<code>private</code>关键字，</li><li>多用设计模式，比如采用<code>MVC</code>的设计模式就可以降低界面与业务逻辑的耦合度。</li><li>尽量不用“硬编码”的方式写程序。</li><li>最后当然就是避免直接操作或调用其它模块或类（内容耦合）。</li></ul><h3 id="4-SOC"><a href="#4-SOC" class="headerlink" title="4. SOC"></a>4. SOC</h3><p>所谓<code>SOC</code>原则，即：<strong>关注点分离</strong>（<code>Separation of Concerns</code>）。<strong>不同领域的功能，应该由不同的代码和最小重迭的模块组成。</strong>关注点分离是处理复杂性的一个原则。由于关注点混杂在一起会导致软件程序复杂性大大增加，所以能够把不同的关注点分离开来，分别处理就是处理复杂性的一个原则，一种方法。关注点分离原则不仅体现在软件程序设计等设计方法中，同时也体现在架构设计、问题求解、软件开发过程、软件项目管理以及软件开发方法学等诸多方面。</p><p><code>MVC</code>就是关注点分离的一个体现，把业务逻辑、数据、界面分离，这也是组织代码结构的一个形式。<code>MVC</code>的基本结构：</p><ul><li><code>Model</code>层表示应用程序的数据核心，通常负责在数据库中存取数据。</li><li><code>View</code>是应用程序的显示层，通常是依据模型的数据而建立。</li><li><code>Controller</code>是用来控制和处理输入输出的，是处理用户交互的部分，也负责向模型（<code>Model</code>层）发送数据。</li></ul><p><code>MVC</code>的这个设计各个关注点是分开的，这样有助于我们管理和开发复杂的应用程序，我们可以在某个时间点只集中精力在其中的某一个关注点，而不是所有的部分。</p><blockquote><p>好的架构必须使每个关注点相互分离，也就是说系统中的一个部分发生了变化，不会影响其他部分。即使需要改变，也能够清晰地识别出那些部分需要改变。如果需要扩展架构，影响将会最小化，已经可以工作的每个部分都将继续工作。——Ivar Jacobson(《AOSD中文版》)</p></blockquote><h4 id="分离方式"><a href="#分离方式" class="headerlink" title="分离方式"></a>分离方式</h4><p>下面将介绍一些分层的思想和方式:</p><ul><li><strong>纵向分离</strong>: 如常见的三层架构（逻辑控制层、业务处理层和数据持久化层）。</li><li><strong>横向分离</strong>: 如把我们的软件拆分成模块或子系统。从左到右是模块1、模块2、模块3，这是一种水平方向的切割。这跟纵向的分离是两个不同的方向，横向分离大多是模块化的过程。</li><li><strong>切面分离</strong>: 有些内容是多个层之间都需要的，比如日志（<code>log</code>），在你的系统里面，界面层、逻辑层、数据访问层可能都需要写日志，这种跨到多层同样逻辑就可以考虑切面分离。</li><li><strong>依赖方向分离</strong>: 按依赖方向考虑，决定某个类应该放在哪个层次里面，或者考虑将某一层切割成多层。</li><li><strong>关注数据分离</strong>: 在组织数据时，应该尽量考虑数据本身的固有属性，如果不是它们的固有属性，那么应该分离出来。比如产品的类就不应该关联<code>customer</code>类，应该是用订单类来把他们联系在一起。</li><li><strong>关注行为分离</strong>: 行为也应该是事物或对象的固有的本身的行为，明显偏离原来行为的，应该考虑成另外的关注点儿分离开。比如有一个函数叫做<code>CreateNewCustomer()</code>，那么<code>CreateNewCustomer()</code>的行为就应该限定在创建一个新客户上面，给新客户自动发优惠券的动作就不能放到这个函数里面。</li><li><strong>扩展分离</strong>: 如果基于某种设计，原先不具有某些行为需要增加，可以考虑通过扩展或插件的形式来完成，将这些功能放入到插件或扩展中。</li><li><strong>反转分离</strong>: 很多依赖注入的框架，如<code>Spring</code>、<code>Guice</code>等等，这些帮助我们做依赖反转，从而倒置依赖关系。</li></ul><h3 id="5-YAGNI"><a href="#5-YAGNI" class="headerlink" title="5. YAGNI"></a>5. YAGNI</h3><p>所谓<code>YAGNI</code>原则，即：<code>You Ain’t Gonna Need It</code>，<strong>你不需要它</strong>。它是一种极限编程（XP）实践，表示程序员不应为目前还不需要的功能编写代码。<code>YAGNI</code>很像<code>KISS</code>原则，因为它也是致力于构建简单的方案。然而，<code>KISS</code>是通过尽可能容易的完成某件事情来实现精简方案；但<code>YAGNI</code>是通过根本就不实现它来达到精简。<code>YAGNI</code>的观点是你应该<strong>为了眼前的需求做设计而不是未来</strong>。</p><blockquote><p>只在真正需要某些功能的时候才去实现它，而不是仅仅因为你预见到它将出现。- XP的联合创始人Ron Jeffries</p></blockquote><p>即使你非常确信将来你需要某个特性，也不要现在就去实现它。在很多情况下，你会发现或许最终你不需要它了，或者是你真正所需的特性与你之前预计的有很大的出入。遵循 YAGNI 实践有两个主要原因：</p><ul><li>你节约了时间，因为你避免了编写最终证明不必要的代码。</li><li>你的代码质量更高了，因为你使代码不必为你的“推测”所污染，而这些“推测”最终可能或多或少有些错误，但此时这些错误已牢牢地依附在你的代码中了。</li></ul><blockquote><p><strong>我的理解</strong>：YAGNI 原则，本质上是告诫我们<strong>写代码不要画蛇添足，否则就会弄巧成拙了</strong>。编写业务代码时，不要去假想一些需求或者场景，因为大多数你所设想的场景都不会发生，而你所多写的那些代码也将会长期滞留在你的系统中，收效甚微，但却让你和团队花费了更多的时间和精力去书写和维护，更可怕的是可能会对将来新的代码维护人造成困惑。另外对于没有被使用到的代码，我认为也都应该立即删除，从而保持系统的精简，如果将来需要时再去书写或恢复，而且那时侯写出的代码也绝对比之前的更为契合。</p></blockquote><h3 id="6-Boy-Scout-Rule"><a href="#6-Boy-Scout-Rule" class="headerlink" title="6. Boy-Scout Rule"></a>6. Boy-Scout Rule</h3><p><code>Boy-Scout Rule</code>，译为：<strong>童子军规则</strong>。美国童子军有一个简单的规则：“让营地比你刚来时更干净(<code>Always leave the campground cleaner than you found it</code>)”。如果看到地上有垃圾，不管是谁扔的，都要清理。这样你就有意地为下一批来宿营的人改善了环境。</p><p>童子军规则告诉我们在对现有代码库进行更改时，代码质量往往会降低，从而积累技术债务。所以需要<strong>始终保持代码整洁</strong>。不管原作者是谁，如果我们努力去改进代码模块，不管是多么小的改进，我们的软件系统就再也不会持续变坏了。取而代之的是，系统在发展的同时会逐渐变得更好。我们也会看到团队们关心整体的系统，而不是各自只关心自己负责的一小部分。而且团队成员要互助，互相清理代码，他们遵从童子军规则，因为那对每个人都很好，而不仅仅是对自己好。</p><p>关于童子军规则中所提倡的<strong>对代码坏味道的尽早修复</strong>，我也想起来了我们所熟知的“<strong>破窗效应</strong>”和“<strong>讳疾忌医</strong>”的典故：</p><h4 id="破窗效应"><a href="#破窗效应" class="headerlink" title="破窗效应"></a>破窗效应</h4><blockquote><p>如果有人打坏了一幢建筑物的窗户玻璃，而这扇窗户又得不到及时的维修，别人就可能受到某些示范性的纵容去打烂更多的窗户。久而久之，这些破窗户就给人造成一种无序的感觉，结果在这种公众麻木不仁的氛围中，犯罪就会滋生、猖獗。——政治学家威尔逊和犯罪学家凯琳提出的“破窗效应”理论</p></blockquote><ul><li>“环境早就脏了，我扔的这点儿垃圾根本起不到关键性作用。”</li><li>“这个代码以前的其他人也都是这样写的。”</li><li>“反正也不是只有我才这么写代码的。”</li></ul><p>不少人会像上面这样辩解自己的过错。其实，这些说法根本站不住脚，错了就是错了，影响的大小并不能改变行为错误的本质，别人的错误更不会是证明你无错的理由。任何一种不良现象的存在，都有可能传递一种错误信息。进而导致更坏的后果，正所谓“<strong>千里之堤，溃于蚁穴</strong>”、<strong>勿以善小而不为，勿以恶小而为之</strong>。</p><h4 id="讳疾忌医的典故"><a href="#讳疾忌医的典故" class="headerlink" title="讳疾忌医的典故"></a>讳疾忌医的典故</h4><p><img src="https://statics.sh1a.qingstor.com/2018/11/24/hjjy.jpeg" alt="扁鹊三连"></p><p>《扁鹊见蔡桓公》的故事，我们从小就学习了，告诉我们不能盲目相信自己，不能讳疾忌医。但想想我们自己代码的坏味道和bug，也是如出一辙。</p><p>代码坏味道或者糟糕的程序代码就像隐形的“疾病”一样潜伏在项目中，也因此形成了技术债务。如果这些“疾病”在项目初期不引起注关注、不把疾病扼杀在萌芽之中，那么后期修复它的代价也就越大，也必然会使得项目的软件程序越来越难以维护，这个项目也最终会像蔡桓公一样无药可治、“无奈何也”。</p><blockquote><p>所以，请记住童子军规则对我们的启示：<strong>始终保持代码整洁，勿以善小而不为，勿以恶小而为之，有病早治</strong>。</p></blockquote><h3 id="其他原则："><a href="#其他原则：" class="headerlink" title="其他原则："></a>其他原则：</h3><ul><li><strong>避免过早优化</strong>（<code>Avoid Premature Optimization</code>）: 除非你的代码运行的比你想像中的要慢，否则别去优化。假如你真的想优化，就必须先想好如何用数据证明，它的速度变快了。“<strong>过早的优化是一切罪恶之源</strong>。”——Donald Knuth</li><li><strong>最小惊讶原则</strong>(<code>Principle of least astonishment</code>): 代码应该尽可能减少让读者惊喜。也就是说，你编写的代码只需按照项目的要求来编写。其他华丽的功能就不必了，以免弄巧成拙。</li><li><strong>代码重用原则</strong>（<code>Code Reuse is Good</code>）: 重用代码能提高代码的可读性，缩短开发时间。</li><li><strong>别让我思考</strong>(<code>Don’t Make Me Think</code>): 所编写的代码一定要易于读易于理解，这样别人才会欣赏，也能够给你提出合理化的建议。相反，若是繁杂难解的程序，其他人总是会避而远之的。</li><li><strong>为维护者写代码</strong>(<code>Write Code for the Maintainer</code>): 优秀的代码，应当使本人或是他人在将来都能够对它继续编写或维护。代码维护时，或许本人会比较容易，但对他人却比较麻烦。因此你写的代码要尽可能保证他人能够容易维护。“如果一个维护者不再继续维护你的代码，很可能他就有了想杀你的冲动。”</li><li><strong>正交原则(Orthogonality)</strong>: 正交性的基本思想是，在概念上不相关的事物不应该与系统相关。设计越正交，异常越少。 这使得用编程语言更容易学习，读写程序。(反例：<code>CSS</code>)。</li><li><strong>做最简单的事儿就让代码可运行</strong>（<code>Do the simplest thing that could possibly work</code>）: 尽可能做最简单的事就可以让代码可运行。在编程中，一定要保持简单原则。作为一名程序员不断的反思“如何在工作中做到简化呢？”这将有助于在设计中保持简单的路径。</li><li><strong>隐藏实现细节</strong>（<code>Hide Implementation Details</code>）: 软件模块通过提供接口隐藏信息（即实现细节），而不泄漏任何不必要的信息。</li><li><strong>科里定律</strong>(<code>Curly&#39;s Law</code>): 是为任何特定的代码选择一个明确定义的目标：<strong>只做一件事</strong>。</li><li><strong>墨菲定律</strong>（<code>Murphy&#39;s Law</code>）:根本内容是：<strong>如果事情有变坏的可能，不管这种可能性有多小，它总会发生</strong>。主要内容如下：<ul><li>任何事都没有表面看起来那么简单；</li><li>所有的事都会比你预计的时间长；</li><li>会出错的事总会出错；</li><li>如果你担心某种情况发生，那么它就更有可能发生。</li></ul></li></ul><h2 id="三、面向对象设计原则"><a href="#三、面向对象设计原则" class="headerlink" title="三、面向对象设计原则"></a>三、面向对象设计原则</h2><h3 id="1-SRP"><a href="#1-SRP" class="headerlink" title="1. SRP"></a>1. SRP</h3><p>所谓<code>SRP</code>原则，即：<code>Single Responsibility Principle</code>，<strong>单一职责原则</strong>。原始定义如下：</p><blockquote><p>There should never be more than one reason for a class to change.(<strong>只有一个引起类改变的原因</strong>)</p></blockquote><p>在面向对象编程领域中，单一职责原则（<code>Single responsibility principle</code>）规定每个类都应该有一个单一的职责或者叫功能，并且该功能应该由这个类完全封装起来。所有它的（这个类的）服务都应该严密的和该功能平行（功能平行，意味着没有依赖）。一个类或者模块应该有且只有一个改变的原因。</p><p>如果一个类承担的职责过多，就等于把这些职责耦合在一起了。一个职责的变化可能会削弱或者抑制这个类完成其他职责的能力。这种耦合会导致脆弱的设计，当发生变化时，设计会遭受到意想不到的破坏。而如果想要避免这种现象的发生，就要尽可能的遵守单一职责原则。此原则的核心就是<strong>解耦</strong>和<strong>增强内聚性</strong>。</p><h4 id="单一职责的好处："><a href="#单一职责的好处：" class="headerlink" title="单一职责的好处："></a>单一职责的好处：</h4><ul><li>类的复杂性降低，实现什么职责都有清晰明确的定义;</li><li>可读性提高，复杂性降低，可维护性提高;</li><li>变更引起的风险降低。</li></ul><h4 id="单一职责原则的注意点："><a href="#单一职责原则的注意点：" class="headerlink" title="单一职责原则的注意点："></a>单一职责原则的注意点：</h4><ul><li>单一职责最难划分的是<strong>职责</strong>。</li><li>单一职责原则提出标准：用职责和变化原因来衡量接口或类设计的是否优良，但是职责和变化原因都是不可度量的，因项目、环境而异。</li><li>接口一定要做到单一职责，类的设计尽量做到只有一个原因引起它变化。</li></ul><h3 id="2-LSP"><a href="#2-LSP" class="headerlink" title="2. LSP"></a>2. LSP</h3><p>所谓<code>LSP</code>原则，即：<code>Liskov Substitution principle</code>，<strong>里氏替换原则</strong>。原始定义如下：</p><blockquote><p>Functions that use pointers of references to base classes must be able to use objects of derived classes without knowing it.（<strong>所有引用基类的地方必须能透明地使用其子类的对象</strong>）</p></blockquote><p>更通俗的定义即为：<strong>子类可以扩展父类的功能，但不能改变父类原有的功能</strong>。里氏替换原则包含了一下4层含义：</p><ul><li>子类必须完全实现父类的方法。在类中调用其他类是务必要使用父类或接口，如果不能使用父类或接口，则说明类的设计已经违背了<code>LSP</code>原则。</li><li>子类可以有自己的个性。子类当然可以有自己的行为和外观了，也就是方法和属性。</li><li>覆盖或实现父类的方法时输入参数可以被放大。即子类可以覆盖父类的方法，但输入参数应比父类方法中的大，这样在子类代替父类的时候，调用的仍然是父类的方法。即以子类中方法的前置条件必须与超类中被覆盖的方法的前置条件相同或者更宽松。</li><li>覆盖或实现父类的方法时输出结果可以被缩小。</li></ul><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><ul><li>提高代码的重用性，子类拥有父类的方法和属性；</li><li>提高代码的可扩展性，子类可形似于父类，但异于父类，保留自我的特性；</li></ul><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><ul><li>继承是侵入性的，只要继承就必须拥有父类的所有方法和属性，在一定程度上约束了子类，降低了代码的灵活性；</li><li>增加了耦合，当父类的常量、变量或者方法被修改了，需要考虑子类的修改，所以一旦父类有了变动，很可能会造成非常糟糕的结果，要重构大量的代码。</li></ul><h3 id="3-ISP"><a href="#3-ISP" class="headerlink" title="3. ISP"></a>3. ISP</h3><p>所谓<code>ISP</code>原则，即：<code>Interface Segregation Principle</code>，<strong>接口隔离原则</strong>。原始定义如下：</p><blockquote><p>Clients should not be forced to depend upon interfaces that they do not use.(客户端只依赖于它所需要的接口；它需要什么接口就提供什么接口，把不需要的接口剔除掉。)</p></blockquote><blockquote><p>The dependency of one class to another one should depend on the smallest possible interface.(类间的依赖关系应建立在最小的接口上。)</p></blockquote><p>即，<strong>接口尽量细化，接口中的方法尽量少</strong>。接口隔离原则与单一职责原则的审视角度是不同的，单一职责原则要求的是类和接口职责单一，注重的是职责，这是业务逻辑上的划分，而接口隔离原则要求接口的方法尽量少。根据接口隔离原则拆分接口时，首先必须满足单一职责原则。</p><p>采用接口隔离原则对接口进行约束时，要注意以下几点：</p><ul><li>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化。所以一定要适度。</li><li>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。</li><li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li></ul><p>运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。</p><h3 id="4-OCP"><a href="#4-OCP" class="headerlink" title="4. OCP"></a>4. OCP</h3><p>所谓<code>OCP</code>原则，即：<code>Open Closed Principle</code>，<strong>开闭原则</strong>。原始定义如下：</p><blockquote><p>software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.(对扩展开放，对修改关闭)</p></blockquote><p>开闭原则（<code>OCP</code>）是面向对象设计中“可复用设计”的基石，是面向对象设计中最重要的原则之一，其它很多的设计原则和设计模式都是实现开闭原则的一种手段。核心就是：<strong>对扩展开放，对修改关闭</strong>。其含义是说一个软件应该通过扩展来实现变化，而不是通过修改已有的代码来实现变化的。</p><p>软件系统中包含的各种组件，例如模块（<code>Module</code>）、类（<code>Class</code>）以及功能（<code>Function</code>）等等，应该在不修改现有代码的基础上，引入新功能。开闭原则中“开”，是指对于组件功能的扩展是开放的，是允许对其进行功能扩展的；开闭原则中“闭”，是指对于原有代码的修改是封闭的。</p><p>实现开闭原则的关键就在于“<strong>抽象</strong>”。把系统的所有可能的行为抽象成一个抽象底层，这个抽象底层规定出所有的具体实现必须提供的方法的特征。作为系统设计的抽象层，要预见所有可能的扩展，从而使得在任何扩展情况下，系统的抽象底层不需修改；同时，由于可以从抽象底层导出一个或多个新的具体实现，可以改变系统的行为，因此系统设计对扩展是开放的。在实际开发过程的设计开始阶段，就要罗列出来系统所有可能的行为，并把这些行为加入到抽象底层，根本就是不可能的，这么去做也是不经济的。因此我们应该现实的接受修改拥抱变化，使我们的代码可以对扩展开放，对修改关闭。</p><p>开闭原则的好处：</p><ul><li>可复用性好;</li><li>可维护性好。</li></ul><h3 id="5-DIP"><a href="#5-DIP" class="headerlink" title="5. DIP"></a>5. DIP</h3><p>所谓<code>DIP</code>原则，即：<code>Dependency Inversion Principle</code>，<strong>依赖倒置原则</strong>。原始定义如下：</p><blockquote><p>High-level modules should not depend on low-level modules. Both should depend on abstractions.(<strong>高层模块不应该依赖低层模块，两者都应该依赖其抽象</strong>)</p></blockquote><blockquote><p>Abstractions should not depend on details. Details should depend on abstractions.(<strong>抽象不应该依赖细节；细节应该依赖抽象</strong>)</p></blockquote><p>面向过程的开发，上层调用下层，上层依赖于下层，当下层剧烈变动时上层也要跟着变动，这就会导致模块的复用性降低而且大大提高了开发的成本。面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p><p>依赖倒置原则主要有以下三层含义：</p><ul><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象（抽象类或接口）；</li><li>抽象不应该依赖细节（具体实现）；  </li><li>细节（具体实现）应该依赖抽象。</li></ul><p>依赖倒置原则基于这样一个事实：<strong>相对于细节的多变性，抽象的东西要稳定的多</strong>。以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多。在 Java 中，抽象指的是接口或者抽象类，细节就是具体的实现类，使用接口或者抽象类的目的是制定好规范和契约，而不去涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。<strong>依赖倒置原则的核心思想就是面向接口编程</strong>。</p><h3 id="6-LOD-LKP"><a href="#6-LOD-LKP" class="headerlink" title="6. LOD | LKP"></a>6. LOD | LKP</h3><p>所谓<code>LOD</code>原则，即：<code>Law of Demeter</code>，<strong>迪米特法则</strong>，又叫<strong>最少知识原则</strong>（<code>Least Knowledge Principle</code>，简写<code>LKP</code>），就是说一个对象应当对其他对象有尽可能少的了解。通俗的讲，一个类应该对自己需要耦合或调用的类知道得最少，被耦合的类是如何的复杂都和我没关系，即为“不和陌生人说话”。迪米特法则的英文解释如下：</p><blockquote><p>talk only to your immediate friends.(<strong>只与直接的朋友通信</strong>)</p></blockquote><p><strong>迪米特法则的初衷在于降低类之间的耦合</strong>。由于每个类尽量减少对其他类的依赖，因此，很容易使得系统的功能模块功能独立，相互之间不存在（或很少有）依赖关系。</p><p>迪米特法则不希望类之间建立直接的联系。如果真的有需要建立联系，也希望能通过它的“朋友”类来转达。因此，应用迪米特法则有可能造成的一个后果就是：系统中存在大量的中介类，这些类之所以存在完全是为了传递类之间的相互调用关系——这在一定程度上增加了系统的复杂度,同时也为系统的维护带来了难度。所以，在采用迪米特法则时需要反复权衡，不遵循不对，严格执行又会“过犹不及”。既要做到让结构清晰，又要做到高内聚低耦合。</p><h3 id="7-CRP"><a href="#7-CRP" class="headerlink" title="7. CRP"></a>7. CRP</h3><p>所谓<code>CRP</code>原则，即：<code>Composite Reuse Principle</code>，<strong>组合复用原则</strong>。</p><p>组合复用原则的核心思想是：<strong>尽量使用对象组合，而不是继承来达到复用的目的</strong>。该原则就是在一个新的对象里面使用一些已有的对象，使之成为新对象的一部分：新的对象通过向这些对象的委派达到复用已有功能的目的。</p><p>继承的缺点主要有以下几点：</p><ul><li>继承复用破坏数据封装性，将基类的实现细节全部暴露给了派生类，基类的内部细节常常对派生类是透明的，白箱复用。虽然简单，但不安全，不能在程序的运行过程中随便改变。</li><li>基类的实现发生了改变，派生类的实现也不得不改变。</li><li>从基类继承而来的派生类是静态的，不可能在运行时间内发生改变，因此没有足够的灵活性。</li></ul><p>由于组合可以将已有的对象纳入到新对象中，使之成为新对象的一部分，因此新对象可以调用已有对象的功能，这样做有下面的好处：</p><ul><li>新对象存取<code>组成对象</code>的唯一方法是通过<code>组成对象</code>的<code>getter/setter</code>方法。</li><li>组合复用是黑箱复用，因为组成对象的内部细节是新对象所看不见的。</li><li>组合复用所需要的依赖较少。</li><li>每一个新的类可以将焦点集中到一个任务上。</li><li>组合复用可以在运行时间动态进行，新对象可以动态的引用与成分对象类型相同的对象。</li></ul><p>组合复用的缺点：就是用组合复用建造的系统会有较多的对象需要管理。</p><p>组合复用原则可以使系统更加灵活，类与类之间的耦合度降低，一个类的变化对其他类造成的影响相对较少，因此一般首选使用组合来实现复用；其次才考虑继承。在使用继承时，需要严格遵循里氏代换原则，有效使用继承会有助于对问题的理解，降低复杂度，而滥用继承反而会增加系统构建和维护的难度以及系统的复杂度，因此需要慎重使用继承复用。</p><p>使用继承时必须满足<code>Is-A</code>的关系是才能使用继承，而组合却是一种<code>Has-A</code>的关系。导致错误的使用继承而不是使用组合的一个重要原因可能就是错误的把<code>Has-A</code>当成了<code>Is-A</code>。</p><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础教程</title>
      <link href="/2021/06/29/computer/javascript/javascript-ji-chu-jiao-cheng/"/>
      <url>/2021/06/29/computer/javascript/javascript-ji-chu-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="一、JavaScript介绍"><a href="#一、JavaScript介绍" class="headerlink" title="一、JavaScript介绍"></a>一、JavaScript介绍</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">JavaScript</a>是目前所有主流浏览器上唯一支持的脚本语言，这也是早期<code>JavaScript</code>的唯一用途。其主要作用是在不与服务器交互的情况下修改<code>HTML</code>页面内容，因此其最关键的部分是<code>DOM</code>（文档对象模型），也就是<code>HTML</code>元素的结构。通过<code>Ajax</code>可以使<code>HTML</code>页面通过<code>JavaScript</code>，在不重新加载页面的情况下从服务器上获取数据并显示，大幅提高用户体验。通过<code>JavaScript</code>，使<code>Web</code>页面发展成胖客户端成为可能。</p><h3 id="语言的性质"><a href="#语言的性质" class="headerlink" title="语言的性质"></a>语言的性质</h3><p>本节对<code>JavaScript</code>的性质做简要介绍，以帮你理解一些疑问。</p><p><code>JavaScript</code>和<code>ECMAScript</code>（JavaScript versus ECMAScript）<br>编程语言称为<code>JavaScript</code>，语言标准被称为<code>ECMAScript</code>。他们有不同名字的原因是因为“Java”已经被注册为商标（属于Oracle）。目前，只有<code>Mozilla</code>被正式允许使用“JavaScript”名称，因为很久以前他们得到一份许可。因此，开放的语言标准拥有不同的名字。当前的<code>JavaScript</code>版本是<code>ECMAScript 6</code>，<code>ECMAScript 7</code>当前是开发版。</p><p><code>JavaScript</code>之父，<code>Brendan Eich</code><a href="http://yanhaijing.com/javascript/2013/06/22/javascript-designing-a-language-in-10-days/">迅速了创建一门编程语言</a>。（否则，Netscape将使用其他技术）。他借鉴了几门其他语言的一些特性：</p><ul><li>JavaScript借鉴了Java的语法和如何区分原始值和对象。</li><li>JavaScript的函数设计受Scheme和AWK的启发——他们（的函数）都是第一类（first-class）对象，并且在语言中广泛使用。闭包使他们（函数）变成强大的工具。</li><li>Self影响了JavaScript独一无二的面向对象编程(OOP)风格。它的核心思想（在这里我们没有提到）非常优雅，基于此创建的语言非常少。但后面会提到一个简单的模式照顾大部分用例。JavaScript面向对象编程的杀手级特性是你可以直接创建对象。不需要先创建类或其他类似的东西。</li><li>Perl和Python影响了JavaScript字符串，数组和正则表达式的操作。</li></ul><p><code>JavaScript</code>在最初的时候并不是一个完善的语言，因此也导致<code>JavaScript</code>遗留了很多令人诟病的问题。在开发稍大规模的应用时会显得力不从心，但是由于<code>JavaScript</code>本身是一种非常灵活的语言，因此在它的基础上开发程序库比较容易，因此出现了一大批非常优秀的第三方库，如<a href="http://jquery.com/">jQuery</a>，<a href="http://extjs.org.cn/">ExtJS</a>，<a href="http://underscorejs.org/">underscorejs</a>，<a href="http://backbonejs.org/">backbone</a>等等，由于这些第三方库，<code>JavaScript</code>变得非常简单。其中<code>jQuery</code>的使用非常广泛，它大幅简化了<code>DOM</code>和<code>Ajax</code>，已经成为了很多网站的标配。<code>jQuery</code>虽然基于<code>JavaScript</code>，但它提供了另外一种编程范式，也就是逻辑式编程，与<code>SQL</code>和正则表达式类似。</p><h3 id="JavaScript能做什么"><a href="#JavaScript能做什么" class="headerlink" title="JavaScript能做什么"></a>JavaScript能做什么</h3><p><img src="https://statics.sh1a.qingstor.com/2020/11/29/js.png" alt="JavaScript项目在Github所占比例"></p><p>如上图，<code>JavaScript</code>作为<a href="https://github.com/">Github</a>上最流行、最火的编程语言，几乎无所不能。这里是<a href="https://segmentfault.com/u/puyart">PuYart</a>的关于<a href="https://segmentfault.com/a/1190000003767058"><code>JavaScript</code>就要统治世界了</a>的文章，可以让我们了解<code>JavaScript</code>到底能做什么的一些介绍。</p><ol><li>Web前端(各种前端工具类库、前端框架、动画效果、数据可视化等)</li><li>服务端开发(<a href="https://nodejs.org/">Node.js</a>)</li><li>移动应用或者<code>Hybrid App</code>(Cordova)</li><li>桌面应用(<a href="http://nwjs.io/">NW.js</a>、<a href="http://electron.atom.io/">Electron</a>)</li><li>游戏(<a href="http://unity3d.com/cn/">Unity3D</a>、<a href="http://www.cocos.com/doc/article/index?type=cocos2d-x&url=/doc/cocos-docs-master/manual/framework/cocos2d-js/catalog/../1-about-cocos2d-js/1-1-a-brief-history/zh.md">Cocos2d-js</a>、<a href="http://pomelo.netease.com/">Pomelo</a>)</li><li>VR(<a href="https://www.phodal.com/blog/why-javascript-will-use-vr-world/">JavaScript在VR世界的应用</a>)</li><li>硬件、嵌入式物联网等(<a href="http://blog.jobbole.com/46055/">Tessel：用JavaScript做嵌入式开发</a>)</li><li>操作系统(<a href="http://node-os.com/">NodeOS</a>)</li></ol><blockquote><p>Atwood’s Law: any application that can be written in JavaScript, will eventually be written in JavaScript.(Atwood定律：凡是能用JavaScript写出来的，最终都会用JavaScript写出来。)</p></blockquote><h2 id="二、-JavaScript语法"><a href="#二、-JavaScript语法" class="headerlink" title="二、 JavaScript语法"></a>二、 JavaScript语法</h2><h3 id="语句和表达式"><a href="#语句和表达式" class="headerlink" title="语句和表达式"></a>语句和表达式</h3><p>了解<code>JavaScript</code>的语法，先来了解两个主要的语法类型：语句和表达式。</p><ul><li>语句通常是“做某些事情”。程序是一组语句的序列。举个例子，下面声明（创建）一个变量 <code>foo</code>： </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br></pre></td></tr></table></figure><ul><li>表达式是产生“值”。他们通常位于赋值操作的右边、函数参数等。举个例子： </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> * <span class="number">7</span></span><br></pre></td></tr></table></figure><p>语句和表达式之间的区别最好通过实例说明，<code>JavaScript</code>（像Java）有两种不同的方式实现<code>if-then-else</code>。一种是用语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line"><span class="keyword">if</span> (y &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    x = y;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    x = -y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种是表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = y &gt;= <span class="number">0</span> ? y : -y;</span><br></pre></td></tr></table></figure><p>你可以将后者作为函数参数（但前者不行）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">myFunction</span>(y &gt;= <span class="number">0</span> ? y : -y)</span><br></pre></td></tr></table></figure><p>最后，每当<code>JavaScript</code>期待一个语句，你也可以用一个表达式代替。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">foo</span>(<span class="title function_">bar</span>(<span class="number">7</span>, <span class="number">1</span>));</span><br></pre></td></tr></table></figure><p><code>foo(...);</code>是一个语句（也叫做表达式语句），<code>bar(7, 1)</code>则是一个表达式。他们都实现函数调用。</p><h3 id="流程控制语句和语句块"><a href="#流程控制语句和语句块" class="headerlink" title="流程控制语句和语句块"></a>流程控制语句和语句块</h3><p>流程控制语句，其语句体可以是单条语句。举两个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj !== <span class="literal">null</span>) obj.<span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">0</span>) x--;</span><br></pre></td></tr></table></figure><p>然而，任何语句总能被语句块代替，花括号包含零或多条语句。因此，你也可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj !== <span class="literal">null</span>) &#123;</span><br><span class="line">    obj.<span class="title function_">foo</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    x--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为便于程序的阅读和维护，推荐使用后一种方式，即语句块方式。</p><h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p><code>JavaScript</code>中的分号是<a href="http://www.2ality.com/2011/05/semicolon-insertion.html">可选的</a>。但省略（分号）可能会带来意想不到的结果，所以我建议还是写上分号。</p><p>正如上面所看到的，分号作为语句的结尾，但语句块不需要。仅有一种情况下你能看到语句块后面有分号——<strong>函数表达式后面的函数体块</strong>。<strong>表达式作为语句的结尾，后面是分号</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">3</span> * <span class="number">7</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;;</span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p><code>JavaScript</code>的注释有两种形式：单行注释和多行注释。单行注释以<code>//</code>开头，以换行符结尾：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x++; <span class="comment">// 单行（single-line）注释</span></span><br></pre></td></tr></table></figure><p>多行注释用<code>/**/</code>包裹</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> 这是多行注释</span></span><br><span class="line"><span class="comment"> 多行哦</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="三、变量和赋值"><a href="#三、变量和赋值" class="headerlink" title="三、变量和赋值"></a>三、变量和赋值</h2><p><code>JavaScript</code>中的变量在使用前必须先声明，否则会报错引用错误（Reference Error）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;  <span class="comment">// 声明变量“foo”</span></span><br></pre></td></tr></table></figure><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>你可以在声明变量的同时为其赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="number">6</span>;</span><br></pre></td></tr></table></figure><p>你也可以给已经存在的变量重新赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">foo = <span class="number">4</span>;  <span class="comment">// 更改变量的值</span></span><br></pre></td></tr></table></figure><h3 id="复合赋值操作符"><a href="#复合赋值操作符" class="headerlink" title="复合赋值操作符"></a>复合赋值操作符</h3><p>有很多复合赋值操作符，例如+=。下面的两个赋值操作等价：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x += <span class="number">1</span>;</span><br><span class="line">x = x + <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="标识符和变量名"><a href="#标识符和变量名" class="headerlink" title="标识符和变量名"></a>标识符和变量名</h3><p>标识符就是事物的名字，在<code>JavaScript</code>中他们扮演不同的语法角色。例如，变量的名称是一个标识符。</p><p>大体上，标识符的第一个字符可以是任何<code>Unicode</code>字符、美元标志符（$）或下划线（_）。后面可以是任意字符和数字。因此，下面全是合法的标识符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arg0</span><br><span class="line">_tmp</span><br><span class="line">$elem</span><br><span class="line">π</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：首字符不能是数字，如果是数字的话，该如何区分是数字还是变量呢？</p></blockquote><p>一些标识符是“保留关键字”——他们是语法的一部分，不能用作变量名。从技术上讲，下面三个标识符不是保留字，但也不应该作为变量名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Infinity</span> <span class="title class_">NaN</span> <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h2 id="四、值"><a href="#四、值" class="headerlink" title="四、值"></a>四、值</h2><p><code>JavaScript</code>有所有我们期待的编程语言值类型：布尔，数字，字符串，数组等。<code>JavaScript</code>中的所有值都有属性。每个属性有一个键（或名字）和一个值。你可以使用点（.）操作符读取属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value.<span class="property">propKey</span></span><br></pre></td></tr></table></figure><p>举个例子：字符串<code>abc</code>有属性<code>lenght</code>（长度）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>); <span class="comment">// 得到3</span></span><br></pre></td></tr></table></figure><p>上面的代码也可以写成下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="property">length</span> <span class="comment">// 得到3</span></span><br></pre></td></tr></table></figure><p>点操作符也可以用来给属性赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;  <span class="comment">// 空对象</span></span><br><span class="line">obj.<span class="property">foo</span> = <span class="number">123</span>; <span class="comment">// 创建属性“foo”，设置它为123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">foo</span>); <span class="comment">// 得到123</span></span><br></pre></td></tr></table></figure><p>你也可以通过它（.）调用方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;hello&#x27;</span>.<span class="title function_">toUpperCase</span>(); <span class="comment">// 得到HELLO</span></span><br></pre></td></tr></table></figure><p>上面，我们在值<code>hello</code>上面调用方法<code>toUpperCase()</code>。</p><h3 id="原始类型值和对象"><a href="#原始类型值和对象" class="headerlink" title="原始类型值和对象"></a>原始类型值和对象</h3><p>JavaScript定义了不同值之间的区别：</p><ul><li>原始值包括：<code>boolean</code>，<code>number</code>，<code>string</code>，<code>null</code>和<code>undefined</code>。</li><li>所有其他的值都是对象。实际上对象被定义为——所有不为原始值的值。</li></ul><p>两者之间的主要区别在于他们是如何被比较的：每一个对象有一个独一无二的标志，并且仅和自己相等：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;  <span class="comment">// 一个空对象</span></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;;  <span class="comment">// 另一个空对象</span></span><br><span class="line">obj1 === obj2   <span class="comment">// false</span></span><br><span class="line">obj1 === obj1   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>相反，所有原始值只要编码值相同就被认为是相同的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> prim1 = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> prim2 = <span class="number">123</span>;</span><br><span class="line">prim1 === prim2 <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="原始类型值"><a href="#原始类型值" class="headerlink" title="原始类型值"></a>原始类型值</h3><p>下面全是原始类型值（简称：原始值）：</p><ul><li><p>布尔类型：true，false</p></li><li><p>数字类型：1736，1.351</p></li><li><p>字符串类型: ‘abc’，”abc”</p></li><li><p>两个“无值（non-values）”：undefined，null<br>原始值的特征：</p></li><li><p><strong>值做比较时,“内容”做比较</strong>。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> === <span class="number">3</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span> === <span class="string">&#x27;abc&#x27;</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>无法更改</strong>：值的属性无法更改，无法添加和移除属性，获取未知属性总返回undefined。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">str.<span class="property">foo</span> = <span class="number">3</span>; <span class="comment">// try to create property `foo` ⇒ no effect</span></span><br><span class="line">str.<span class="property">foo</span>  <span class="comment">// unknown property ⇒  undefined</span></span><br></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><h4 id="对象的类型"><a href="#对象的类型" class="headerlink" title="对象的类型"></a>对象的类型</h4><p>所有非原始值的值都是对象。最常见的几种对象类型是：</p><ul><li>简单对象（类型是<code>Object</code>）能通过对象字面量创建：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">firstName</span>: ‘<span class="title class_">Jane</span>’, </span><br><span class="line">    <span class="attr">lastName</span>: ‘<span class="title class_">Doe</span>’</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的对象有两个属性：<code>firstName</code>属性的值是“Jane”，<code>lastName</code>属性的值是“Doe”。</p><ul><li>数组（类型是<code>Array</code>）能通过数组字面量创建：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ ‘apple’, ‘banana’, ‘cherry’ ]</span><br></pre></td></tr></table></figure><p>上面的数组有三个元素，可以通过数字索引访问。例如“apple”的索引是0。</p><ul><li>正则表达式对象（类型是<code>RegExp</code>）能通过正则表达式字面量创建。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^a+b+$/</span><br></pre></td></tr></table></figure><h4 id="对象的特征"><a href="#对象的特征" class="headerlink" title="对象的特征"></a>对象的特征</h4><ul><li><strong>比较的是引用</strong>：比较的是标识符，每个值有自己的标识符。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#125; === &#123;&#125;  <span class="comment">// 两个不同的空对象, false</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj1 === obj2   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li><strong>默认可以更改</strong>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.<span class="property">foo</span> = <span class="number">123</span>;</span><br><span class="line">obj.<span class="property">foo</span> <span class="comment">//123</span></span><br></pre></td></tr></table></figure><p>所有的数据结构（如数组）都是对象，但并不是所有的对象都是数据结构。例如：正则表达式是对象，但不是数据结构。</p><h3 id="undefined-和-null"><a href="#undefined-和-null" class="headerlink" title="undefined 和 null"></a>undefined 和 null</h3><p><code>JavaScript</code>有两个“无值）”：<code>undefined</code>和<code>null</code>。</p><p><code>undefined</code>的意思是“没有值”。未初始化的变量是<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line">foo <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>读取不存在的属性时，将返回<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// 空对象</span></span><br><span class="line">&gt; obj.<span class="property">foo</span> <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>缺省的参数也是<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p><code>null</code>的意思是“没有对象”。它被用来表示对象的无值（参数，链上的对象等）。</p><p>通常情况下你应该把<code>undefined</code>和<code>null</code>看成是等价的，如果他们代表相同意义的无值的话。检查他们的一种方式是通过严格比较：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x === <span class="literal">undefined</span> || x === <span class="literal">null</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一种在实际中使用的方法是认为undefined 和 null 都是false：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!x) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>警告</strong>：false，0，NaN 和 “” 都被当作false。</p></blockquote><h3 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h3><p>对象类型的实例<code>Foo</code>（包括内建类型，例如Array和其他自定义类型）从对象<code>Foo.prototype</code>上获取方法。你可以通过读取这个方法的方式（不是调用）验证这点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[].<span class="property">push</span> === <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>相反，<strong>原始类型是没有类型的，所以每个原始类型有一个关联类型，称之为包装类型</strong>：</p><ul><li>布尔值的包装类型是 Boolean。布尔值从Boolean.prototype上获取方法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="literal">true</span>.<span class="property">toString</span> === <span class="title class_">Boolean</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>    <span class="comment">//true</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：包装类型名字的首字母是大写的B。如果在JavaScript中布尔值的类型可以访问，那么它可能会被转换为布尔对象。</p></blockquote><ul><li>数字值的包装类型是<code>Number</code>。</li><li>字符串值的包装类型是<code>String</code>。</li></ul><p>包装类型也有实例（他们的实例是对象），但不常用。相反，包装类型有其他用处：<strong>如果你将他们作为函数调用，他们可以将值转换为原始类型</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">//123</span></span><br><span class="line"><span class="title class_">String</span>(<span class="literal">true</span>)  <span class="comment">//&#x27;true&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="通过typeof和instanceof将值分类"><a href="#通过typeof和instanceof将值分类" class="headerlink" title="通过typeof和instanceof将值分类"></a>通过typeof和instanceof将值分类</h3><p>有两个操作符可以用来将值分类：<code>typeof</code>主要用于原始值，<code>instanceof</code>主要用于对象。</p><h4 id="typeof-使用方法如下："><a href="#typeof-使用方法如下：" class="headerlink" title="typeof 使用方法如下："></a>typeof 使用方法如下：</h4><p><code>typeof «value»</code></p><p><code>typeof</code>返回描述<code>value</code>“类型”的一个字符串。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span> <span class="comment">//&#x27;boolean&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">&#x27;abc&#x27;</span> <span class="comment">//&#x27;string&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125; <span class="comment">// 空对象字面量,&#x27;object&#x27;</span></span><br><span class="line"><span class="keyword">typeof</span> [] <span class="comment">// 空数组字面量,&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure><p>下面列出了<code>typeof</code>操作的所有结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">操作数 结果</span><br><span class="line">undefined&#x27;undefined&#x27;</span><br><span class="line">null&#x27;object&#x27;</span><br><span class="line">Boolean value&#x27;boolean&#x27;</span><br><span class="line">Number value&#x27;number&#x27;</span><br><span class="line">String value&#x27;string&#x27;</span><br><span class="line">Function&#x27;function&#x27;</span><br><span class="line">All other values&#x27;object&#x27;</span><br></pre></td></tr></table></figure><p>有两个结果和我们上面说的的原始值与对象是矛盾的：</p><ul><li>函数的类型是<code>function</code>而不是<code>object</code>。因为函数（类型为“function”）是对象（类型是对象）的子类型，这不是一个错误。</li><li><code>null</code>的类型是<code>object</code>。这是一个bug，但从没被修复，因为修复后会破坏现有的代码。</li></ul><h4 id="instanceof使用方法如下："><a href="#instanceof使用方法如下：" class="headerlink" title="instanceof使用方法如下："></a>instanceof使用方法如下：</h4><p><code>«value» instanceof «Constr»</code></p><p>如果<code>value</code>是一个对象，并且<code>value</code> 是由构造函数<code>Constr</code>创建的（参考：类）。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Bar</span>();  <span class="comment">// 通过构造函数Bar创建对象</span></span><br><span class="line">b <span class="keyword">instanceof</span> <span class="title class_">Bar</span>    <span class="comment">//true</span></span><br><span class="line">&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>    <span class="comment">//true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="深入阅读"><a href="#深入阅读" class="headerlink" title="深入阅读"></a>深入阅读</h3><ul><li><a href="http://yanhaijing.com/javascript/2014/01/05/exploring-the-abyss-of-null-and-undefined-in-javascript/">探索JavaScript中Null和Undefined的深渊</a></li></ul><h2 id="五、布尔"><a href="#五、布尔" class="headerlink" title="五、布尔"></a>五、布尔</h2><p>布尔类型原始值包括<code>true</code>和<code>false</code>。下面的操作符会得到布尔值：</p><ul><li>二元逻辑运算符：&amp;&amp;（与），||（或）</li><li>前缀逻辑运算符：!（非）</li><li>等值运算符：=== !== == !=</li><li>比较运算符（字符串或数字）：&gt; &gt;= &lt; &lt;=</li></ul><h3 id="真值和假值"><a href="#真值和假值" class="headerlink" title="真值和假值"></a>真值和假值</h3><p>每当<code>JavaScript</code>希望一个布尔值时（例如：if语句的条件），可以使用任何值。它将被理解（转换）为<code>true</code>或<code>false</code>。下面的值被理解为<code>false</code>：</p><ul><li>undefined, null</li><li>布尔: false</li><li>数字: 0, NaN</li><li>字符串: ‘’</li></ul><p>所有其他值被认为<code>true</code>。被理解为<code>false</code>的值称为假值，被理解为<code>true</code>的值称为真值。可以使用<code>Boolean</code>作为函数，测试值被理解为什么。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Boolean</span>(<span class="literal">undefined</span>)  <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="number">0</span>)    <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Boolean</span>(<span class="number">3</span>)    <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="二元逻辑运算符"><a href="#二元逻辑运算符" class="headerlink" title="二元逻辑运算符"></a>二元逻辑运算符</h3><p><code>JavaScript</code>中的<strong>二元逻辑运算符是短路运算</strong>——如果第一个操作数可以确定结果，第二个操作数将不被验证（运算）。例如，在下面的代码中，函数<code>foo()</code>永远不会被调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> &amp;&amp; <span class="title function_">foo</span>()</span><br><span class="line"><span class="literal">true</span> || <span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><p>此外，<strong>二元逻辑运算符会返回操作数中的一个</strong>，可能是一个布尔值，也可能不是。</p><ul><li><strong>与</strong>：如果第一个操作数是假值，返回第一个。否则返回第二个操作数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">NaN</span> &amp;&amp; <span class="string">&#x27;abc&#x27;</span>    <span class="comment">//NaN</span></span><br><span class="line"><span class="number">123</span> &amp;&amp; <span class="string">&#x27;abc&#x27;</span>    <span class="comment">//&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><strong>或</strong>：如果第一个操作数是真值，返回第一个。否则，返回第二个操作数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span> || <span class="number">123</span>    <span class="comment">//&#x27;abc&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;</span> || <span class="number">123</span>   <span class="comment">//123</span></span><br></pre></td></tr></table></figure><h3 id="等值运算符"><a href="#等值运算符" class="headerlink" title="等值运算符"></a>等值运算符</h3><p>在<code>JavaScript</code>中检测相等，你可以使用严格相等（<code>===</code>）和严格不等（<code>!==</code>）。或者你也可以使用非严格相等（<code>==</code>）和非严格不等（<code>!=</code>）。</p><blockquote><p><strong>经验规则：总是用严格运算符，假装非严格运算符不存在。严格相等更安全。</strong></p></blockquote><h3 id="深入阅读-1"><a href="#深入阅读-1" class="headerlink" title="深入阅读"></a>深入阅读</h3><ul><li><a href="http://yanhaijing.com/javascript/2014/04/25/strict-equality-exemptions/">在JavaScript中什么时候使用==是正确的？</a></li></ul><h2 id="六、数字"><a href="#六、数字" class="headerlink" title="六、数字"></a>六、数字</h2><p><code>JavaScript</code>中的<strong>所有数字都是浮点型</strong>（虽然大部分的JavaScript引擎内部也使用整数）。至于为什么这样设计，查看这里（<a href="http://yanhaijing.com/javascript/2014/03/14/what-every-javascript-developer-should-know-about-floating-points">每一个JavaScript开发者应该了解的浮点知识</a>）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> === <span class="number">1.0</span>   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>特殊数字：</p><ul><li><code>NaN</code> (“不是一个数字 not a number”): 错误值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;xyz&#x27;</span>)  <span class="comment">// &#x27;xyz&#x27; 不能被转换为数字得到:NaN</span></span><br></pre></td></tr></table></figure><ul><li><code>Infinity</code>：也是最大错误值（无穷大）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> / <span class="number">0</span>   <span class="comment">//Infinity</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>, <span class="number">1024</span>)  <span class="comment">// 数字太大了,得到Infinity</span></span><br></pre></td></tr></table></figure><p><code>Infinity</code>有时很有用，因为它比任何其他数字都大。同样，<code>-Infinity</code> 比其他任何数字都小。</p><ul><li><code>JavaScript</code>有两个零，<code>+0</code>和<code>-0</code>。它（js引擎）通常不让你看到，并简单将两个零都显示为0：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+<span class="number">0</span>  <span class="comment">//0</span></span><br><span class="line">-<span class="number">0</span>  <span class="comment">//0</span></span><br></pre></td></tr></table></figure><p>因此最好假装只有一个零（正如我们看到假值时所做的那样：**-0 和 +0 都是假值**）。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><code>JavaScript</code>中有下列算数运算符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">加: number1 + number2</span><br><span class="line">减: number1 - number2</span><br><span class="line">乘: number1 * number2</span><br><span class="line">除: number1 / number2</span><br><span class="line">模: number1 % number2</span><br><span class="line">自增: ++variable, variable++</span><br><span class="line">自减: –variable, variable–</span><br><span class="line">负值: -value</span><br><span class="line">正值（转换为数字）: +value</span><br></pre></td></tr></table></figure><p>全局对象<code>Math</code>通过函数提供更多算数运算操作。</p><p><code>JavaScript</code>中也有位运算符（例如：&amp;）。</p><h2 id="七、字符串"><a href="#七、字符串" class="headerlink" title="七、字符串"></a>七、字符串</h2><p>字符串可以直接通过字符串字面量创建。这些字面量被单引号或双引号包裹。反斜线（\）转义字符并且产生一些控制字符。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="string">&quot;abc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;Did she say &quot;Hello&quot;?&#x27;</span></span><br><span class="line"><span class="string">&quot;Did she say \&quot;Hello\&quot;?&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;That\&#x27;s nice!&#x27;</span></span><br><span class="line"><span class="string">&quot;That&#x27;s nice!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;Line 1\nLine 2&#x27;</span>  <span class="comment">// 换行</span></span><br><span class="line"><span class="string">&#x27;Backlash: \\&#x27;</span></span><br></pre></td></tr></table></figure><p>可以通过方括号访问单个字符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">str[<span class="number">1</span>]    <span class="comment">//&#x27;b&#x27;</span></span><br></pre></td></tr></table></figure><p><code>length</code>属性是字符串的字符数量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="property">length</span>  <span class="comment">//3</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>提醒</strong>：字符串是不可变的，如果你想改变现有字符串，你需要创建一个新的字符串。</p></blockquote><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><p>字符串可以通过加号操作符（+）拼接，如果其中一个操作数为字符串，会将另一个操作数也转换为字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msgCount = <span class="number">3</span>;</span><br><span class="line"><span class="string">&#x27;You have &#x27;</span>+ msgCount + <span class="string">&#x27; messages&#x27;</span> <span class="comment">//&#x27;You have 3 messages&#x27;</span></span><br></pre></td></tr></table></figure><p>连续执行拼接操作可以使用<code>+=</code>操作符：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">str += <span class="string">&#x27;Multiple &#x27;</span>;</span><br><span class="line">str += <span class="string">&#x27;pieces &#x27;</span>;</span><br><span class="line">str += <span class="string">&#x27;are concatenated.&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">//&#x27;Multiple pieces are concatenated.&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><p>字符串有许多有用的方法。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="title function_">slice</span>(<span class="number">1</span>)  <span class="comment">// 复制子字符串,得到索引1及其之后的字符串，即：&#x27;bc&#x27;</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">2</span>)   <span class="comment">//得到索引1和2之间的字符串，即：&#x27;b&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;\t xyz  &#x27;</span>.<span class="title function_">trim</span>()  <span class="comment">// 移除空白字符，即：&#x27;xyz&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;mjölnir&#x27;</span>.<span class="title function_">toUpperCase</span>()   <span class="comment">//转成大写，即：&#x27;MJÖLNIR&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;b&#x27;</span>)  <span class="comment">// 查找第一个b的索引，即：1</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;x&#x27;</span>)    <span class="comment">//没有返回-1</span></span><br></pre></td></tr></table></figure><h2 id="八、语句"><a href="#八、语句" class="headerlink" title="八、语句"></a>八、语句</h2><h3 id="条件（Conditionals）"><a href="#条件（Conditionals）" class="headerlink" title="条件（Conditionals）"></a>条件（Conditionals）</h3><p><code>if</code>语句通过布尔条件决定执行那个分支：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (myvar === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// then</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (myvar === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// then</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// else</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (myvar === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// then</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (myvar === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// else-if</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (myvar === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="comment">// else-if</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// else</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的<code>switch</code>语句，furit的值决定那个分支被执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (fruit) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;banana&#x27;</span>:</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;apple&#x27;</span>:</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:  <span class="comment">// 所有其他情况</span></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环（Loops）"><a href="#循环（Loops）" class="headerlink" title="循环（Loops）"></a>循环（Loops）</h3><p>for 循环的格式如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 当条件成立时循环; 下一步操作)</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当条件成立时<code>while</code>循环继续循环它的循环体。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 和上面的for循环相等</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; arr.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[i]);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当条件成立时，<code>do-while</code>循环继续循环。由于条件位于循环体之后，所以循环体总是被至少至少执行一次。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125; <span class="keyword">while</span>(条件);</span><br></pre></td></tr></table></figure><p>在所有的循环中：</p><ul><li>break中断循环</li><li>continue开始一个新的循环迭代</li></ul><h2 id="九、函数"><a href="#九、函数" class="headerlink" title="九、函数"></a>九、函数</h2><p>定义函数的一种方法是通过函数声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">param1, param2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> param1 + param2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码定义一个名称叫做<code>add</code>的函数，有两个参数<code>param1</code>和<code>param2</code>，并且返回参数的和。下面是如何调用这个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">add</span>(<span class="number">6</span>, <span class="number">1</span>)   <span class="comment">//7</span></span><br><span class="line"><span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>)   <span class="comment">//&#x27;ab&#x27;</span></span><br></pre></td></tr></table></figure><p>另一种定义<code>add()</code>函数的方法是通过函数表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="keyword">function</span> (<span class="params">param1, param2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> param1 + param2;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数表达式产生一个值，因此可以直接将函数作为参数传递给其他函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">someOtherFunction</span>(<span class="keyword">function</span> (<span class="params">p1, p2</span>) &#123; ... &#125;);</span><br></pre></td></tr></table></figure><h3 id="函数声明提升"><a href="#函数声明提升" class="headerlink" title="函数声明提升"></a>函数声明提升</h3><p>函数声明会被提升，他们全被移动到当前作用域开始之处。这允许你在函数声明之前调用它们：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">bar</span>();  <span class="comment">// 没问题，bar被提升</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：虽然变量声明也会被提升，但赋值的过程不会被提升：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">bar</span>();  <span class="comment">// 有问题，bar是undefined</span></span><br><span class="line">    <span class="keyword">var</span> bar = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="特殊变量参数"><a href="#特殊变量参数" class="headerlink" title="特殊变量参数"></a>特殊变量参数</h3><p><strong>在<code>JavaScript</code>中你可以调用任意函数并传递任意数量的参数</strong>——语言绝不会“抱怨”（参数检测）。都可以正常工作，然而，使所有参数可访问需要通过特殊变量<code>arguments</code>。<code>arguments</code>看起来像数组，但它没有数组的方法（称为类数组 array-like）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123; <span class="keyword">return</span> <span class="variable language_">arguments</span> &#125;</span><br><span class="line"><span class="keyword">var</span> args = <span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">args.<span class="property">length</span> <span class="comment">//3</span></span><br><span class="line">args[<span class="number">0</span>]  <span class="comment">// 获取索引为0的元素,&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="太多或太少参数"><a href="#太多或太少参数" class="headerlink" title="太多或太少参数"></a>太多或太少参数</h3><p>让我们通过下面的函数探索<code>JavaScript</code>中传递太多或太少参数时如何处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多出的参数将被忽略（可以通过<code>arguments</code>访问）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)    <span class="comment">//a b</span></span><br></pre></td></tr></table></figure><p>缺少的参数将会是<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">f</span>(<span class="string">&#x27;a&#x27;</span>)    <span class="comment">//a undefined</span></span><br><span class="line"><span class="title function_">f</span>() <span class="comment">//undefined undefined</span></span><br></pre></td></tr></table></figure><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>下面是一个常见模式，给参数设置默认值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pair</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    x = x || <span class="number">0</span>;  <span class="comment">// (*)</span></span><br><span class="line">    y = y || <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> [ x, y ];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>（*）</code>这行，如果x是真值（除了：<code>null</code>，<code>undefined</code> 等），         操作符返回x。否则，它返回第二个操作数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">pair</span>()  <span class="comment">//[ 0, 0 ]</span></span><br><span class="line"><span class="title function_">pair</span>(<span class="number">3</span>) <span class="comment">//[ 3, 0 ]</span></span><br><span class="line"><span class="title function_">pair</span>(<span class="number">3</span>, <span class="number">5</span>)  <span class="comment">//[ 3, 5 ]</span></span><br></pre></td></tr></table></figure><h3 id="强制数量"><a href="#强制数量" class="headerlink" title="强制数量"></a>强制数量</h3><p>如果你想强制参数的数量，你可以检测<code>arguments.length</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">pair</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">arguments</span>.<span class="property">length</span> !== <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Need exactly 2 arguments&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="将arguments-转换为数组"><a href="#将arguments-转换为数组" class="headerlink" title="将arguments 转换为数组"></a>将arguments 转换为数组</h3><p><code>arguments</code>不是一个数组，它仅仅是类数组（array-like）：它有一个<code>length</code>属性，并且你可以通过方括号索引方式访问它的元素。然而，你不能移除元素，或在它上面调用任何数组方法。因此，有时你需要将其转换为数组。这就是下面函数的作用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toArray</span>(<span class="params">arrayLikeObject</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [].<span class="property">slice</span>.<span class="title function_">call</span>(arrayLikeObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十、异常处理"><a href="#十、异常处理" class="headerlink" title="十、异常处理"></a>十、异常处理</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch">异常处理</a>最常见的方式像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throwException</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Problem!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">throwException</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);  <span class="comment">// 错误：信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">stack</span>);  <span class="comment">// 非标准，但大部分浏览器支持</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>try分支包裹易出错的代码，如果try分支内部抛出异常，catch分支将会执行。</p><h2 id="十一、严格模式"><a href="#十一、严格模式" class="headerlink" title="十一、严格模式"></a>十一、严格模式</h2><p>严格模式开启检测和一些其他措施，使<code>JavaScript</code>变成更整洁的语言。推荐使用严格模式。为了开启严格模式，只需在<code>JavaScript</code>文件或<code>script</code>标签第一行添加如下语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br></pre></td></tr></table></figure><p>你也可以在每个函数上选择性开启严格模式，只需将上面的代码放在函数的开头：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionInStrictMode</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的两小节看下严格模式的三大好处。</p><h3 id="明确错误"><a href="#明确错误" class="headerlink" title="明确错误"></a>明确错误</h3><p>让我们看一个例子，严格模式给我们明确的错误，否则<code>JavaScript</code>总是静默失败：下面的函数<code>f()</code> 执行一些非法操作，它试图更改所有字符串都有的只读属性——<code>length</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;abc&#x27;</span>.<span class="property">length</span> = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你调用上面的函数，它静默失败，赋值操作被简单忽略。让我们将<code>f()</code>在严格模式下运行：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f_strict</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="string">&#x27;abc&#x27;</span>.<span class="property">length</span> = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在浏览器报给我们一些错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">f_strict</span>()  <span class="comment">// TypeError: Cannot assign to read only property &#x27;length&#x27; of abc</span></span><br></pre></td></tr></table></figure><h3 id="不是方法的函数中的this"><a href="#不是方法的函数中的this" class="headerlink" title="不是方法的函数中的this"></a>不是方法的函数中的this</h3><p>在严格模式下，不作为方法的函数中的<code>this</code>值是<code>undefined</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f_strict</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f_strict</span>() === <span class="literal">undefined</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在非严格模式下，<code>this</code>的值是被称作全局对象（<code>global object</code>）（在浏览器里是<code>window</code>）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">f</span>() === <span class="variable language_">window</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="不再自动创建全局变量"><a href="#不再自动创建全局变量" class="headerlink" title="不再自动创建全局变量"></a>不再自动创建全局变量</h3><p>在非严格模式下，如果你给不存在的变量赋值，<code>JavaScript</code>会自动创建一个全局变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123; foo = <span class="number">5</span> &#125;</span><br><span class="line"><span class="title function_">f</span>()  <span class="comment">// 不会报错</span></span><br><span class="line">foo <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>在严格模式下，这会产生一个错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f_strict</span>(<span class="params"></span>) &#123; <span class="string">&#x27;use strict&#x27;</span>; foo2 = <span class="number">4</span>; &#125;</span><br><span class="line"><span class="title function_">f_strict</span>()  <span class="comment">// ReferenceError: foo2 is not defined</span></span><br></pre></td></tr></table></figure><h3 id="深入阅读-2"><a href="#深入阅读-2" class="headerlink" title="深入阅读"></a>深入阅读</h3><ul><li><a href="http://yanhaijing.com/javascript/2013/12/28/demystifying-this-in-javascript">揭秘javascript中谜一样的this</a></li><li><a href="http://yanhaijing.com/javascript/2014/04/30/javascript-this-keyword">JavaScript中的this关键字</a></li></ul><h2 id="十二、变量作用域和闭包"><a href="#十二、变量作用域和闭包" class="headerlink" title="十二、变量作用域和闭包"></a>十二、变量作用域和闭包</h2><p>在<code>JavaScript</code>中，你必须使用变量之前，通过<code>var</code>声明变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x;</span><br><span class="line">x = <span class="number">3</span>;</span><br><span class="line">y = <span class="number">4</span>;  <span class="comment">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure><p>你可以用一条<code>var</code>语句声明和初始化多个变量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = <span class="number">2</span>, z = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>但我建议每个变量使用一条语句。因此，我将上面的语句重写为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> z = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>由于提升（见下文），最好在函数顶部声明变量。</p><h3 id="变量和函数作用域"><a href="#变量和函数作用域" class="headerlink" title="变量和函数作用域"></a>变量和函数作用域</h3><p>变量的作用域总是整个函数（没有块级作用域）。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> x = -<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>) &#123;  <span class="comment">// (*)</span></span><br><span class="line">        <span class="keyword">var</span> tmp = -x;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp);  <span class="comment">// 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到tmp变量不仅在（*）所在行的语句块存在，它在整个函数内都存在。</p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><p>变量声明会被提升：声明会被移到函数的顶部，但赋值过程不会。举个例子，在下面的函数中<code>（*）</code>行位置声明了一个变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp); <span class="comment">// undefined</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = <span class="number">3</span>;  <span class="comment">// (*)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在内部，上面的函数被执行像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp;  <span class="comment">// declaration is hoisted</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tmp);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">        tmp = <span class="number">3</span>;  <span class="comment">// assignment stays put</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>每个函数保持和函数体内部变量的连接，甚至离开创建它的作用域之后。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createIncrementor</span>(<span class="params">start</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// (*)</span></span><br><span class="line">        <span class="keyword">return</span> start++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>（*）</code>行开始的函数在它创建时保留上下文，并在内部保存一个<code>start</code>活动值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inc = <span class="title function_">createIncrementor</span>(<span class="number">5</span>);</span><br><span class="line"><span class="title function_">inc</span>()   <span class="comment">// 5</span></span><br><span class="line"><span class="title function_">inc</span>() <span class="comment">// 6</span></span><br><span class="line"><span class="title function_">inc</span>()   <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>闭包是一个函数加上和其作用域链的链接。因此，<code>createIncrementor()</code>返回的是一个闭包。</p><h3 id="IIFE：模拟块级作用域"><a href="#IIFE：模拟块级作用域" class="headerlink" title="IIFE：模拟块级作用域"></a>IIFE：模拟块级作用域</h3><p>有时你想模拟一个块，例如你想将变量从全局作用域隔离。完成这个工作的模式叫做 <code>IIFE</code>(立即执行函数表达式(<code>Immediately Invoked Function Expression</code>))：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;  <span class="comment">// 块开始</span></span><br><span class="line">    <span class="keyword">var</span> tmp = ...;  <span class="comment">// 非全局变量</span></span><br><span class="line">&#125;());  <span class="comment">// 块结束</span></span><br></pre></td></tr></table></figure><p>上面你会看到函数表达式被立即执行。外面的括号用来阻止它被解析成函数声明；只有函数表达式能被立即调用。函数体产生一个新的作用域并使<code>tmp</code>变为局部变量。</p><h3 id="闭包实现变量共享"><a href="#闭包实现变量共享" class="headerlink" title="闭包实现变量共享"></a>闭包实现变量共享</h3><p>下面是个经典问题，如果你不知道，会让你费尽思量。因此，先浏览下，对问题有个大概的了解。</p><p>闭包保持和外部变量的连接，有时可能和你想像的行为不一致：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    result.<span class="title function_">push</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> i &#125;);  <span class="comment">// (*)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>]()); <span class="comment">// 5 (不是 1)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">3</span>]()); <span class="comment">// 5 (不是 3)</span></span><br></pre></td></tr></table></figure><p><code>(*)</code>行的返回值总是当前的i值，而不是当函数被创建时的i值。当循环结束后，i的值是5，这是为什么数组中的所有函数的返回值总是一样的。如果你想捕获当前变量的快照，你可以使用<code>IIFE</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    (<span class="keyword">function</span> (<span class="params">i2</span>) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; <span class="keyword">return</span> i2 &#125;);</span><br><span class="line">    &#125;(i));  <span class="comment">// 复制当前的i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深入阅读</p><ul><li><a href="http://yanhaijing.com/javascript/2013/08/30/understanding-scope-and-context-in-javascript">认识javascript中的作用域和上下文</a></li><li><a href="http://yanhaijing.com/javascript/2014/04/30/JavaScript-Scoping-and-Hoisting">JavaScript的作用域和提升机制</a></li><li><a href="http://yanhaijing.com/javascript/2014/04/29/what-is-the-execution-context-in-javascript">了解JavaScript的执行上下文</a></li></ul><h2 id="十三、对象和继承"><a href="#十三、对象和继承" class="headerlink" title="十三、对象和继承"></a>十三、对象和继承</h2><p>和所有的值类型一样，对象有属性。事实上，你可以将对象当作一组属性的集合，每个属性都是一对（键和值）。键是字符串，值可以是任意<code>JavaScript</code>值。到目前为止，我们仅仅见过键是标识符的属性，因为点操作符处理的键必须为标识符。在这节，你讲见到另一种访问属性的方法，能将任意字符串作为键。</p><h3 id="单个对象"><a href="#单个对象" class="headerlink" title="单个对象"></a>单个对象</h3><p>在<code>JavaScript</code>中，你可以直接创建对象，通过对象字面量：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jane = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>,</span><br><span class="line"></span><br><span class="line">    <span class="attr">describe</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Person named &#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面的对象有两个属性：<code>name</code>和<code>describe</code>。你能读（“get”）和 写（“set”）属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jane.<span class="property">name</span>  <span class="comment">// get，&#x27;Jane&#x27;</span></span><br><span class="line">jane.<span class="property">name</span> = <span class="string">&#x27;John&#x27;</span>;  <span class="comment">// set</span></span><br><span class="line">jane.<span class="property">newProperty</span> = <span class="string">&#x27;abc&#x27;</span>;  <span class="comment">// 自动创建</span></span><br></pre></td></tr></table></figure><p>属性是函数如<code>describe</code>可以被当作方法调用。当调用他们时可以在它们内部通过this引用对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jane.<span class="title function_">describe</span>()  <span class="comment">// 调用方法,&#x27;Person named John&#x27;</span></span><br><span class="line">jane.<span class="property">name</span> = <span class="string">&#x27;Jane&#x27;</span>;</span><br><span class="line">jane.<span class="title function_">describe</span>() <span class="comment">// &#x27;Person named Jane&#x27;</span></span><br></pre></td></tr></table></figure><p><code>in</code>操作符用来检测一个属性是否存在：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;newProperty&#x27;</span> <span class="keyword">in</span> jane   <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;foo&#x27;</span> <span class="keyword">in</span> jane   <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>若读取一个不存在的属性，将会得到<code>undefined</code>值。因此上面的两个检查也可以像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jane.<span class="property">newProperty</span> !== <span class="literal">undefined</span>  <span class="comment">// true</span></span><br><span class="line">jane.<span class="property">foo</span> !== <span class="literal">undefined</span>  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>delete</code>操作符用来删除一个属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> jane.<span class="property">newProperty</span> <span class="comment">//true</span></span><br><span class="line"><span class="string">&#x27;newProperty&#x27;</span> <span class="keyword">in</span> jane   <span class="comment">//false</span></span><br></pre></td></tr></table></figure><h3 id="任意键属性"><a href="#任意键属性" class="headerlink" title="任意键属性"></a>任意键属性</h3><p>属性的键可以是任意字符串。到目前为止，我们看到的对象字面量中的和点操作符后的属性关键字。按这种方法你只能使用标识符。如果你想用其他任意字符串作为键名，你必须在对象字面量里加上引号，并使用方括号获取和设置属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="string">&#x27;not an identifier&#x27;</span>: <span class="number">123</span> &#125;;</span><br><span class="line">obj[<span class="string">&#x27;not an identifier&#x27;</span>]    <span class="comment">//123</span></span><br><span class="line">obj[<span class="string">&#x27;not an identifier&#x27;</span>] = <span class="number">456</span>;</span><br></pre></td></tr></table></figure><p>方括号允许你动态计算属性关键字：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">&#x27;name&#x27;</span>;</span><br><span class="line">jane[x]; <span class="comment">// &#x27;Jane&#x27;</span></span><br><span class="line">jane[<span class="string">&#x27;na&#x27;</span>+<span class="string">&#x27;me&#x27;</span>]; <span class="comment">// &#x27;Jane&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="引用方法"><a href="#引用方法" class="headerlink" title="引用方法"></a>引用方法</h3><p>如果你引用一个方法，它将失去和对象的连接。就其本身而言，函数不是方法，其中的<code>this</code>值为<code>undefined</code>（严格模式下）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = jane.<span class="property">describe</span>;</span><br><span class="line"><span class="title function_">func</span>()  <span class="comment">// TypeError: Cannot read property &#x27;name&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>解决办法是使用函数内置的<code>bind()</code>方法。它创建一个新函数，其<code>this</code>值固定为给定的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func2 = jane.<span class="property">describe</span>.<span class="title function_">bind</span>(jane);</span><br><span class="line"><span class="title function_">func2</span>() <span class="comment">// &#x27;Person named Jane&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="方法内部的函数"><a href="#方法内部的函数" class="headerlink" title="方法内部的函数"></a>方法内部的函数</h3><p>每个函数都有一个特殊变量<code>this</code>。如果你在方法内部嵌入函数是很不方便的，因为你不能从函数中访问方法的<code>this</code>。下面是一个例子，我们调用<code>forEach</code>循环一个数组：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jane = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Jane&#x27;</span>,</span><br><span class="line">    <span class="attr">friends</span>: [ <span class="string">&#x27;Tarzan&#x27;</span>, <span class="string">&#x27;Cheeta&#x27;</span> ],</span><br><span class="line">    <span class="attr">logHiToFriends</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">friend</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里的“this”是undefined</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; says hi to &#x27;</span> + friend);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用<code>logHiToFriends</code>会产生错误：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jane.<span class="title function_">logHiToFriends</span>()   <span class="comment">// TypeError: Cannot read property &#x27;name&#x27; of undefined</span></span><br></pre></td></tr></table></figure><p>有两种方法修复这问题。</p><ul><li>将<code>this</code>存储在不同的变量。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logHiToFriends</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">friend</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(that.<span class="property">name</span> + <span class="string">&#x27; says hi to &#x27;</span> + friend);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>forEach的第二个参数允许提供<code>this</code>值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logHiToFriends</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">friend</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; says hi to &#x27;</span> + friend);</span><br><span class="line">    &#125;, <span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>JavaScript</code>中函数表达式经常被用作函数参数。时刻小心函数表达式中的<code>this</code>。</p><h3 id="构造函数：对象工厂"><a href="#构造函数：对象工厂" class="headerlink" title="构造函数：对象工厂"></a>构造函数：对象工厂</h3><p>除了作为“真正”的函数和方法，函数还在JavaScript中扮演第三种角色：<strong>如果通过new操作符调用，他们会变为构造函数，对象的工厂</strong>。构造函数是对其他语言中的类的粗略模拟。约定俗成，构造函数的第一个字母大写。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置实例数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Point</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">dist</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(<span class="variable language_">this</span>.<span class="property">x</span>*<span class="variable language_">this</span>.<span class="property">x</span> + <span class="variable language_">this</span>.<span class="property">y</span>*<span class="variable language_">this</span>.<span class="property">y</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们看到构造函数分为两部分：首先，<code>Point</code>函数设置实例数据。其次，<code>Point.prototype</code>属性包含对象的方法。前者的数据是每个实例私有的，后面的数据是所有实例共享的。</p><p>我们通过new操作符调用<code>Point</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">p.<span class="property">x</span> <span class="comment">//3</span></span><br><span class="line">p.<span class="title function_">dist</span>();    <span class="comment">//5.830951894845301</span></span><br></pre></td></tr></table></figure><p>p是<code>Point</code>的一个实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p <span class="keyword">instanceof</span> <span class="title class_">Point</span>  <span class="comment">//true</span></span><br><span class="line"><span class="keyword">typeof</span> p    <span class="comment">//&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="深入阅读-3"><a href="#深入阅读-3" class="headerlink" title="深入阅读"></a>深入阅读</h3><ul><li><a href="http://yanhaijing.com/javascript/2013/08/23/javascript-inheritance-how-to-shoot-yourself-in-the-foot-with-prototypes">Javascript继承 原型的陷阱</a></li><li><a href="http://yanhaijing.com/javascript/2013/08/30/encapsulation-of-javascript">Javascript 封装问题</a></li></ul><h2 id="十四、数组"><a href="#十四、数组" class="headerlink" title="十四、数组"></a>十四、数组</h2><p>数组是数组元素的序列，能通过整数索引方法数组元素，数组索引从0开始。</p><h3 id="数组字面量"><a href="#数组字面量" class="headerlink" title="数组字面量"></a>数组字面量</h3><p>数组字面量创建数组很方便：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> arr = [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> ];</span><br></pre></td></tr></table></figure><p>上面的数组有三个元素：分别是字符串“a”，“b”， “c”。你可以通过整数索引访问它们：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arr[<span class="number">0</span>]  <span class="comment">//&#x27;a&#x27;</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&#x27;x&#x27;</span>;</span><br><span class="line">arr</span><br><span class="line"><span class="comment">// [ &#x27;x&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br></pre></td></tr></table></figure><p><code>length</code>属性总表示一个数组有多少项元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="property">length</span>    <span class="comment">//3</span></span><br></pre></td></tr></table></figure><p>除此之外它也可以用来从数组上移除尾部元素：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="property">length</span> = <span class="number">2</span>; </span><br><span class="line">arr <span class="comment">// [ &#x27;x&#x27;, &#x27;b&#x27; ]</span></span><br></pre></td></tr></table></figure><p><code>in</code>操作符也可以在数组上工作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">in</span> arr <span class="comment">// arr在索引为1处是否有元素？,true</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">in</span> arr <span class="comment">// arr在索引为5处是否有元素？false</span></span><br></pre></td></tr></table></figure><p>值得注意的是数组是对象，因此可以有对象属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="property">foo</span> = <span class="number">123</span>;</span><br><span class="line">arr.<span class="property">foo</span>   <span class="comment">// 123</span></span><br></pre></td></tr></table></figure><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><p>数组有许多方法。举些例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment">// 复制元素，[ &#x27;b&#x27; ]</span></span><br><span class="line">arr.<span class="title function_">slice</span>(<span class="number">1</span>)    <span class="comment">// [ &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">push</span>(<span class="string">&#x27;x&#x27;</span>)  <span class="comment">// 在末尾添加一个元素，4</span></span><br><span class="line">arr <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;x&#x27; ]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">pop</span>()  <span class="comment">// 移除最后一个元素，&#x27;x&#x27;</span></span><br><span class="line">arr   <span class="comment">// [ &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">shift</span>()  <span class="comment">// 移除第一个元素，&#x27;a&#x27;</span></span><br><span class="line">arr <span class="comment">// [ &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&#x27;x&#x27;</span>)  <span class="comment">// 在前面添加一个元素，3</span></span><br><span class="line">arr <span class="comment">// [ &#x27;x&#x27;, &#x27;b&#x27;, &#x27;c&#x27; ]</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;b&#x27;</span>)  <span class="comment">// 查找给定项在数组中的索引，若不存在返回-1，</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;y&#x27;</span>)  <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>)  <span class="comment">// 将元素拼接为一个字符串，&#x27;x-b-c&#x27;</span></span><br><span class="line">arr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)    <span class="comment">// &#x27;xbc&#x27;</span></span><br><span class="line">arr.<span class="title function_">join</span>()  <span class="comment">// &#x27;x,b,c&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>有几种方法可以遍历数组元素。其中两个最重要的是<code>forEach</code>和<code>map</code>。</p><p><code>forEach</code>遍历整个数组，并将当前元素和它的索引传递给一个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[ <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span> ].<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">elem, index</span>) &#123;  <span class="comment">// (*)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(index + <span class="string">&#x27;. &#x27;</span> + elem);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码的输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.</span> a</span><br><span class="line"><span class="number">1.</span> b</span><br><span class="line"><span class="number">2.</span> c</span><br></pre></td></tr></table></figure><p>注意<code>（*）</code>行的函数参数是可省略的。例如：它可以只有一个参数<code>elem</code>。</p><p><code>map</code>创建一个新数组，通过给每个存在数组元素应用一个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">x</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span> x*x </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [ 1, 4, 9 ]</span></span><br></pre></td></tr></table></figure><h3 id="深入阅读-4"><a href="#深入阅读-4" class="headerlink" title="深入阅读"></a>深入阅读</h3><ul><li><a href="http://yanhaijing.com/javascript/2014/01/17/fun-with-javascript-native-array-functions">有趣的javascript原生数组函数</a></li></ul><h2 id="十五、正则表达式"><a href="#十五、正则表达式" class="headerlink" title="十五、正则表达式"></a>十五、正则表达式</h2><p><code>JavaScript</code>内建支持正则表达式。他们被双斜线分隔：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^abc$/</span><br><span class="line"><span class="regexp">/[A-Za-z0-9]+/</span></span><br></pre></td></tr></table></figure><h3 id="方法-test-：测试是否匹配"><a href="#方法-test-：测试是否匹配" class="headerlink" title="方法 test()：测试是否匹配"></a>方法 test()：测试是否匹配</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/^a+b+$/.<span class="title function_">test</span>(<span class="string">&#x27;aaab&#x27;</span>)   <span class="comment">// true</span></span><br><span class="line">/^a+b+$/.<span class="title function_">test</span>(<span class="string">&#x27;aaa&#x27;</span>)    <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="方法-exec-：匹配和捕获组"><a href="#方法-exec-：匹配和捕获组" class="headerlink" title="方法 exec()：匹配和捕获组"></a>方法 exec()：匹配和捕获组</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/<span class="title function_">a</span>(b+)a/.<span class="title function_">exec</span>(<span class="string">&#x27;_abbba_aba_&#x27;</span>)    <span class="comment">// [ &#x27;abbba&#x27;, &#x27;bbb&#x27; ]</span></span><br></pre></td></tr></table></figure><p>返回的数组第一项（索引为0）是完整匹配，捕获的第一个分组在第二项（索引为1），等。有一种方法可以反复调用获取所有匹配。</p><h3 id="方法-replace-：搜索并替换"><a href="#方法-replace-：搜索并替换" class="headerlink" title="方法 replace()：搜索并替换"></a>方法 replace()：搜索并替换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&lt;a&gt; &lt;bbb&gt;&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/&lt;(.*?)&gt;/g</span>, <span class="string">&#x27;[$1]&#x27;</span>) <span class="comment">// &#x27;[a] [bbb]&#x27;</span></span><br></pre></td></tr></table></figure><p><code>replace</code>的第一个参数必须是正则表达式，并且开启全局搜索（<code>/g</code>标记），否则仅第一个匹配项会被替换。有一种方法使用一个函数来计算替换项。</p><h2 id="十六、数学"><a href="#十六、数学" class="headerlink" title="十六、数学"></a>十六、数学</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math">Math</a>是一个有算数功能的对象。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">abs</span>(-<span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">3</span>, <span class="number">2</span>) <span class="comment">// 3^2 = 9</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">2</span>, -<span class="number">1</span>, <span class="number">5</span>) <span class="comment">//5</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.9</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">cos</span>(<span class="title class_">Math</span>.<span class="property">PI</span>)  <span class="comment">// 预定义常量π，-1</span></span><br></pre></td></tr></table></figure><h2 id="十七、标准库的其他功能"><a href="#十七、标准库的其他功能" class="headerlink" title="十七、标准库的其他功能"></a>十七、标准库的其他功能</h2><p><code>JavaScript</code>标准库相对简单，但有很多其他东西你可以使用：</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date">Date</a>：日期构造函数，主要功能有转换和创建日期字符串，访问日期组成部分（年，小时等）。<br><a href="http://www.2ality.com/2011/08/json-api.html">JSON</a>：一个对象，功能是转换和生成<code>JSON</code>数据。<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/console">console.*</a>方法：浏览器的具体方法，不是语言成分的部分，但他们也可以在<a href="https://nodejs.org/">Node.js</a>中工作。</p><h2 id="十八、下一步学什么？"><a href="#十八、下一步学什么？" class="headerlink" title="十八、下一步学什么？"></a>十八、下一步学什么？</h2><p>在你学会了这篇文章的基础教程后，你可以转到大部分章节末尾提到的高级教程。此外，我建议你看下面的资源：</p><ul><li>Style guides: I have written <a href="http://www.2ality.com/2013/07/meta-style-guide.html">a guide to style guides</a></li><li><a href="http://underscorejs.org/">Underscore.js</a>: 一个弥补JavaScript标准库缺少的功能的库</li><li><a href="http://jsbooks.revolunet.com/">JSbooks – free JavaScript books</a></li><li><a href="http://uptodate.frontendrescue.org/">Frontend rescue: how to keep up to date on frontend technologies</a></li><li><a href="http://yanhaijing.com/">http://yanhaijing.com</a> 当然还有我的博客也非常不错哦</li><li><a href="http://yanhaijing.com/es5">http://yanhaijing.com/es5</a> 如果你想成为高手，我建议阅读<code>ecmascript</code>规范</li><li><a href="http://yanhaijing.com/javascript/2013/12/11/24-JavaScript-best-practices-for-beginners">给javascript初学者的24条最佳实践</a></li><li><a href="http://yanhaijing.com/javascript/2014/04/23/seven-javascript-quirks-i-wish-id-known-about">我希望我知道的七个JavaScript技巧</a></li></ul><p>参考自原文：<a href="http://www.2ality.com/2013/06/basic-javascript.html">http://www.2ality.com/2013/06/basic-javascript.html</a><br>参考自译文：<a href="http://yanhaijing.com/basejs/">http://yanhaijing.com/basejs/</a></p><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-theme-matery介绍</title>
      <link href="/2021/06/29/computer/others/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/"/>
      <url>/2021/06/29/computer/others/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/</url>
      
        <content type="html"><![CDATA[<p><a href="README.md">English Document</a> | <a href="https://blinkfox.github.io/">演示示例</a> | QQ交流群:<code>926552981</code></p><blockquote><p>这是一个采用<code>Material Design</code>和响应式设计的 Hexo 博客主题。</p></blockquote><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>当你看到这里的时候，应该已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了。如果还没有的话，不妨使用 Hexo 和 <a href="https://www.appinn.com/markdown/">Markdown</a> 来写博客和文章。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>Git clone</code> 命令来下载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/blinkfox/hexo-theme-matery.git</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 18:23:38</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情连接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;friends&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">friends</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-12-12 21:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;friends&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;friends&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;码酱&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;introduction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我不是大佬，只是在追寻大佬的脚步&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://luokangyuan.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;前去学习&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://image.luokangyuan.com/4027734.jpeg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;闪烁之狐&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;introduction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://blinkfox.github.io/&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;前去学习&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://image.luokangyuan.com/avatar.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ja_rome&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;introduction&quot;</span><span class="punctuation">:</span> <span class="string">&quot;平凡的脚步也可以走出伟大的行程&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ttps://me.csdn.net/jlh912008548&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;前去学习&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <a href="https://github.com/ele828/hexo-prism-plugin">hexo-prism-plugin</a> 的 Hexo 插件来做代码高亮，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -S hexo-prism-plugin</span><br></pre></td></tr></table></figure><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并新增 <code>prism</code> 插件相关的配置，主要配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">prism_plugin:</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">&#x27;preprocess&#x27;</span>    <span class="comment"># realtime/preprocess</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">&#x27;tomorrow&#x27;</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span>    <span class="comment"># default false</span></span><br><span class="line">  <span class="attr">custom_css:</span></span><br></pre></td></tr></table></figure><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><h3 id="中文链接转拼音（可选的）"><a href="#中文链接转拼音（可选的）" class="headerlink" title="中文链接转拼音（可选的）"></a>中文链接转拼音（可选的）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink_pinyin:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separator:</span> <span class="string">&#x27;-&#x27;</span> <span class="comment"># default: &#x27;-&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordCount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 将这个值设置为 true 即可.</span></span><br><span class="line">  <span class="attr">postWordCount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">totalCount:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/blinkfox&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tooltipped&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">data-tooltip</span>=<span class="string">&quot;访问我的GitHub&quot;</span> <span class="attr">data-position</span>=<span class="string">&quot;top&quot;</span> <span class="attr">data-delay</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-github&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fa-facebook</code></li><li>Twitter: <code>fa-twitter</code></li><li>Google-plus: <code>fa-google-plus</code></li><li>Linkedin: <code>fa-linkedin</code></li><li>Tumblr: <code>fa-tumblr</code></li><li>Medium: <code>fa-medium</code></li><li>Slack: <code>fa-slack</code></li><li>新浪微博: <code>fa-weibo</code></li><li>微信: <code>fa-wechat</code></li><li>QQ: <code>fa-qq</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>4.7.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，就必须开启音乐的播放配置和音乐数据的文件。</p><p>首先，在你的博客 <code>source</code> 目录下的 <code>_data</code> 目录（没有的话就新建一个）中新建 <code>musics.json</code> 文件，文件内容如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;五月雨变奏电音&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;artist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AnimeVibe&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://xxx.com/music1.mp3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://xxx.com/music-cover1.png&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Take me hand&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;artist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;DAISHI DANCE,Cecile Corbel&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/medias/music/music2.mp3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/medias/music/cover2.png&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Shape of You&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;artist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;J.Fla&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://xxx.com/music3.mp3&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;cover&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://xxx.com/music-cover3.png&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：以上 JSON 中的属性：<code>name</code>、<code>artist</code>、<code>url</code>、<code>cover</code> 分别表示音乐的名称、作者、音乐文件地址、音乐封面。</p></blockquote><p>然后，在主题的 <code>_config.yml</code> 配置文件中激活配置即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否在首页显示音乐.</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">showTitle:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">听听音乐</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span> <span class="comment"># 是否开启吸底模式</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">false</span> <span class="comment"># 是否自动播放</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">&#x27;#42b983&#x27;</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="string">&#x27;all&#x27;</span> <span class="comment"># 音频循环播放, 可选值: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27;</span></span><br><span class="line">  <span class="attr">order:</span> <span class="string">&#x27;list&#x27;</span> <span class="comment"># 音频循环顺序, 可选值: &#x27;list&#x27;, &#x27;random&#x27;</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="string">&#x27;auto&#x27;</span> <span class="comment"># 预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span></span><br><span class="line">  <span class="attr">volume:</span> <span class="number">0.7</span> <span class="comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br><span class="line">  <span class="attr">listFolded:</span> <span class="literal">false</span> <span class="comment"># 列表默认折叠</span></span><br><span class="line">  <span class="attr">listMaxHeight:</span> <span class="comment"># 列表最大高度</span></span><br></pre></td></tr></table></figure><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-07 09:25:00</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-07 09:25:00</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">赵奇</span></span><br><span class="line"><span class="attr">img:</span> <span class="string">/source/images/xxx.jpg</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">cover:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">coverImg:</span> <span class="string">/images/1.jpg</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Markdown</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Typora</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Markdown</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-1.png" alt="首页"></p><p><img src="https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="https://statics.sh1a.qingstor.com/2018/12/02/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span></span><br><span class="line"><span class="selector-class">.bg-color</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#4cbf30</span> <span class="number">0%</span>, <span class="number">#0f9d58</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> rainbow &#123;</span><br><span class="line">   <span class="comment">/* 动态切换背景颜色. */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rainbow &#123;</span><br><span class="line">    <span class="comment">/* 动态切换背景颜色. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.bg-cover&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background-image&#x27;</span>, <span class="string">&#x27;url(/medias/banner/&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getDay</span>() + <span class="string">&#x27;.jpg)&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本记录"><a href="#版本记录" class="headerlink" title="版本记录"></a>版本记录</h2><ul><li>v1.0.0<ul><li>新增了所有基础功能；</li></ul></li><li>v1.0.1<ul><li>调整 <code>css</code>、<code>js</code> 的文件请求路径在主题的<code>_config.yml</code>中配置，便于你更快捷的配置自己的 CDN；</li><li>新增代码是否折行为可配置，默认为折行；</li><li>默认激活 <code>TOC</code> 功能，并新增为某篇文章关闭 <code>TOC</code> 的 <code>Front-matter</code> 配置选项；</li><li>修复文章滚动时，高亮的目录选项不准确的问题；</li><li><code>IOS</code>下移除搜索框自动获得焦点属性，防止自动获得焦点后导致视图上移；</li></ul></li><li>v1.0.2<ul><li>升级了 <a href="https://materializecss.com/">Materialize</a> 框架版本为<code>1.0.0</code>，重构和修改了升级过程中的部分文件或问题；</li><li>新增了首页封面的全屏轮播特效，可以将更重要的文章设置到首页轮播中；</li><li>修复首页第一个按钮是中文的问题</li><li>修复了 iPhone 上点击搜索输入获取焦点的问题；</li><li>修复了 iPhone 上输入框获取焦点后页面放大的问题；</li><li>修复一些文章或 UI 显示问题；</li></ul></li></ul><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> hexo-theme-matery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码整洁之道内容概要</title>
      <link href="/2021/06/29/computer/common/dai-ma-zheng-ji-zhi-dao-nei-rong-gai-yao/"/>
      <url>/2021/06/29/computer/common/dai-ma-zheng-ji-zhi-dao-nei-rong-gai-yao/</url>
      
        <content type="html"><![CDATA[<p>读了代码整洁之道，觉得这本书写的很好，所以就将里面自己觉得很经典的内容记录下来，作为自己以后写代码的标准和准则。同时也为那些曾经困惑过的人一点参考吧！</p><h2 id="一、在正式开始之前，我们先思考几个几个问题："><a href="#一、在正式开始之前，我们先思考几个几个问题：" class="headerlink" title="一、在正式开始之前，我们先思考几个几个问题："></a>一、在正式开始之前，我们先思考几个几个问题：</h2><h3 id="1-需求与代码哪个重要？"><a href="#1-需求与代码哪个重要？" class="headerlink" title="1.需求与代码哪个重要？"></a>1.需求与代码哪个重要？</h3><p>答：并不是所有的产品都能提出合理的需求，当你面对一个提出不合理需求的产品的时候，你需要坚持自己的原则，不能妥协。</p><h3 id="2-易读和易懂是一回事吗？"><a href="#2-易读和易懂是一回事吗？" class="headerlink" title="2.易读和易懂是一回事吗？"></a>2.易读和易懂是一回事吗？</h3><p>答：易读的代码和易懂的代码是有区别的，不是易读的代码就是易懂的代码。</p><h3 id="3-什么是测试驱动代码？"><a href="#3-什么是测试驱动代码？" class="headerlink" title="3.什么是测试驱动代码？"></a>3.什么是测试驱动代码？</h3><p>答：测试驱动代码，你写的代码要可以执行单元测试。如果你发现你的代码很难写单元测试，那么你就要思考你的代码是不是已经不整洁了，或者说已经乱成一团了。</p><h3 id="4-什么是简单的代码？"><a href="#4-什么是简单的代码？" class="headerlink" title="4.什么是简单的代码？"></a>4.什么是简单的代码？</h3><p>答：<br>1.能通过所有测试<br>2.没有重复代码<br>3.体现系统中全部设计理念<br>4.包含尽量少的实体，包括，类，函数，方法等</p><p>如果某段代码在程序设计中反复出现，就证明想法在代码中没有很好的体现出来。总之，不要重复代码，只做一件事，表达力，小规模抽象。</p><h2 id="二、第二章-有意义的命名"><a href="#二、第二章-有意义的命名" class="headerlink" title="二、第二章 有意义的命名"></a>二、第二章 有意义的命名</h2><h3 id="1-名副其实"><a href="#1-名副其实" class="headerlink" title="1.名副其实"></a>1.名副其实</h3><p>变量，函数或类的名称应该已经答复了所有的大问题。它应该告诉你，它为什么会存在，它做什么事情，应该怎么用。如果名称需要注释来补充，那么就不算名副其实。</p><h3 id="2-避免误导"><a href="#2-避免误导" class="headerlink" title="2.避免误导"></a>2.避免误导</h3><p>必须避免留下掩藏代码本意的错误线索。</p><h3 id="3-做有意义的区分"><a href="#3-做有意义的区分" class="headerlink" title="3.做有意义的区分"></a>3.做有意义的区分</h3><p>只要体现出有意义的区分，使用a和the这样的前缀就没有错。废话就是冗余。</p><h3 id="4-使用读得出来的名称"><a href="#4-使用读得出来的名称" class="headerlink" title="4.使用读得出来的名称"></a>4.使用读得出来的名称</h3><p>不要用傻乎乎的自造词，而不是恰当的英语词。</p><h3 id="5-使用可搜索的名称"><a href="#5-使用可搜索的名称" class="headerlink" title="5.使用可搜索的名称"></a>5.使用可搜索的名称</h3><p>使用便于搜索的名字。</p><h3 id="6-避免使用编码"><a href="#6-避免使用编码" class="headerlink" title="6.避免使用编码"></a>6.避免使用编码</h3><p>把类型或者作用域编进名称里面，徒然增加了解码的负担。没理由要求每位新人都在弄清要应付的代码之外，还要再搞懂另一种编码”语言”。</p><h3 id="7-避免思维映射"><a href="#7-避免思维映射" class="headerlink" title="7.避免思维映射"></a>7.避免思维映射</h3><p>不应当让读者在脑中把你的名称翻译为他们熟知的名称，尤其是在经常出现在选择是使用问题领域术语还是解决方案领域术语的时候。</p><h3 id="8-类名或对象名最好使用名词或者名词短语"><a href="#8-类名或对象名最好使用名词或者名词短语" class="headerlink" title="8.类名或对象名最好使用名词或者名词短语"></a>8.类名或对象名最好使用名词或者名词短语</h3><h3 id="9-方法名最好使用动词或者动词短语"><a href="#9-方法名最好使用动词或者动词短语" class="headerlink" title="9.方法名最好使用动词或者动词短语"></a>9.方法名最好使用动词或者动词短语</h3><h3 id="10-别扮可爱"><a href="#10-别扮可爱" class="headerlink" title="10.别扮可爱"></a>10.别扮可爱</h3><p>命名一定要通俗易懂。</p><h3 id="11-每一个概念对应一个词"><a href="#11-每一个概念对应一个词" class="headerlink" title="11.每一个概念对应一个词"></a>11.每一个概念对应一个词</h3><p>给每个抽象概念选择一个词，并一以贯之</p><h3 id="12-别用双关语词"><a href="#12-别用双关语词" class="headerlink" title="12.别用双关语词"></a>12.别用双关语词</h3><p>避免将同一个词用于不同目的，遵循一词一义的原则</p><h3 id="13-使用解决方案领域名"><a href="#13-使用解决方案领域名" class="headerlink" title="13.使用解决方案领域名"></a>13.使用解决方案领域名</h3><h3 id="14-使用源自所涉领域名"><a href="#14-使用源自所涉领域名" class="headerlink" title="14.使用源自所涉领域名"></a>14.使用源自所涉领域名</h3><h3 id="15-添加有意义的语境"><a href="#15-添加有意义的语境" class="headerlink" title="15.添加有意义的语境"></a>15.添加有意义的语境</h3><p>在一个bean中定义变量名的时候，变量名一定是基于实际使用场景。</p><h3 id="16-不要添加没用的语境"><a href="#16-不要添加没用的语境" class="headerlink" title="16.不要添加没用的语境"></a>16.不要添加没用的语境</h3><h2 id="三、第三章-函数"><a href="#三、第三章-函数" class="headerlink" title="三、第三章 函数"></a>三、第三章 函数</h2><h3 id="1-短小"><a href="#1-短小" class="headerlink" title="1.短小"></a>1.短小</h3><p>函数第一规则是要短小。第二条规则是还要更短小。</p><h3 id="2-只做一件事"><a href="#2-只做一件事" class="headerlink" title="2.只做一件事"></a>2.只做一件事</h3><ul><li>函数应该做一件事。做好这件事。只做一件事。如果可以从你的函数中还能拆分出一个函数，该函数不仅只是单纯地重新诠释其实现，那么你设计的函数就不是一个好的函数。</li><li>函数中的区段，如果函数被切分了多个区段，这就证明该函数做的事情太多了。</li></ul><h3 id="3-每个函数一个抽象层级"><a href="#3-每个函数一个抽象层级" class="headerlink" title="3.每个函数一个抽象层级"></a>3.每个函数一个抽象层级</h3><h3 id="4-switch语句"><a href="#4-switch语句" class="headerlink" title="4.switch语句"></a>4.switch语句</h3><p>确保每个switch都埋藏在较低的抽象层级，而且永远不重复。</p><h3 id="5-使用描述性的名称"><a href="#5-使用描述性的名称" class="headerlink" title="5.使用描述性的名称"></a>5.使用描述性的名称</h3><p>命名方式要保持一致。使用与模块名一脉相承的短语、名词和动词给函数命名。例如：includeSetupPages。</p><h3 id="6-函数参数"><a href="#6-函数参数" class="headerlink" title="6.函数参数"></a>6.函数参数</h3><ul><li>最理想的函数参数的数量是零个，其次是一，再次是二，应尽量避免三。有足够的理由才能用上三个以上的参数。</li><li>如果函数看来需要两个，三个或者三个以上参数，就说明其中一些参数应该封装为类了。</li><li>函数和函数的参数命名一般是动名词比较好。</li></ul><h3 id="7-无副作用"><a href="#7-无副作用" class="headerlink" title="7.无副作用"></a>7.无副作用</h3><h3 id="8-分割指令与查询"><a href="#8-分割指令与查询" class="headerlink" title="8.分割指令与查询"></a>8.分割指令与查询</h3><p>函数要么做什么事，要么回答什么事，但二者不可兼得</p><h3 id="9-使用异常替代返回错误码"><a href="#9-使用异常替代返回错误码" class="headerlink" title="9.使用异常替代返回错误码"></a>9.使用异常替代返回错误码</h3><ul><li>返回错误码的时候，就是在要求调用者立刻处理错误。</li><li>如果使用异常替代返回错误码，错误处理代码就能从住路径代码中分离出来，得到简化。</li><li>抽离try/catch代码块</li></ul><h3 id="10-别重复自己"><a href="#10-别重复自己" class="headerlink" title="10.别重复自己"></a>10.别重复自己</h3><h3 id="11-结构化编程"><a href="#11-结构化编程" class="headerlink" title="11.结构化编程"></a>11.结构化编程</h3><h2 id="四、第四章-注释"><a href="#四、第四章-注释" class="headerlink" title="四、第四章 注释"></a>四、第四章 注释</h2><h3 id="1-如果你代码写的足够好的话，可以让人一看就懂，那么你就不需要再写注释。如果你的代码需要注释，那么你就需要想想是不是你的表达水平有问题。"><a href="#1-如果你代码写的足够好的话，可以让人一看就懂，那么你就不需要再写注释。如果你的代码需要注释，那么你就需要想想是不是你的表达水平有问题。" class="headerlink" title="1.如果你代码写的足够好的话，可以让人一看就懂，那么你就不需要再写注释。如果你的代码需要注释，那么你就需要想想是不是你的表达水平有问题。"></a>1.如果你代码写的足够好的话，可以让人一看就懂，那么你就不需要再写注释。如果你的代码需要注释，那么你就需要想想是不是你的表达水平有问题。</h3><h3 id="2-真正好的注释是想办法不用写注释，那么什么样的注释需要写呢？"><a href="#2-真正好的注释是想办法不用写注释，那么什么样的注释需要写呢？" class="headerlink" title="2.真正好的注释是想办法不用写注释，那么什么样的注释需要写呢？"></a>2.真正好的注释是想办法不用写注释，那么什么样的注释需要写呢？</h3><ul><li>法律信息</li><li>提供信息的注释</li><li>提供意图的解释</li><li>阐释</li><li>警告</li><li>TODO注释</li><li>TODO是一种程序要认为应该要做的，但是由于某种原因没有做的</li><li>放大,放大某些看似不合理的地方</li></ul><h2 id="五、第六章-对象和数据结构"><a href="#五、第六章-对象和数据结构" class="headerlink" title="五、第六章 对象和数据结构"></a>五、第六章 对象和数据结构</h2><h3 id="1-得墨忒定律"><a href="#1-得墨忒定律" class="headerlink" title="1.得墨忒定律"></a>1.得墨忒定律</h3><p>模块不应该了解他所操作对象的内部情形。对象隐藏数据曝露操作，这就意味着对象不应该通过存取器曝露其内部结构。</p><h2 id="六、第七章-错误处理"><a href="#六、第七章-错误处理" class="headerlink" title="六、第七章 错误处理"></a>六、第七章 错误处理</h2><h3 id="1-将业务逻辑和出错处理一定要隔离开，但是并不是所有的情况都试用，在不适用的情况下我们可以创建一个配置对象将特殊情况给予返回。"><a href="#1-将业务逻辑和出错处理一定要隔离开，但是并不是所有的情况都试用，在不适用的情况下我们可以创建一个配置对象将特殊情况给予返回。" class="headerlink" title="1.将业务逻辑和出错处理一定要隔离开，但是并不是所有的情况都试用，在不适用的情况下我们可以创建一个配置对象将特殊情况给予返回。"></a>1.将业务逻辑和出错处理一定要隔离开，但是并不是所有的情况都试用，在不适用的情况下我们可以创建一个配置对象将特殊情况给予返回。</h3><h3 id="2-异常处理不能过多的曝露实现细节，主要提现在异常抛出的栈信息上。"><a href="#2-异常处理不能过多的曝露实现细节，主要提现在异常抛出的栈信息上。" class="headerlink" title="2.异常处理不能过多的曝露实现细节，主要提现在异常抛出的栈信息上。"></a>2.异常处理不能过多的曝露实现细节，主要提现在异常抛出的栈信息上。</h3><h2 id="七、第八章-边界"><a href="#七、第八章-边界" class="headerlink" title="七、第八章 边界"></a>七、第八章 边界</h2><h3 id="1-整洁的边界，边界上的代码要清晰的分割和定义了期望的测试。应该避免我们的代码过多地了解第三方代码中的特定信息。"><a href="#1-整洁的边界，边界上的代码要清晰的分割和定义了期望的测试。应该避免我们的代码过多地了解第三方代码中的特定信息。" class="headerlink" title="1.整洁的边界，边界上的代码要清晰的分割和定义了期望的测试。应该避免我们的代码过多地了解第三方代码中的特定信息。"></a>1.整洁的边界，边界上的代码要清晰的分割和定义了期望的测试。应该避免我们的代码过多地了解第三方代码中的特定信息。</h3><h2 id="八、第九章-单元测试"><a href="#八、第九章-单元测试" class="headerlink" title="八、第九章 单元测试"></a>八、第九章 单元测试</h2><h3 id="1-TDD三定律"><a href="#1-TDD三定律" class="headerlink" title="1.TDD三定律"></a>1.TDD三定律</h3><ul><li>在编写不能通过的单元测试前，不可编写生产代码。</li><li>只可编写刚好无法通过的单元测试，不能编译也算不通过</li><li>只可编写刚好足以通过当前失败测试的生产代码</li></ul><h3 id="2-整洁测试三要素"><a href="#2-整洁测试三要素" class="headerlink" title="2.整洁测试三要素"></a>2.整洁测试三要素</h3><ul><li>可读性</li><li>可读性</li><li>可读性</li></ul><h3 id="3-整洁测试的五条原则："><a href="#3-整洁测试的五条原则：" class="headerlink" title="3.整洁测试的五条原则："></a>3.整洁测试的五条原则：</h3><ul><li>快速，测试应该够快</li><li>独立，测试应该相互独立</li><li>可重复，测试应当可在任何环境中重复通过。</li><li>自足验证，测试应该有布尔值输出，无论测试是成功还是失败，不应该人工通过log来确认测试是否成功或者失败。</li><li>及时，测试应及时编写。单元测试应该恰好在使其通过的生产代码之前编写。如果在编写生产代码之后编写测试，你会发现生产代码难以测试。你可能会认为某些生产代码本身难以测试。你可能不会去设计可测试的代码。</li></ul><h2 id="九、第十章-类"><a href="#九、第十章-类" class="headerlink" title="九、第十章 类"></a>九、第十章 类</h2><h3 id="1-单一权责原则，类或者模块应有且只有一条加以修改的理由。"><a href="#1-单一权责原则，类或者模块应有且只有一条加以修改的理由。" class="headerlink" title="1.单一权责原则，类或者模块应有且只有一条加以修改的理由。"></a>1.单一权责原则，类或者模块应有且只有一条加以修改的理由。</h3><h3 id="2-内聚，如果一个类中的每个变量都被每个方法所使用，则该类具有最大的内聚性。内聚性高，意味着类中的方法和变量相互依赖，相互结合成一个逻辑整体。"><a href="#2-内聚，如果一个类中的每个变量都被每个方法所使用，则该类具有最大的内聚性。内聚性高，意味着类中的方法和变量相互依赖，相互结合成一个逻辑整体。" class="headerlink" title="2.内聚，如果一个类中的每个变量都被每个方法所使用，则该类具有最大的内聚性。内聚性高，意味着类中的方法和变量相互依赖，相互结合成一个逻辑整体。"></a>2.内聚，如果一个类中的每个变量都被每个方法所使用，则该类具有最大的内聚性。内聚性高，意味着类中的方法和变量相互依赖，相互结合成一个逻辑整体。</h3><h2 id="十、第十一章-系统"><a href="#十、第十一章-系统" class="headerlink" title="十、第十一章 系统"></a>十、第十一章 系统</h2><h3 id="1-将系统的构造与使用分开"><a href="#1-将系统的构造与使用分开" class="headerlink" title="1.将系统的构造与使用分开"></a>1.将系统的构造与使用分开</h3><p>软件系统应将起始过程和启始过程之后的运行时逻辑分离开，在起始过程中构建应用对象，也会存在相互缠结的依赖关系。（延迟初始化可以加快程序运行速度）</p><h4 id="1-1分解main"><a href="#1-1分解main" class="headerlink" title="1.1分解main"></a>1.1分解main</h4><p>将程序的构造放到main，并使其与运行时逻辑分开，main只管构造并将构造后的数据对象发送给各个应用，或者被各个应用使用。但是，不参与运行时的任何逻辑控制。</p><h4 id="1-2工厂模式"><a href="#1-2工厂模式" class="headerlink" title="1.2工厂模式"></a>1.2工厂模式</h4><p>使用该模式可以将系统构造和系统运行时逻辑分开。</p><h4 id="1-3依赖注入（需要强化理解）"><a href="#1-3依赖注入（需要强化理解）" class="headerlink" title="1.3依赖注入（需要强化理解）"></a>1.3依赖注入（需要强化理解）</h4><h4 id="1-4扩容"><a href="#1-4扩容" class="headerlink" title="1.4扩容"></a>1.4扩容</h4><p>“一开始就做对系统”纯属神话。反之，我们应该只去实现今天的用户故事，然后重构，明天再扩展系统，实现新用户的故事。这就是迭代和增量敏捷的精髓所在。测试驱动开发，重构以及他们打造出的整洁的代码。</p><h4 id="1-5测试驱动系统架构"><a href="#1-5测试驱动系统架构" class="headerlink" title="1.5测试驱动系统架构"></a>1.5测试驱动系统架构</h4><p>最佳的系统架构由模块化的关注面领域组成，每个关注面均用纯编程语言对象实现。不同的领域之间用最不具有侵害性的方面或类方面工具结合起来。这种架构就能测试驱动，就像代码一样。(需要关注面向切片编程(POJO))</p><h4 id="1-6优化决策"><a href="#1-6优化决策" class="headerlink" title="1.6优化决策"></a>1.6优化决策</h4><p>模块化和关注面切分成就了分散化管理和决策。在巨大的系统中，不管是一座城市或是一个软件项目，无人能做所有的决策。最好是授权给最有资格的人。拥有模块化关注面的POJO系统提供的敏捷能力，允许我们基于最新的知识做出优化的，时机刚好的决策。决策的复杂性降低了。</p><h2 id="十一、第十二章-迭进"><a href="#十一、第十二章-迭进" class="headerlink" title="十一、第十二章 迭进"></a>十一、第十二章 迭进</h2><h3 id="1-通过迭进设计达到代码整洁的目的："><a href="#1-通过迭进设计达到代码整洁的目的：" class="headerlink" title="1. 通过迭进设计达到代码整洁的目的："></a>1. 通过迭进设计达到代码整洁的目的：</h3><p>通过这几个原则可以让你的设计变简单（DIP，SRP）</p><ul><li>运行所有测试</li><li>不可重复，</li><li>表达了程序员的意图</li><li>尽可能减少类和方法的数量</li><li>以上规则按其重要程度排序</li></ul><h3 id="2-简单设计规则1-运行所有测试"><a href="#2-简单设计规则1-运行所有测试" class="headerlink" title="2. 简单设计规则1:运行所有测试"></a>2. 简单设计规则1:运行所有测试</h3><p>编写的测试越多就越能持续走向编写较易测试的代码，紧耦合的代码很难编写测试。遵循有关编写测试并持续运行测试的简单，明确的规则，系统就会更贴近OO低耦合度，高内聚度的目标。编写测试引致更好的设计。</p><h3 id="3-简单设计规则2-4：重构"><a href="#3-简单设计规则2-4：重构" class="headerlink" title="3. 简单设计规则2-4：重构"></a>3. 简单设计规则2-4：重构</h3><p>在重构过程中，可以应用有关优秀软件设计的一切知识。提升内聚性，降低耦合度，切分关注面，模块化系统性关注面，缩小函数和类的尺寸，选用更好的名称，如此等等。这也是简单设计原则后三条规则的地方:消除重复，保证表达力，尽可能减少类和方法的数量。</p><h3 id="4-不可重复"><a href="#4-不可重复" class="headerlink" title="4. 不可重复"></a>4. 不可重复</h3><h3 id="5-表达力"><a href="#5-表达力" class="headerlink" title="5. 表达力"></a>5. 表达力</h3><h3 id="6-尽可能少的类和方法"><a href="#6-尽可能少的类和方法" class="headerlink" title="6. 尽可能少的类和方法"></a>6. 尽可能少的类和方法</h3><h2 id="十二、第十三章-并发编程"><a href="#十二、第十三章-并发编程" class="headerlink" title="十二、第十三章 并发编程"></a>十二、第十三章 并发编程</h2><h3 id="1-为什么要并发"><a href="#1-为什么要并发" class="headerlink" title="1. 为什么要并发"></a>1. 为什么要并发</h3><p>并发是一种解耦策略。它帮我们把做什么和何时做分解开。</p><h3 id="2-并发的防御原则"><a href="#2-并发的防御原则" class="headerlink" title="2. 并发的防御原则"></a>2. 并发的防御原则</h3><h3 id="13-1-单一权责原则（SRP）"><a href="#13-1-单一权责原则（SRP）" class="headerlink" title="13.1 单一权责原则（SRP）"></a>13.1 单一权责原则（SRP）</h3><p>并发代码应该从其他代码中分离出来，因为，并发代码相比于其他的代码是很复杂的存在。但是，并发实现细节常常直接嵌入到其他生产代码中。那么下面几个问题需要考虑，</p><ul><li>并发相关代码由自己的开发，修改和调优生命周期</li><li>开发相关代码由自己要对付的挑战，和非并发相关代码不同，而且往往更为困难</li><li>即便没有周边应用程序增加负担，写得不好的并发代码可能的出错方式数量已经足具挑战性。</li></ul><blockquote><p>建议：分离并发相关代码与其他代码。</p></blockquote><h3 id="13-2-限制数据作用域"><a href="#13-2-限制数据作用域" class="headerlink" title="13.2 限制数据作用域"></a>13.2 限制数据作用域</h3><p>两个线程修改共享对象的同一字段时，可能相互干扰，导致未预期的行为。解决方案之一是采用<code>synchronized</code>关键字在代码中保护一块使用共享对象的临界区。限制临界区的数量很重要。更新共享数据的地方越多，就越可能出错。</p><blockquote><p>建议：谨记数据封装，严格限制对可能被共享的数据的访问。</p></blockquote><h3 id="13-3-使用数据副本"><a href="#13-3-使用数据副本" class="headerlink" title="13.3 使用数据副本"></a>13.3 使用数据副本</h3><p>避免共享数据的好方法之一就是一开始就避免共享数据。在某些情况下，有可能复制对象并以只读方式对待。在另外一种情况下，有可能复制对象，从多个线程收集所有副本的结果，并在单个线程中合并这些结果。</p><h3 id="13-4-线程尽可能地独立"><a href="#13-4-线程尽可能地独立" class="headerlink" title="13.4　线程尽可能地独立"></a>13.4　线程尽可能地独立</h3><p>让每个线程在自己的世界中存在，不与其他线程共享数据。每个线程处理一个客户端请求，从不共享的源头接纳所有请求数据，存储为本地变量。</p><p>建议：尝试将数据分解到可被独立线程操作的独立子集。</p><h3 id="13-5-了解执行模型"><a href="#13-5-了解执行模型" class="headerlink" title="13.5 了解执行模型"></a>13.5 了解执行模型</h3><h4 id="13-5-1-生产者－－－消费者模型"><a href="#13-5-1-生产者－－－消费者模型" class="headerlink" title="13.5.1 生产者－－－消费者模型"></a>13.5.1 生产者－－－消费者模型</h4><p>一个或多个生产者线程创建某些工作，并置于缓存或队列中。一个或多个消费者线程从队列中获取并完成这些工作。生产者和消费者之间的队列是一种限定资源。</p><h4 id="13-5-2-读者－－－作者模型"><a href="#13-5-2-读者－－－作者模型" class="headerlink" title="13.5.2 读者－－－作者模型"></a>13.5.2 读者－－－作者模型</h4><p>当存在一个主要为读者线程提供信息源，但只偶尔被作者线程更新的共享资源，吞吐量就会是个问题。增加吞吐量，会导致线程饥饿和过时信息的积累。更新会影响吞吐量。协调读者线程，不去读作者线程正在更新的消息，这是一种辛苦的平衡工作。作者线程倾向于长期锁定许多读者线程，从而导致吞吐量问题。</p><p>挑战之处在于平衡读者线程和作者线程的需求，实现正确的操作，提供合理的吞吐量，避免线程饥饿。</p><h4 id="13-5-3哲学家问题（故事内容不在这里描述）"><a href="#13-5-3哲学家问题（故事内容不在这里描述）" class="headerlink" title="13.5.3哲学家问题（故事内容不在这里描述）"></a>13.5.3哲学家问题（故事内容不在这里描述）</h4><p>从哲学家问题可以反映出编写并发经常遇到的问题，死锁，活锁，吞吐量和效率降低等问题。那么学习这些基础问题的解决算法可以帮助你解决大多数的并发问题，因为大多的并发问题都是上述问题的变种。</p><h3 id="13-6-警惕同步方法之间的依赖"><a href="#13-6-警惕同步方法之间的依赖" class="headerlink" title="13.6 警惕同步方法之间的依赖"></a>13.6 警惕同步方法之间的依赖</h3><p>同步方法之间的依赖会导致并发代码中的狡猾缺陷。Java语言有synchronized概念，可以用来保护单个方法。然而，如果在同一共享类中由多个同步方法，系统就可能写得不太正确了。</p><blockquote><p>建议：避免使用一个共享对象的多个方法。如果有时必须使用一个共享对象的多个方法。这种情况发生时，有３中写对代码的手段：</p></blockquote><ul><li>基于客户端的锁定－－客户端代码在调用第一个方法前锁定服务端，确保锁的范围覆盖了调用最后一个方法的代码。</li><li>基于服务端的锁定－－在服务端内创建锁定服务端的方法，调用所有方法，然后解锁。让客户端代码调用新的方法。</li><li>适配服务端－－创建执行锁定的中间层。这是一种基于服务端的锁定例子，但不修改原始服务端代码。</li></ul><h3 id="13-7保持同步区域微小"><a href="#13-7保持同步区域微小" class="headerlink" title="13.7保持同步区域微小"></a>13.7保持同步区域微小</h3><p>应该尽可能少地设计临界区，如果有请尽可能减小同步区域。</p><h3 id="13-8-编写线程需要注意的几点："><a href="#13-8-编写线程需要注意的几点：" class="headerlink" title="13.8　编写线程需要注意的几点："></a>13.8　编写线程需要注意的几点：</h3><h4 id="1-将伪失败看作可能的线程问题。线程代码中的缺陷可能在一千或者一百万次执行中才会显现一次。所以，不要将系统错误归咎于偶发事件。"><a href="#1-将伪失败看作可能的线程问题。线程代码中的缺陷可能在一千或者一百万次执行中才会显现一次。所以，不要将系统错误归咎于偶发事件。" class="headerlink" title="(1). 将伪失败看作可能的线程问题。线程代码中的缺陷可能在一千或者一百万次执行中才会显现一次。所以，不要将系统错误归咎于偶发事件。"></a>(1). 将伪失败看作可能的线程问题。线程代码中的缺陷可能在一千或者一百万次执行中才会显现一次。所以，不要将系统错误归咎于偶发事件。</h4><h4 id="2-先使非线程代码可工作。确保线程之外的代码可以工作。不要同时追踪非线程缺陷和线程缺陷。确保代码在线程之外可以工作。"><a href="#2-先使非线程代码可工作。确保线程之外的代码可以工作。不要同时追踪非线程缺陷和线程缺陷。确保代码在线程之外可以工作。" class="headerlink" title="(2). 先使非线程代码可工作。确保线程之外的代码可以工作。不要同时追踪非线程缺陷和线程缺陷。确保代码在线程之外可以工作。"></a>(2). 先使非线程代码可工作。确保线程之外的代码可以工作。不要同时追踪非线程缺陷和线程缺陷。确保代码在线程之外可以工作。</h4><h4 id="3-编写可插拔的线程代码。编写在数个环境下运行的线程代码"><a href="#3-编写可插拔的线程代码。编写在数个环境下运行的线程代码" class="headerlink" title="(3). 编写可插拔的线程代码。编写在数个环境下运行的线程代码"></a>(3). 编写可插拔的线程代码。编写在数个环境下运行的线程代码</h4><ul><li>1.单线程与多线程在执行时不同的情况</li><li>2.线程代码与实物或测试替身互动</li><li>3.用运行速度,缓慢和有变动的测试替身执行</li><li>4.将测试配置为能运行一定数量的迭代</li></ul><blockquote><p>建议：编写可插拔的线程代码，这样就能在不同的配置环境下运行。</p></blockquote><h4 id="4-编写可调整的线程代码"><a href="#4-编写可调整的线程代码" class="headerlink" title="(4). 编写可调整的线程代码"></a>(4). 编写可调整的线程代码</h4><p>在系统运行时允许线程发生变动。允许线程依据吞吐量和使用率自我调整。</p><h4 id="5-运行多余处理器数量的线程"><a href="#5-运行多余处理器数量的线程" class="headerlink" title="(5). 运行多余处理器数量的线程"></a>(5). 运行多余处理器数量的线程</h4><p>任务交换越频繁，越有可能找到错过临界区或导致死锁的代码。</p><h4 id="6-在不同平台上运行"><a href="#6-在不同平台上运行" class="headerlink" title="(6). 在不同平台上运行"></a>(6). 在不同平台上运行</h4><h4 id="7-调整代码并强迫错误发生"><a href="#7-调整代码并强迫错误发生" class="headerlink" title="(7). 调整代码并强迫错误发生"></a>(7). 调整代码并强迫错误发生</h4><h2 id="十三、第14章-逐步改进"><a href="#十三、第14章-逐步改进" class="headerlink" title="十三、第14章 逐步改进"></a>十三、第14章 逐步改进</h2><p>代码并不是一次就能写的很干净的，需要我们不断的迭代和优化。</p><h2 id="十四、第17章-味道与启发"><a href="#十四、第17章-味道与启发" class="headerlink" title="十四、第17章 味道与启发"></a>十四、第17章 味道与启发</h2><h3 id="1-注释"><a href="#1-注释" class="headerlink" title="1. 注释"></a>1. 注释</h3><h4 id="1-不恰当的注释信息"><a href="#1-不恰当的注释信息" class="headerlink" title="(1). 不恰当的注释信息"></a>(1). 不恰当的注释信息</h4><p>让注释传达本该更好地在源代码控制系统，问题追踪系统或任何其他记录系统中保存的信息，是不恰当的。例如，修改历史记录只会用大量过时而无趣的文本搞乱源代码文件。注释只应该描述有关代码和设计的技术性信息。</p><h4 id="2-废弃的注释"><a href="#2-废弃的注释" class="headerlink" title="(2). 废弃的注释"></a>(2). 废弃的注释</h4><p>过时，无关或不正确的注释就是废弃的注释。</p><h4 id="3-冗余注释"><a href="#3-冗余注释" class="headerlink" title="(3). 冗余注释"></a>(3). 冗余注释</h4><p>如果注释描述的是某种充分自我描述了的东西，那么注释就是多余的。注释应该谈及代码自身没有提到的东西。</p><h4 id="4-注释要写就要写最好的注释，别画蛇添足"><a href="#4-注释要写就要写最好的注释，别画蛇添足" class="headerlink" title="(4). 注释要写就要写最好的注释，别画蛇添足"></a>(4). 注释要写就要写最好的注释，别画蛇添足</h4><h4 id="5-注释掉的代码，看到注释掉的代码就删。"><a href="#5-注释掉的代码，看到注释掉的代码就删。" class="headerlink" title="(5). 注释掉的代码，看到注释掉的代码就删。"></a>(5). 注释掉的代码，看到注释掉的代码就删。</h4><h3 id="2-环境"><a href="#2-环境" class="headerlink" title="2. 环境"></a>2. 环境</h3><h4 id="1-需要多步才能实现的构建"><a href="#1-需要多步才能实现的构建" class="headerlink" title="(1). 需要多步才能实现的构建"></a>(1). 需要多步才能实现的构建</h4><p>构建系统应该是单步的小操作。不应该从源代码控制系统中一小点一小点签出代码。不应该需要一系列神秘指令或环境依赖脚本来构建单个元素。不应该四出寻找额外的小jar,xml文件和其他系统所需的杂物。你应该能够用单个命令签出系统，并单个指令构建它。</p><h4 id="2-需要多步才能做到测试"><a href="#2-需要多步才能做到测试" class="headerlink" title="(2). 需要多步才能做到测试"></a>(2). 需要多步才能做到测试</h4><p>你应该能够用单个指令就可以运行全部单元测试。能够运行全部测试是如此基础和重要，应该快速，轻易和直接了当地做到。</p><h3 id="3-函数"><a href="#3-函数" class="headerlink" title="3. 函数"></a>3. 函数</h3><ul><li>函数的参数应该少。</li><li>输出参数违反直觉。如果非要修改，那就修改函数所在对象好了。</li><li>标示参数，布尔值参数宣告函数做了不止一件事，应该消灭掉，即函数只做一件事。</li><li>永不被调用的方法应该丢弃。</li></ul><h3 id="4-一般性问题"><a href="#4-一般性问题" class="headerlink" title="4. 一般性问题"></a>4. 一般性问题</h3><p>(1). 如果代码需要有多种语言，那么应该尽力减少源文件中额外语言的数量和范围。</p><p>(2). 明显的行为未被实现，如果明显的行为未被实现，读者和用户就不能再依靠他们对函数名称的直觉。他们不再信任原作者，不得不阅读代码细节。</p><p>(3). 不正确的边界行为，追索每种边界条件，编写测试。</p><p>(4). 忽视安全</p><p>(5). 重复，尽可能找到并消除重复。</p><p>(6). 在错误的抽象层级上的代码，创建分离较高层级一般性概念与较低层级细节概念的抽象模型，这很重要。</p><p>(7). 基类不可多度依赖于派生类，基类应该对派生类一无所知。</p><p>(8). 信息过多，设计良好的模块有着非常小的接口，让你事半功倍。设计良好的接口并不提供许多需要依靠的函数，所以耦合度比较低。</p><p>优秀的软件开发人员学会限制类或模块中暴露的接口数量。类中的方法越少越好。函数知道的变量越少越好。类拥有的实体变量越少越好。隐藏你的数据。隐藏你的工具函数。隐藏你的常量和你的临时变量。不要创建拥有大量方法或大量实体变量的类。不要为子类创建大量受保护变量和函数。尽力保持接口紧凑。通过限制信息来控制耦合度。</p><p>(9). 死代码一定要删除。</p><p>(10). 垂直分隔，变量和函数应该在靠近被使用的地方定义。私有函数应该刚好在其首次被使用的位置下面定义。</p><p>(11). 前后不一致，从一而终即一旦选中，就小心持续遵循。如果在特定函数中用了response的变量来持有HttpServletResponse对象，则在其他用到HttpServletResponse对象的函数中也用同样的变量名。这样会让你的代码更易阅读。</p><p>(12). 混淆视听，没用的变量或者函数直接删掉，以免造成不必要的干扰。</p><p>(13). 人为耦合，不互相依赖的东西不该耦合。一般来说，人为耦合是指两个没有直接目的之间的模块的耦合。其根源是将变量，常量或函数不恰当地放在临时方便的位置。</p><p>(14). 特性依恋，类的方法只应对其所属类中的变量和函数感兴趣，不该垂青其他类中的变量和函数。当方法通过某个其他对象的访问器和修改器来操作该对象内部数据，则它就依恋于该对象所属类的范围。</p><p>(15). 选择算子参数，尽量不要把boolean作为函数参数</p><p>(16). 晦涩意图，代码要尽可能具有表达力。</p><p>(17). 位置错误的权责，我们可以采用最小惊异原则来帮助我们即代码应该放在读者自然而然期待它所在的地方。</p><p>(18). 不恰当的静态方法，对于没有机会打算让它有多态行为的函数可以作为动态函数，否则可选用静态函数。</p><p>(19). 使用解释性变量，命名要有意义。</p><p>(20). 函数名称应该表达其行为</p><p>(21). 理解算法</p><p>(22). 把逻辑依赖改为物理依赖：</p><ul><li>1.逻辑依赖：原始数据和业务逻辑之间的依赖关系。例如：定义的常量和业务逻辑存在着依赖关系或者说被捆绑在了一起，即当业务逻辑发生变化或者存在其他可能性的时候且定义的常量无法满足导致常量需要修改。</li><li>2.物理依赖：函数方法和业务逻辑之间的依赖关系。例如：为了解决逻辑依赖的问题，我们可以通过构造一个方法将数据和业务隔离。</li></ul><p>(23). 用多态替代<code>if/else</code> 或 <code>switch/case</code></p><p>(24). 遵循标准约定</p><p>(25). 用命名常量替代魔术数，魔术数不仅仅指的是数字，也泛指任何不能自我描述的符号。</p><p>(26). 准确，在可以用List的时候，非要把变量声明为ArrayList就过分拘束了。在代码中做决定时，确认自己足够准确。明确自己为何要这么做，如果遇到异常情况如何处理。别懒得理会决定的准确性。代码中的含糊和不准确性要么是意见不同的结果，要么源于懒惰。无论原因是什么，都要消除。</p><p>(27). 结构甚于约定，坚守结构甚于约定的设计决策。</p><p>(28). 封装条件，如果没有if或while语句的上下文，布尔逻辑就难以理解。应该把解释了条件意图的函数抽离出来。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(shouldBeDeleted(timer))</span><br></pre></td></tr></table></figure><p>要好于</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(timer.hasExpired() &amp;&amp; !timer.isRecurrent())</span><br></pre></td></tr></table></figure><p>(29). 避免否定性条件，尽可能将条件表示为肯定形式。</p><p>(30). 函数只该做一件事</p><p>(31). 掩蔽时序耦合，排列函数参数，好让它们被调用的次序显而易见。</p><p>(32). 别随意，构建代码需要理由，而且理由应于代码结构相契合。</p><p>(33). 封装边界条件，把处理边界条件的代码集中到一处，不要散落于代码中。</p><p>(34). 函数应该只在一个抽象层级上，函数中的语句应该在同意抽象级上，该层级应该是函数名所示操作的下一层。</p><p>(35). 在较高层级放置可配置数据，如果你有个已知并在较高抽象层级的默认常量或配置值，不要将它埋藏到较低层级的函数中。把它作为较高层级函数调用较低层级函数时的一个参数。位于较高层级的配置性常量易于修改。它们向下贯穿应用程序。应用程序的较低层级并不拥有这些常量的值。</p><p>(36). 避免传递浏览，编写害羞代码。</p><p>(37). 不要继承常量</p><h3 id="17-5-测试"><a href="#17-5-测试" class="headerlink" title="17.5 测试"></a>17.5 测试</h3><ol><li>使用覆盖率工具，覆盖率工具能汇报你测试策略中的缺口。使用测试覆盖率工具能更容易地找到不足的模块，类和函数。</li><li>别略过小测试</li><li>被忽略的测试就是对不确定事物的疑问。</li><li>测试边界条件</li><li>全面测试相近的缺陷，缺陷趋向于扎堆。</li><li>测试失败的模式有启发性。</li><li>测试覆盖率的模式有启发性，查看被或未被以通过的测试执行的代码，往往能发现失败的测试为何失败的线索。</li><li>测试应该快速。</li></ol><p>来自：<a href="http://www.uml.org.cn/codeNorms/201701162.asp">代码整洁之道内容概要</a></p><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> unittest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象编程的理解</title>
      <link href="/2021/06/29/computer/common/mian-xiang-dui-xiang-bian-cheng-de-li-jie/"/>
      <url>/2021/06/29/computer/common/mian-xiang-dui-xiang-bian-cheng-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="面向过程和面向对象"><a href="#面向过程和面向对象" class="headerlink" title="面向过程和面向对象"></a>面向过程和面向对象</h2><h3 id="面向过程思想概述"><a href="#面向过程思想概述" class="headerlink" title="面向过程思想概述"></a>面向过程思想概述</h3><p>面向着具体的每一个步骤和过程，把每一个步骤和过程完成，然后由这些功能方法相互调用，完成需求。</p><h3 id="面向对象思想概述"><a href="#面向对象思想概述" class="headerlink" title="面向对象思想概述"></a>面向对象思想概述</h3><p>当需求单一，或者简单时，我们一步一步去操作没问题，并且效率也挺高。可随着需求的更改，功能的增多，发现需要面对每一个步骤很麻烦了，这时就开始思索，能不能把这些步骤和功能在进行封装，封装时根据不同的功能，进行不同的封装，功能类似的封装在一起。这样结构就清晰了很多。用的时候，找到对应的类就可以了。这就是面向对象的思想。面向对象是基于面向过程的编程思想。</p><h2 id="面向对象特征"><a href="#面向对象特征" class="headerlink" title="面向对象特征"></a>面向对象特征</h2><ul><li>抽象</li><li>封装</li><li>继承</li><li>多态</li></ul><h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><p>把现实世界中的某一类东西，提取出来，用程序代码表示，抽象出来的一般叫做类或者接口。抽象并不打算了解全部问题，而是选择其中的一部分，暂时不用部分细节。抽象包括两个方面：</p><ul><li>数据抽象：表示世界中一类事物的特征,就是对象的属性.比如鸟有翅膀,羽毛等(类的属性)</li><li>过程抽象：表示世界中一类事物的行为,就是对象的行为.比如鸟会飞,会叫(类的方法)</li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装，即隐藏对象的属性和实现细节，仅对外公开接口，控制在程序中属性的读和修改的访问级别；将抽象得到的数据和行为（或功能）相结合，形成一个有机的整体，也就是将数据与操作数据的源代码进行有机的结合，形成“类”，其中数据和函数都是类的成员。封装的目的是增强安全性和简化编程，使用者不必了解具体的实现细节，而只是要通过外部接口，以特定的访问权限来使用类的成员。隐藏之后，外部程序就不能接触和改变那些细节，所以不用担心自己的类会受到非法修改，可确保它们不会对其他程序造成影响。</p><h4 id="封装的原则"><a href="#封装的原则" class="headerlink" title="封装的原则"></a>封装的原则</h4><ul><li>将不需要对外提供的内容都隐藏起来</li><li>把属性都隐藏，提供公共方法对其访问</li></ul><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>一种联结类的层次模型，并且允许和鼓励类的重用，提供一种明确表达共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类(子类)，原始类称为新类的基类(父类)。派生类可以从它的父类哪里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。因此可以说，继承为了重用父类代码，同时为实现多态性作准备。</p><h4 id="继承概念的实现方式"><a href="#继承概念的实现方式" class="headerlink" title="继承概念的实现方式"></a>继承概念的实现方式</h4><ul><li>类继承：类继承是指直接使用基类的属性和方法而无需额外编码。</li><li>接口继承：接口继承是指仅使用属性和方法的名称、但是子类必须提供实现。</li></ul><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态就是指一个类实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，它们（那些操作）可以通过相同的方式予以调用。</p><h4 id="实现多态的方式"><a href="#实现多态的方式" class="headerlink" title="实现多态的方式"></a>实现多态的方式</h4><ul><li>重载</li><li>重写</li><li>实现接口</li></ul><h2 id="面向对象总结"><a href="#面向对象总结" class="headerlink" title="面向对象总结"></a>面向对象总结</h2><p>封装可以隐藏实现细节，使得代码模块化；继承可以扩展已存在的代码模块（类）；它们的目的都是为了<strong>代码重用</strong>。而多态则是为了实现另一个目的：<strong>接口重用</strong>！多态的作用，就是为了类在继承和派生的时候，保证使用“家谱”中任一类的实例的某一属性时的正确调用。</p><h3 id="面向对象开发"><a href="#面向对象开发" class="headerlink" title="面向对象开发"></a>面向对象开发</h3><p>就是不断的创建对象，使用对象，指挥对象做事情。</p><h3 id="面向对象设计"><a href="#面向对象设计" class="headerlink" title="面向对象设计"></a>面向对象设计</h3><p>更好的管理和维护对象之间的关系。</p><h3 id="面向对象优点"><a href="#面向对象优点" class="headerlink" title="面向对象优点"></a>面向对象优点</h3><ul><li>更符合我们思想习惯的思想</li><li>将复杂的事情简单化</li><li>将我们从执行者变成了指挥者</li></ul><blockquote><p>本文章由<a href="https://github.com/blinkfox">blinkfox</a>原创，本站仅仅为学习转发</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2021/06/29/computer/markdown/markdown/"/>
      <url>/2021/06/29/computer/markdown/markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote><h4 id="Markdown是什么？"><a href="#Markdown是什么？" class="headerlink" title="Markdown是什么？"></a>Markdown<em>是什么</em>？</h4><h4 id="谁创造了它？"><a href="#谁创造了它？" class="headerlink" title="谁创造了它？"></a><em>谁</em>创造了它？</h4><h4 id="为什么要使用它？"><a href="#为什么要使用它？" class="headerlink" title="为什么要使用它？"></a><em>为什么</em>要使用它？</h4><h4 id="怎么使用？"><a href="#怎么使用？" class="headerlink" title="怎么使用？"></a><em>怎么</em>使用？</h4><h4 id="谁在用？"><a href="#谁在用？" class="headerlink" title="谁在用？"></a><em>谁</em>在用？</h4><h4 id="尝试一下"><a href="#尝试一下" class="headerlink" title="尝试一下"></a>尝试一下</h4></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/">Infogami</a>，之后与<a href="http://www.reddit.com/">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。    </li></ul><p><img src="https://upload.wikimedia.org/wikipedia/commons/0/06/Aaron_Swartz_profile.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code>**，</strong>符号’`’**。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>&gt; 区块引用<br>&gt;&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main()&#123;    printf(&quot;Hello, Markdown.&quot;);&#125;</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[haidi-ustc的Markdown库](https:://github.com/haidi-ustc/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/haidi-ustc/Markdown" title="Markdown">haidi-ustc的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[haidi-ustc的Markdown库1][1]<br>[haidi-ustc的Markdown库2][2]<br>[1]:https:://github.com/haidi-ustc/Markdown “Markdown”<br>[2]:https:://github.com/haidi-ustc/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/haidi-ustc/Markdown" title="Markdown">haidi-ustc的Markdown库1</a><br><a href="https:://github.com/haidi-ustc/Markdown" title="Markdown">haidi-ustc的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/haidi-ustc/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。    </li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/</a> )。</p><hr><p>以上基本是所有traditonal markdown的语法。</p><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p><table><thead><tr><th align="center">代码库</th><th>链接</th></tr></thead><tbody><tr><td align="center">MarkDown</td><td><a href="https://github.com/haidi-ustc/Markdown" title="Markdown">https://github.com/haidi-ustc/Markdown</a></td></tr><tr><td align="center">MarkDownCopy</td><td><a href="https://github.com/haidi-ustc/Markdown" title="Markdown">https://github.com/haidi-ustc/Markdown</a></td></tr></tbody></table><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OQMD 材料数据库结构查询</title>
      <link href="/2021/06/29/computer/database/oqmd-database/"/>
      <url>/2021/06/29/computer/database/oqmd-database/</url>
      
        <content type="html"><![CDATA[<h2 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h2><p>以下是OQMD数据库用法的简单说明，关于更详细的新特性了解，可参考<a href="http://oqmd.org/">这里</a>。</p><ul><li>介绍(introductions)</li><li>使用(useage)</li><li>其它(others)</li></ul><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p>OQMD 数据库是由美国西北大学的Chris Wolverton组维护开发的材料数据库，总共有 <strong>815,654</strong> 条材料数据记录，包括了通过DFT计算的材料的热力学和结构信息. 该数据库为MySQL关系型数据库，可以自由下载和使用，通过qmpy可以很方便的进行数据查询。</p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2. 使用"></a>2. 使用</h3><p>在调用OQMD数据库时，可以通过qmpy对结构进行查找，再用pymatgen对查找到的结构进行分析后处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymatgen.core.periodic_table <span class="keyword">import</span> get_el_sp</span><br><span class="line"><span class="keyword">from</span> pymatgen.symmetry.analyzer <span class="keyword">import</span> SpacegroupAnalyzer</span><br><span class="line"><span class="keyword">from</span> pymatgen <span class="keyword">import</span> Structure</span><br><span class="line"><span class="keyword">from</span> qmpy <span class="keyword">import</span> Entry</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_one</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Take one OQMD &#x27;Entry&#x27; object, search all the calculations associated and take the best calculation</span></span><br><span class="line"><span class="string">    in order to insert its data into the PyChemia Database</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param a: OQMD Entry object</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment">#print(&#x27;Entry: %6d  Number of Calculations: %3d &#x27; % (a.id, a.calculation_set.count()))</span></span><br><span class="line">    <span class="comment">#print(&#x27;Entry: %6d  Number of Calculations: %3d  Energies: %s&#x27; % (a.id, a.calculation_set.count(),</span></span><br><span class="line">    <span class="comment">#                                                                 str([c.energy for c in a.calculation_set.all()])))</span></span><br><span class="line">    energy = <span class="number">1E10</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      select=a.c[<span class="string">&#x27;static&#x27;</span>]</span><br><span class="line">      <span class="keyword">if</span> <span class="built_in">len</span>(select.errors)&gt;<span class="number">0</span>: select=<span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">      select = <span class="literal">None</span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">if</span> select <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    band_gap = select.band_gap</span><br><span class="line">    <span class="keyword">if</span> band_gap <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">None</span>, <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    cell = select.output.cell</span><br><span class="line">    elements = select.output.atomic_numbers</span><br><span class="line">    reduced = select.output.coords</span><br><span class="line"></span><br><span class="line">    structure = Structure(cell, elements, reduced)</span><br><span class="line">    structure_id = select.output_id</span><br><span class="line">    entry_id = a.<span class="built_in">id</span></span><br><span class="line">    calculation_id = select.<span class="built_in">id</span></span><br><span class="line"><span class="comment">#    energy_pa = select.energy_pa</span></span><br><span class="line">    energy = select.energy</span><br><span class="line"><span class="comment">#    settings = select.settings</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        spacegroup_number = select.output.spacegroup.number</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        spacegroup_number = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    symm = SpacegroupAnalyzer(structure)</span><br><span class="line">    sym2 = symm.get_space_group_number()</span><br><span class="line"></span><br><span class="line">    properties = &#123;<span class="string">&#x27;oqmd&#x27;</span>: &#123;<span class="string">&#x27;structure_id&#x27;</span>: structure_id,</span><br><span class="line">                           <span class="string">&#x27;entry_id&#x27;</span>: entry_id,</span><br><span class="line">                           <span class="string">&#x27;calculation_id&#x27;</span>: calculation_id,</span><br><span class="line">                           <span class="string">&#x27;energy&#x27;</span>: energy,</span><br><span class="line">                           <span class="string">&#x27;band_gap&#x27;</span>: band_gap,</span><br><span class="line"><span class="comment">#                           &#x27;settings&#x27;: settings,</span></span><br><span class="line">                           <span class="string">&#x27;spacegroup_number&#x27;</span>: spacegroup_number&#125;,</span><br><span class="line">                  <span class="string">&#x27;spacegroup_number&#x27;</span>: &#123;<span class="string">&#x27;value&#x27;</span>: sym2, <span class="string">&#x27;symprec&#x27;</span>: <span class="number">1E-2</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> structure, properties</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> json</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    icount=<span class="number">32004</span></span><br><span class="line">    queryset = Entry.objects.<span class="built_in">all</span>()</span><br><span class="line">    entry_ids = [entry.<span class="built_in">id</span> <span class="keyword">for</span> entry <span class="keyword">in</span> queryset]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Number of entries in OQMD: %d&#x27;</span> % <span class="built_in">len</span>(entry_ids))</span><br><span class="line">  <span class="comment">#  print(entry_ids[1:1000])</span></span><br><span class="line">  <span class="comment">#  quit()</span></span><br><span class="line">    <span class="keyword">for</span> entry_id <span class="keyword">in</span> entry_ids[<span class="number">51331</span>:]:</span><br><span class="line">  <span class="comment">#      entry_id=entry_ids[0]</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">           a = Entry.objects.get(<span class="built_in">id</span>=entry_id)</span><br><span class="line">           st,pr=run_one(a)</span><br><span class="line">           <span class="keyword">if</span> st <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> pr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">              icount+=<span class="number">1</span></span><br><span class="line">              fname=<span class="string">&quot;ustc-&quot;</span>+<span class="built_in">str</span>(icount)+<span class="string">&#x27;.json&#x27;</span></span><br><span class="line">              <span class="comment">#print(&#x27;-&#x27;*40)</span></span><br><span class="line">              <span class="comment">#print(st.formula)</span></span><br><span class="line">              <span class="comment">#print(pr[&#x27;oqmd&#x27;][&#x27;band_gap&#x27;])</span></span><br><span class="line">              new_dict=&#123;<span class="string">&#x27;structure&#x27;</span>:&#123;<span class="string">&#x27;cell&#x27;</span>:st.lattice.matrix.tolist(),<span class="string">&#x27;species&#x27;</span>:[x.symbol <span class="keyword">for</span> x <span class="keyword">in</span> st.species],<span class="string">&#x27;coords&#x27;</span>:st.frac_coords.tolist()&#125;,<span class="string">&#x27;properties&#x27;</span>:pr&#125;</span><br><span class="line"><span class="comment">#              new_dict=&#123;&#x27;structure&#x27;:st.as_dict(),&#x27;properties&#x27;:pr&#125;</span></span><br><span class="line">              <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./data/&#x27;</span>+fname,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                   json.dump(new_dict,f)</span><br><span class="line">           <span class="keyword">if</span> icount%<span class="number">1000</span>==<span class="number">0</span>:</span><br><span class="line">              <span class="built_in">print</span>(<span class="string">&quot;number %d&quot;</span>%(icount))</span><br><span class="line">              time.sleep(<span class="number">5</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">           <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> database </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hands-on tutorial for Deepmd-kit</title>
      <link href="/2021/06/29/quantum/hands-on-tutorial-for-deepmd-kit/"/>
      <url>/2021/06/29/quantum/hands-on-tutorial-for-deepmd-kit/</url>
      
        <content type="html"><![CDATA[<h1 id="Hands-on-tutorial-for-DeePMD-kit"><a href="#Hands-on-tutorial-for-DeePMD-kit" class="headerlink" title="Hands-on tutorial for DeePMD-kit"></a>Hands-on tutorial for DeePMD-kit</h1><p>This tutorial will introduce you to the basic usage of DeePMD-kit, including data preparation, training, testing and running molecular dynamics simulations with lammps. </p><p>Typically the DeePMD-kit workflow contains three parts: data preparation, training/freezing/testing and molecular dynamics.</p><p>The folder structure of this tutorial is like this:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">00.data  01.train  02.lmp  readme.md</span><br></pre></td></tr></table></figure><p>where the folder <code>00.data</code> contains the data, the folder <code>01.train</code> contains an example input script to train a model with DeePMD-kit and the folder <code>02.lmp</code> contains lammps example script for molecular dynamics simulation.</p><p>Before starting with the tutorial, we want you to notice that the unit system in the DeePMD-kit is:</p><table><thead><tr><th>Property</th><th align="center">Unit</th></tr></thead><tbody><tr><td>Time</td><td align="center">ps</td></tr><tr><td>Length</td><td align="center">Å</td></tr><tr><td>Energy</td><td align="center">eV</td></tr><tr><td>Force</td><td align="center">eV/Å</td></tr><tr><td>Pressure</td><td align="center">Bar</td></tr></tbody></table><h1 id="Data-preparation"><a href="#Data-preparation" class="headerlink" title="Data preparation"></a>Data preparation</h1><p>The training data of DeePMD-kit contains the atom type, the simulation box, the atom coordinate, the atom force, the system energy and the virial. A snapshot of a molecular system that has these information is called a <strong>frame</strong>. A <strong>system of data</strong> or in short a <strong>system</strong> includes a number of frames that share the same number of atoms and atom types. For example, a molecular dynamics trajectory can be converted in to a system of data, with each timestep corresponding to a frame in the system. </p><p>The DeePMD-kit adopts a compressed data format. All training data should be firstly converted into this format and then can be used by DeePMD-kit. The data format is explained in detail in the DeePMD-kit manual that can be found in the DeePMD-kit official github site <a href="http://www.github.com/deepmodeling/deepmd-kit">http://www.github.com/deepmodeling/deepmd-kit</a>. </p><p>We provide a convenient tool named <code>dpdata</code> for converting the data produced by VASP, Gaussian, Quantum-Espresso and Lammps into the compressed format of DeePMD-kit. As an example, go to the data folder:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> data</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">OUTCAR</span><br></pre></td></tr></table></figure><p>The OUTCAR that was produced by an ab-initio molecular dynamics (AIMD) simulation of a gas phase methane molecule using VASP. Now start an interactive python environment, for example</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python</span><br></pre></td></tr></table></figure><p>then execute the following commands:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dpdata</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">sys = dpdata.LabeledSystem(<span class="string">&#x27;OUTCAR&#x27;</span>, fmt = <span class="string">&#x27;vasp/outcar&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;# the system contains %d frames&#x27;</span> % sys.get_nframes())</span><br><span class="line">sys.to_deepmd_npy(<span class="string">&#x27;system_0&#x27;</span>, set_size = <span class="number">20</span>, prec = np.float32)</span><br></pre></td></tr></table></figure><p>The commands import a system of data from the OUTCAR (with format <code>vasp/outcar</code>), and then dump it in to the compressed format (numpy compressed arrays). The output folder <code>system_0</code>. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span> system_0</span><br><span class="line">set.000  set.001  set.002  set.003  set.004  set.005  set.006  set.007  set.008  set.009  type.raw</span><br></pre></td></tr></table></figure><p>The data system that has 200 frames is split into 10 sets, each of which has 20 frames. The DeePMD-kit assumes that the last set, i.e.<code>set.009</code>, is the testing set, while the other sets are the training sets. The parameter <code>set_size</code> specifies the set size. The parameter <code>prec</code> specifies the precision of the floating point numbers.</p><p>The file <code>type.raw</code> gives the type of atoms in the system. Since all frames in the system has the same atom types and atom numbers, we only need to specify the type information once for the whole system</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> system_0/type.raw</span><br><span class="line">0 0 0 0 1</span><br></pre></td></tr></table></figure><p>where the atom <code>H</code> is given type <code>0</code>, and atom <code>C</code> is given type <code>1</code>.</p><h1 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h1><h2 id="Prepare-input-script"><a href="#Prepare-input-script" class="headerlink" title="Prepare input script"></a>Prepare input script</h2><p>Once the data preparation is done, we can go on with training. Now go to the training directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../01.train</span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">input.json</span><br></pre></td></tr></table></figure><p>where input.json gives you an example training script. The options are explained in detail in the DeePMD-kit manual, so they are not comprehensively explained. We want to draw your attention to a few of important parameters that matters the training accuracy. In the following are the parameters that specify the neural network architecture.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;use_smooth&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rcut_smth&quot;</span><span class="punctuation">:</span>        <span class="number">5.80</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rcut&quot;</span><span class="punctuation">:</span>             <span class="number">6.00</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sel_a&quot;</span><span class="punctuation">:</span>            <span class="punctuation">[</span><span class="number">4</span><span class="punctuation">,</span> <span class="number">1</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;filter_neuron&quot;</span><span class="punctuation">:</span>    <span class="punctuation">[</span><span class="number">10</span><span class="punctuation">,</span> <span class="number">20</span><span class="punctuation">,</span> <span class="number">40</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;axis_neuron&quot;</span><span class="punctuation">:</span>      <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fitting_neuron&quot;</span><span class="punctuation">:</span>   <span class="punctuation">[</span><span class="number">100</span><span class="punctuation">,</span> <span class="number">100</span><span class="punctuation">,</span> <span class="number">100</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>use_smooth</code> tells the DeePMD-kit that the smoothed deep potential, namely DeepPot-SE model, will be trained. </li><li><code>rcut</code> gives the cut-off radius, while the key <code>rcut_smth</code> gives where the inverse distance start to be smoothed. That is to say the distance dependency 1/r decays to 0 smoothly from <code>rcut_smth</code> to <code>rcut</code>.</li><li><code>sel_a</code> gives the (estimated) maximum number of atoms in the cut-off radius. This variable is a list, and <code>sel_a[i]</code> gives the maximum number of type i atoms in the cut-off radius. In the case of gas phase methane molecule <code>CH4</code>, a natural choice of <code>sel_a</code> is <code>[4,1]</code>, given <code>H</code> is of type 0 and <code>C</code> is of type 1.</li><li><code>filter_neuron</code> gives the size of embedding neural network.</li><li><code>fitting_neuron</code> gives the size of fitting neural network.</li><li><code>axis_neuron</code> gives the number of axis neurons, i.e. the size of matrix G_1. This number should be smaller than or equal to <code>filter_neuron[-1]</code>.</li></ul><p>The training parameters are given in the following</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>    </span><br><span class="line">    <span class="attr">&quot;systems&quot;</span><span class="punctuation">:</span>          <span class="punctuation">[</span><span class="string">&quot;../00.data/system_0/&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;set_prefix&quot;</span><span class="punctuation">:</span>       <span class="string">&quot;set&quot;</span><span class="punctuation">,</span>    </span><br><span class="line">    <span class="attr">&quot;batch_size&quot;</span><span class="punctuation">:</span>       <span class="punctuation">[</span><span class="number">8</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stop_batch&quot;</span><span class="punctuation">:</span>       <span class="number">1000000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_lr&quot;</span><span class="punctuation">:</span>         <span class="number">0.001</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;decay_steps&quot;</span><span class="punctuation">:</span>      <span class="number">5000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;decay_rate&quot;</span><span class="punctuation">:</span>       <span class="number">0.95</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>systems</code> is a list that provides location of the systems (in our case we have only one system). DeePMD-kit allows you to provide multiple systems. DeePMD-kit will train the model with the systems randomly picked from the list. </li><li><code>batch_size</code> is a list that provides the batch size, i.e. number of frames used in one SGD step, of each system, respectively</li><li><code>stop_batch</code> specifies the total number of SGD step (equal to the number of batches) used in the training.</li><li><code>start_lr</code>, <code>decay_rate</code> and <code>decay_steps</code> specify how the learning rate changes. For example, the <code>t</code>th batch will be trained with learning rate:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lr(t) = start_lr * decay_rate ^ ( t / decay_steps )</span><br></pre></td></tr></table></figure></li></ul><p>It is noted that the parameter <code>stop_batch</code> and <code>decay_steps</code> are usually increased in proportion, so that the learning rate at the end of the training does not change. A rule-of-thumb guide of the learning rate at the end of training is of order <code>10^&#123;-8&#125;</code> to <code>10^&#123;-7&#125;</code>.</p><h2 id="Train-a-model"><a href="#Train-a-model" class="headerlink" title="Train a model"></a>Train a model</h2><p>After the training script is prepared, we can start the training with DeePMD-kit by simply running</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dp_train input.json</span><br></pre></td></tr></table></figure><p>On the screen you see the information of the data system(s)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DEEPMD: ---Summary of DataSystem-----------------------------------------</span></span><br><span class="line"><span class="comment"># DEEPMD: find 1 system(s):</span></span><br><span class="line"><span class="comment"># DEEPMD:                                     system  natoms  bch_sz  n_bch</span></span><br><span class="line"><span class="comment"># DEEPMD:                       ../00.data/system_0/       5       8     18</span></span><br><span class="line"><span class="comment"># DEEPMD: -----------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><p>and the starting and final learning rate of this training</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DEEPMD: start training at lr 1.00e-03 (== 1.00e-03), final lr will be 3.51e-08</span></span><br></pre></td></tr></table></figure><p>If everything works fine, you will see, on the screen, information printed every 1000 SGD steps, like</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># DEEPMD: batch    1000 training time 5.92 s, testing time 0.01 s</span></span><br><span class="line"><span class="comment"># DEEPMD: batch    2000 training time 5.20 s, testing time 0.01 s</span></span><br><span class="line"><span class="comment"># DEEPMD: batch    3000 training time 5.50 s, testing time 0.01 s</span></span><br><span class="line"><span class="comment"># DEEPMD: batch    4000 training time 5.54 s, testing time 0.01 s</span></span><br><span class="line"><span class="comment"># DEEPMD: batch    5000 training time 5.58 s, testing time 0.01 s</span></span><br><span class="line"><span class="comment"># DEEPMD: batch    6000 training time 5.59 s, testing time 0.01 s</span></span><br><span class="line"><span class="comment"># DEEPMD: batch    7000 training time 5.64 s, testing time 0.01 s</span></span><br><span class="line"><span class="comment"># DEEPMD: batch    8000 training time 5.64 s, testing time 0.01 s</span></span><br><span class="line"><span class="comment"># DEEPMD: batch    9000 training time 5.73 s, testing time 0.01 s</span></span><br><span class="line"><span class="comment"># DEEPMD: batch   10000 training time 5.71 s, testing time 0.01 s</span></span><br><span class="line"><span class="comment"># DEEPMD: saved checkpoint model.ckpt</span></span><br></pre></td></tr></table></figure><p>They present the training and testing time counts. At the end of the 10000th batch, the model is saved in Tensorflow’s checkpoint file <code>model.ckpt</code>.<br>At the same time, the training and testing errors are presented in file <code>lcurve.out</code>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">head</span> -n 2 lcurve.out </span><br><span class="line"><span class="comment"># batch      l2_tst    l2_trn    l2_e_tst  l2_e_trn    l2_f_tst  l2_f_trn         lr</span></span><br><span class="line">      0    4.91e+01  5.55e+01    4.61e+00  4.59e+00    1.55e+00  1.75e+00    1.0e-03</span><br></pre></td></tr></table></figure><p>and</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">tail</span> -n 2 lcurve.out </span><br><span class="line"> 137000    1.87e+00  1.70e+00    9.64e-04  1.24e-03    1.18e-01  1.07e-01    2.5e-04</span><br><span class="line"> 138000    1.90e+00  1.72e+00    3.23e-03  2.86e-03    1.20e-01  1.09e-01    2.5e-04</span><br><span class="line"> 139000    1.93e+00  1.61e+00    1.58e-03  1.33e-03    1.21e-01  1.01e-01    2.5e-04</span><br><span class="line"> 140000    1.86e+00  1.68e+00    1.50e-03  1.66e-03    1.21e-01  1.09e-01    2.4e-04</span><br><span class="line"> 141000    1.83e+00  1.67e+00    9.39e-04  6.38e-04    1.19e-01  1.08e-01    2.4e-04</span><br></pre></td></tr></table></figure><p>Volumes 4, 5 and 6, 7 presents the energy and force training and testing errors, respectively. It is demonstrated that after 140,000 steps of training, the energy testing error is around 1 meV and the force testing error is around 120 meV/Å. It is also observed that the force testing error is systematically (but slightly) larger than the training error, which implies a slight over-fitting to the rather small dataset.</p><h2 id="Freeze-a-model"><a href="#Freeze-a-model" class="headerlink" title="Freeze a model"></a>Freeze a model</h2><p>At the end of the training, the model parameters saved in tensorflow’s checkpoint file should be frozen as a model file that is usually ended with extension <code>.pb</code>. Simply execute</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ dp_frz </span><br><span class="line">Converted 46 variables to const ops.</span><br><span class="line">922 ops <span class="keyword">in</span> the final graph.</span><br></pre></td></tr></table></figure><p>and it will output a model file named <code>frozen_model.pb</code> in the current directory.</p><h1 id="Run-molecular-dynamics-simulation-with-Lammps"><a href="#Run-molecular-dynamics-simulation-with-Lammps" class="headerlink" title="Run molecular dynamics simulation with Lammps"></a>Run molecular dynamics simulation with Lammps</h1><p>Now let’s switch to the lammps directory to check the necessary input files for running DeePMD with lammps.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ../02.lmp</span><br></pre></td></tr></table></figure><p>Firstly, we soft-link the output model in the training directory to the current directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ln</span> -s ../01.train/frozen_model.pb .</span><br></pre></td></tr></table></figure><p>Then we have three files </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">conf.lmp  frozen_model.pb  in.lammps  </span><br></pre></td></tr></table></figure><p>where <code>conf.lmp</code> gives the initial configuration of a gas phase methane MD simulation, and the file <code>in.lammps</code> is the lammps input script. One may check <code>in.lammps</code> and finds that it is a rather standard lammps input file for a MD simulation, with only two exception lines:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pair_style      deepmd frozen_model.pb</span><br><span class="line">pair_coeff</span><br></pre></td></tr></table></figure><p>where the pair style <code>deepmd</code> is invokes and the model file <code>frozen_model.pb</code> is provided, which means the atomic interaction will be computed by the DeePMD model that is stored in the file <code>frozen_model.pb</code>.</p><p>One may execute lammps in the standard way</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ lmp_mpi -i in.lammps</span><br></pre></td></tr></table></figure><p>After waiting for a while, the MD simulation finishes, and the <code>log.lammps</code> and <code>ch4.dump</code> files are generated. They store the thermodynamic information and the trajectory of the molecule, respectively. One may want to visualize the trajectory by, e.g. ovito</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ovito ch4.dump</span><br></pre></td></tr></table></figure><p>to check the evolution of the molecular configuration.</p>]]></content>
      
      
      <categories>
          
          <category> quantum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> deeplearning </tag>
            
            <tag> ASE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DeepMD manual</title>
      <link href="/2021/06/29/quantum/deepmd-kit-manual/"/>
      <url>/2021/06/29/quantum/deepmd-kit-manual/</url>
      
        <content type="html"><![CDATA[<h1 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h1><ul><li><a href="#use-deepmd-kit">Use DeePMD-kit</a><ul><li><a href="#prepare-data">Prepare data</a></li><li><a href="#train-a-model">Train a model</a></li><li><a href="#freeze-a-model">Freeze a model</a></li><li><a href="#test-a-model">Test a model</a></li><li><a href="#model-inference">Model inference</a></li><li><a href="#run-md-with-lammps">Run MD with Lammps</a></li><li><a href="#use-deep-potential-with-ase">Use deep potential with ASE</a></li></ul></li></ul><h1 id="Use-DeePMD-kit"><a href="#Use-DeePMD-kit" class="headerlink" title="Use DeePMD-kit"></a>Use DeePMD-kit</h1><p>In this tutorial, we will call the deep neural network that is used to represent the interatomic interactions (Deep Potential) the <strong>model</strong>. The typical procedure of using DeePMD-kit is </p><ol><li>Prepare data</li><li>Train a model</li><li>Freeze the model</li><li>MD runs with the model (LAMMPS or ASE)</li></ol><blockquote><p>In this tutorial, we will take water as an example to practice the deepmd-kit, the  folders in <code>/root/workshop/deepmd-kit</code> are: </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── ase</span><br><span class="line">│   ├── calc</span><br><span class="line">│   └── ref</span><br><span class="line">├── data</span><br><span class="line">│   ├── deepmd</span><br><span class="line">│   │   ├── set.000</span><br><span class="line">│   │   └── set.001</span><br><span class="line">│   ├── others</span><br><span class="line">│   │   ├── Li</span><br><span class="line">│   │   │   └── deepmd</span><br><span class="line">│   │   │       ├── set.000</span><br><span class="line">│   │   │       └── set.001</span><br><span class="line">│   │   └── multi_systems</span><br><span class="line">│   │       └── deepmd</span><br><span class="line">│   │           ├── Li2</span><br><span class="line">│   │           │   ├── set.000</span><br><span class="line">│   │           │   └── set.001</span><br><span class="line">│   │           └── Li40</span><br><span class="line">│   │               ├── set.000</span><br><span class="line">│   │               └── set.001</span><br><span class="line">│   └── test</span><br><span class="line">│       └── set.000</span><br><span class="line">├── interface</span><br><span class="line">│   ├── calc</span><br><span class="line">│   └── ref</span><br><span class="line">├── lmp</span><br><span class="line">│   ├── calc</span><br><span class="line">│   └── ref</span><br><span class="line">└── train</span><br><span class="line">    ├── calc</span><br><span class="line">    └── ref</span><br></pre></td></tr></table></figure><blockquote><p><code>ase</code> folder contains the script for invoking deep potential from <code>ASE</code><br>,<code>data</code> folder contains the raw data for training, test and practice, <code>interfaces</code> folder contains a simple example for python script, <code>lmp</code> folder contains the input file for LAMMPS MD run and <code>train</code> folder contains the input file for trainning the model. In every folder, the sub-folder <code>ref</code> means the reference data and the <code>calc</code> can be used for your practice.</p></blockquote><h2 id="Prepare-data"><a href="#Prepare-data" class="headerlink" title="Prepare data"></a>Prepare data</h2><p>One needs to extract the following information from DFT calculation to train a model: the atom type, the simulation box, the atom coordinate, the atom force, system energy and virial. A snapshot of a system that contains these information is called a <strong>frame</strong>. We use the following convention of units:</p><table><thead><tr><th>Properties</th><th>Unit</th></tr></thead><tbody><tr><td>Time</td><td>ps</td></tr><tr><td>Length</td><td>Å</td></tr><tr><td>Energy</td><td>eV</td></tr><tr><td>Force</td><td>eV/Å</td></tr><tr><td>Pressure</td><td>Bar</td></tr></tbody></table><p>Once you finished runing the DFT calculation, you may run the following command:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> dpdata <span class="keyword">import</span> LabeledSystem</span><br><span class="line">ls=LabeledSystem(<span class="string">&#x27;OUTCAR&#x27;</span>,fmt=<span class="string">&#x27;outcar&#x27;</span>)</span><br><span class="line">ls.to_deepmd_raw(<span class="string">&#x27;deepmd&#x27;</span>)</span><br><span class="line">ls.to_deepmd_npy(<span class="string">&#x27;deepmd&#x27;</span>,set_size=<span class="number">300</span>)</span><br></pre></td></tr></table></figure><p>then you can convert DFT data into DeepMD-kit format. The directory tree is similar to this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">deepmd/</span><br><span class="line">├── box.raw</span><br><span class="line">├── coord.raw</span><br><span class="line">├── energy.raw</span><br><span class="line">├── force.raw</span><br><span class="line">├── set.000</span><br><span class="line">│   ├── box.npy</span><br><span class="line">│   ├── coord.npy</span><br><span class="line">│   ├── energy.npy</span><br><span class="line">│   └── force.npy</span><br><span class="line">├── set.001</span><br><span class="line">│   ├── box.npy</span><br><span class="line">│   ├── coord.npy</span><br><span class="line">│   ├── energy.npy</span><br><span class="line">│   └── force.npy</span><br><span class="line">├── type_map.raw</span><br><span class="line">└── type.raw</span><br></pre></td></tr></table></figure><blockquote><p> we will skip the above step, since we have already prepared the data set in the folder: <code>/root/workshop/deepmd-kit/data/deepmd</code></p></blockquote><p>You may change directory to this folder:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/workshop/deepmd-kit/data/deepmd</span><br><span class="line">ls</span><br></pre></td></tr></table></figure><p>it contains related files:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box.raw  coord.raw  energy.raw  force.raw  set.000  set.001  type_map.raw  type.raw</span><br></pre></td></tr></table></figure><p>Or you may change directory to this folder:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$  cd /root/workshop/deepmd-kit/data/others/Li</span><br></pre></td></tr></table></figure><p>then run the following command:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python script.py</span><br></pre></td></tr></table></figure><p>The standard output will shows:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Data Summary</span><br><span class="line">Unlabeled System</span><br><span class="line">-------------------</span><br><span class="line">Frame Numbers     : 1</span><br><span class="line">Atom Numbers      : 40</span><br><span class="line">Element List      :</span><br><span class="line">-------------------</span><br><span class="line">Li</span><br><span class="line">40</span><br><span class="line">Data Summary</span><br><span class="line">Labeled System</span><br><span class="line">-------------------</span><br><span class="line">Frame Numbers      : 10</span><br><span class="line">Atom Numbers       : 40</span><br><span class="line">Including Virials  : Yes</span><br><span class="line">Element List       :</span><br><span class="line">-------------------</span><br><span class="line">Li</span><br><span class="line">40</span><br></pre></td></tr></table></figure><p>By running this script, you can convert VASP output file to deepmd raw and npy data format.</p><h2 id="Train-a-model"><a href="#Train-a-model" class="headerlink" title="Train a model"></a>Train a model</h2><h3 id="Write-the-input-script"><a href="#Write-the-input-script" class="headerlink" title="Write the input script"></a>Write the input script</h3><p>Here we provide a small training dataset taken from 400 frames generated by NVT ab-initio water MD trajectory with 300 frames for training and 100 for validation.  One can configure the input file by</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/workshop/deepmd-kit/train/calc</span><br><span class="line">$ <span class="built_in">cat</span>  <span class="built_in">cat</span> water.json </span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_comment&quot;</span>: <span class="string">&quot; model parameters&quot;</span>,</span><br><span class="line">    <span class="string">&quot;model&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;type_map&quot;</span>:[<span class="string">&quot;O&quot;</span>, <span class="string">&quot;H&quot;</span>],</span><br><span class="line"><span class="string">&quot;descriptor&quot;</span> :&#123;</span><br><span class="line">    <span class="string">&quot;type&quot;</span>:<span class="string">&quot;se_a&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sel&quot;</span>:[46, 92],</span><br><span class="line">    <span class="string">&quot;rcut_smth&quot;</span>:5.80,</span><br><span class="line">    <span class="string">&quot;rcut&quot;</span>:6.00,</span><br><span class="line">    <span class="string">&quot;neuron&quot;</span>:[25, 50, 100],</span><br><span class="line">    <span class="string">&quot;resnet_dt&quot;</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;axis_neuron&quot;</span>:16,</span><br><span class="line">    <span class="string">&quot;seed&quot;</span>:1,</span><br><span class="line">    <span class="string">&quot;_comment&quot;</span>:<span class="string">&quot; that&#x27;s all&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;fitting_net&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;neuron&quot;</span>:[240, 240, 240],</span><br><span class="line">    <span class="string">&quot;resnet_dt&quot;</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;seed&quot;</span>:1,</span><br><span class="line">    <span class="string">&quot;_comment&quot;</span>:<span class="string">&quot; that&#x27;s all&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;_comment&quot;</span>:<span class="string">&quot; that&#x27;s all&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;learning_rate&quot;</span> :&#123;</span><br><span class="line"><span class="string">&quot;type&quot;</span>:<span class="string">&quot;exp&quot;</span>,</span><br><span class="line"><span class="string">&quot;start_lr&quot;</span>:0.001,</span><br><span class="line"><span class="string">&quot;decay_steps&quot;</span>:2000,</span><br><span class="line"><span class="string">&quot;decay_rate&quot;</span>:0.95,</span><br><span class="line"><span class="string">&quot;_comment&quot;</span>:<span class="string">&quot;that&#x27;s all&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;loss&quot;</span> :&#123;</span><br><span class="line"><span class="string">&quot;start_pref_e&quot;</span>:0.02,</span><br><span class="line"><span class="string">&quot;limit_pref_e&quot;</span>:1,</span><br><span class="line"><span class="string">&quot;start_pref_f&quot;</span>:1000,</span><br><span class="line"><span class="string">&quot;limit_pref_f&quot;</span>:1,</span><br><span class="line"><span class="string">&quot;start_pref_v&quot;</span>:0,</span><br><span class="line"><span class="string">&quot;limit_pref_v&quot;</span>:0,</span><br><span class="line"><span class="string">&quot;_comment&quot;</span>:<span class="string">&quot; that&#x27;s all&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;_comment&quot;</span>: <span class="string">&quot; traing controls&quot;</span>,</span><br><span class="line">    <span class="string">&quot;training&quot;</span> : &#123;</span><br><span class="line"><span class="string">&quot;systems&quot;</span>:[<span class="string">&quot;../../data/deepmd&quot;</span>],</span><br><span class="line"><span class="string">&quot;set_prefix&quot;</span>:<span class="string">&quot;set&quot;</span>,    </span><br><span class="line"><span class="string">&quot;stop_batch&quot;</span>:400000,</span><br><span class="line"><span class="string">&quot;batch_size&quot;</span>:1,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;seed&quot;</span>:1,</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;_comment&quot;</span>: <span class="string">&quot; display and restart&quot;</span>,</span><br><span class="line"><span class="string">&quot;_comment&quot;</span>: <span class="string">&quot; frequencies counted in batch&quot;</span>,</span><br><span class="line"><span class="string">&quot;disp_file&quot;</span>:<span class="string">&quot;lcurve.out&quot;</span>,</span><br><span class="line"><span class="string">&quot;disp_freq&quot;</span>:100,</span><br><span class="line"><span class="string">&quot;numb_test&quot;</span>:10,</span><br><span class="line"><span class="string">&quot;save_freq&quot;</span>:1000,</span><br><span class="line"><span class="string">&quot;save_ckpt&quot;</span>:<span class="string">&quot;model.ckpt&quot;</span>,</span><br><span class="line"><span class="string">&quot;load_ckpt&quot;</span>:<span class="string">&quot;model.ckpt&quot;</span>,</span><br><span class="line"><span class="string">&quot;disp_training&quot;</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;time_training&quot;</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;profiling&quot;</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;profiling_file&quot;</span>:<span class="string">&quot;timeline.json&quot;</span>,</span><br><span class="line"><span class="string">&quot;_comment&quot;</span>:<span class="string">&quot;that&#x27;s all&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;_comment&quot;</span>:<span class="string">&quot;that&#x27;s all&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>where <code>water.json</code> is the <code>json</code> format parameter file that controls the training.</p><h3 id="Training"><a href="#Training" class="headerlink" title="Training"></a>Training</h3><p>The training can be invoked by</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$  <span class="built_in">cd</span> /root/workshop/deepmd-kit/train/calc</span><br><span class="line">$  dp train water.json 1&gt; runlog 2&gt;err &amp;</span><br></pre></td></tr></table></figure><p>During the training, the error of the model is tested every <strong><code>disp_freq</code></strong> batches with <strong><code>numb_test</code></strong> frames from the last set in the <strong><code>systems</code></strong> directory on the fly, and the results are output to <strong><code>lcurve.out</code></strong>. A typical <code>lcurve.out</code> looks like</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># batch      l2_tst    l2_trn    l2_e_tst  l2_e_trn    l2_f_tst  l2_f_trn         lr</span></span><br><span class="line">      0    3.25e+01  3.23e+01    1.03e+01  1.03e+01    8.08e-01  8.01e-01    1.0e-03</span><br><span class="line">    100    2.59e+01  2.67e+01    1.71e+00  1.70e+00    8.13e-01  8.39e-01    1.0e-03</span><br><span class="line">    200    2.54e+01  2.59e+01    2.25e-01  2.29e-01    8.03e-01  8.19e-01    1.0e-03</span><br><span class="line">    300    2.44e+01  2.30e+01    1.55e-01  1.55e-01    7.72e-01  7.27e-01    1.0e-03</span><br><span class="line">    400    2.21e+01  2.19e+01    3.00e-01  3.08e-01    6.98e-01  6.93e-01    1.0e-03</span><br><span class="line">    500    2.05e+01  1.94e+01    1.71e-01  1.76e-01    6.48e-01  6.14e-01    1.0e-03</span><br><span class="line">    600    1.46e+01  1.49e+01    1.42e-01  1.37e-01    4.61e-01  4.70e-01    1.0e-03</span><br><span class="line">    700    1.22e+01  1.19e+01    1.31e-01  1.32e-01    3.85e-01  3.75e-01    1.0e-03</span><br><span class="line">    800    1.35e+01  1.35e+01    3.74e-02  4.24e-02    4.28e-01  4.28e-01    1.0e-03</span><br><span class="line">    900    9.58e+00  9.21e+00    1.09e-01  1.12e-01    3.03e-01  2.91e-01    1.0e-03</span><br><span class="line">   1000    8.88e+00  8.60e+00    3.31e-02  3.46e-02    2.81e-01  2.72e-01    1.0e-03</span><br><span class="line">   1100    8.47e+00  9.02e+00    6.44e-03  5.08e-03    2.68e-01  2.85e-01    1.0e-03</span><br><span class="line">   1200    9.03e+00  8.85e+00    4.14e-02  4.10e-02    2.86e-01  2.80e-01    1.0e-03</span><br></pre></td></tr></table></figure><h2 id="Freeze-a-model"><a href="#Freeze-a-model" class="headerlink" title="Freeze a model"></a>Freeze a model</h2><p>After finishing training, the trained neural network can be extracted from a checkpoint and dumped into a database. This process is called “freezing” a model. To freeze a model, typically one does</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/workshop/deepmd-kit/train/calc</span><br><span class="line">$ dp freeze -o graph.pb</span><br></pre></td></tr></table></figure><p>in the folder where the model is trained. The output database is called <code>graph.pb</code>.</p><h2 id="Test-a-model"><a href="#Test-a-model" class="headerlink" title="Test a model"></a>Test a model</h2><p>The frozen model can be used in many ways.The most straightforward test can be performed using <code>dp test</code>. Assuming that you have prepared the test set in folder: <code>/root/workshop/deepmd-kit/data/test</code>. To test the performace of model, you should run the following command: </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /root/workshop/deepmd-kit/train/calc</span><br><span class="line">$ dp <span class="built_in">test</span> -m graph.pb -s /root/workshop/deepmd-kit/data/test -d result</span><br></pre></td></tr></table></figure><p>The standard ouput is:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># number of test data : 30 </span></span><br><span class="line">Energy L2err        : 1.358342e-01 eV</span><br><span class="line">Energy L2err/Natoms : 7.074696e-04 eV</span><br><span class="line">Force  L2err        : 3.553606e-02 eV/A</span><br><span class="line">Virial L2err        : 5.000555e+00 eV</span><br><span class="line">Virial L2err/Natoms : 2.604456e-02 eV</span><br></pre></td></tr></table></figure><p>at the same time, the output files <code>result.e.out</code>,  <code>result.f.out</code> and <code>result.v.out</code>  will record the predicted energy, force and viral information.</p><h2 id="Model-inference"><a href="#Model-inference" class="headerlink" title="Model inference"></a>Model inference</h2><p>To use the python interface of DeePMD-kit for model inference, an example is given as follows</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> deepmd.DeepPot <span class="keyword">as</span> DP</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">dp = DP(<span class="string">&#x27;graph.pb&#x27;</span>)</span><br><span class="line">coord = np.array([[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>], [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1.5</span>], [<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>]]).reshape([<span class="number">1</span>, -<span class="number">1</span>])</span><br><span class="line">cell = np.diag(<span class="number">10</span> * np.ones(<span class="number">3</span>)).reshape([<span class="number">1</span>, -<span class="number">1</span>])</span><br><span class="line">atype = [<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">e, f, v = dp.<span class="built_in">eval</span>(coord, cell, atype)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">pprint(e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">pprint(f)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span>*<span class="number">20</span>)</span><br><span class="line">pprint(v)</span><br></pre></td></tr></table></figure><p>where <code>e</code>, <code>f</code> and <code>v</code> are predicted energy, force and virial of the system, respectively.</p><p>To run this example, just type:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /root/workshop/deepmd-kit/interfaces/calc</span><br><span class="line">$ python -u run.py | tee run.log</span><br></pre></td></tr></table></figure><h2 id="Run-MD-with-LAMMPS"><a href="#Run-MD-with-LAMMPS" class="headerlink" title="Run MD with LAMMPS"></a>Run MD with LAMMPS</h2><h3 id="Include-deepmd-in-the-pair-style"><a href="#Include-deepmd-in-the-pair-style" class="headerlink" title="Include deepmd in the pair style"></a>Include deepmd in the pair style</h3><p>Here we will use the previous water potential to run MD with LAMMPS. In the LAMMPS input file, one needs to specify the pair style as follows</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># bulk water</span></span><br><span class="line"></span><br><span class="line">units           metal</span><br><span class="line">boundary        p p p</span><br><span class="line">atom_style      atomic</span><br><span class="line"></span><br><span class="line">neighbor        2.0 bin</span><br><span class="line">neigh_modify    every 10 delay 0 check no</span><br><span class="line"></span><br><span class="line">read_datawater.lmp</span><br><span class="line">mass 1 16</span><br><span class="line">mass2 2</span><br><span class="line"></span><br><span class="line">pair_styledeepmd graph.pb</span><br><span class="line">pair_coeff</span><br><span class="line"></span><br><span class="line">velocity        all create 330.0 23456789</span><br><span class="line"></span><br><span class="line">fix             1 all nvt temp 330.0 330.0 0.5</span><br><span class="line">timestep        0.0005</span><br><span class="line">thermo_style    custom step pe ke etotal temp press vol</span><br><span class="line">thermo          100</span><br><span class="line">dump1 all custom 100 water.dump <span class="built_in">id</span> <span class="built_in">type</span> x y z </span><br><span class="line"></span><br><span class="line">run             1000f     </span><br></pre></td></tr></table></figure><p>where <code>graph.pb</code> is the file name of the frozen model. The <code>pair_coeff</code> should be left blank. It should be noted that LAMMPS counts atom types starting from 1, therefore, all LAMMPS atom type will be firstly subtracted by 1, and then passed into the DeePMD-kit engine to compute the interactions. </p><p>To run this example, just type:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /root/workshop/deepmd-kit/lmp/calc</span><br><span class="line">$ lmp -in in.lammps  | tee run.log</span><br></pre></td></tr></table></figure><h2 id="Use-deep-potential-with-ASE"><a href="#Use-deep-potential-with-ASE" class="headerlink" title="Use deep potential with ASE"></a>Use deep potential with ASE</h2><p>Deep potential can be set up as a calculator with ASE to obtain potential energies and forces.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ase <span class="keyword">import</span> Atoms</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> deepmd.calculator <span class="keyword">import</span> DP</span><br><span class="line">water = Atoms(<span class="string">&#x27;H2O&#x27;</span>,</span><br><span class="line">              positions=[(<span class="number">0.7601</span>, <span class="number">1.9270</span>, <span class="number">1</span>),</span><br><span class="line">                         (<span class="number">1.9575</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                         (<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>)],</span><br><span class="line">              cell=[<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>],</span><br><span class="line">              calculator=DP(model=<span class="string">&quot;graph.pb&quot;</span>))</span><br><span class="line">pprint(water.get_potential_energy())</span><br><span class="line">pprint(water.get_forces())</span><br></pre></td></tr></table></figure><p>To run this example, just type:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /root/workshop/deepmd-kit/ase/calc</span><br><span class="line">$ python run.py  | tee run.log</span><br></pre></td></tr></table></figure><p>Optimization is also available:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ase <span class="keyword">import</span> Atoms</span><br><span class="line"><span class="keyword">from</span> ase.optimize <span class="keyword">import</span> BFGS</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line"><span class="keyword">from</span> deepmd.calculator <span class="keyword">import</span> DP</span><br><span class="line"></span><br><span class="line">water = Atoms(<span class="string">&#x27;H2O&#x27;</span>,</span><br><span class="line">              positions=[(<span class="number">0.7601</span>, <span class="number">1.9270</span>, <span class="number">1</span>),</span><br><span class="line">                         (<span class="number">1.9575</span>, <span class="number">1</span>, <span class="number">1</span>),</span><br><span class="line">                         (<span class="number">1.</span>, <span class="number">1.</span>, <span class="number">1.</span>)],</span><br><span class="line">              cell=[<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>],</span><br><span class="line">              calculator=DP(model=<span class="string">&quot;graph.pb&quot;</span>))</span><br><span class="line">dyn = BFGS(water)</span><br><span class="line">dyn.run(fmax=<span class="number">1e-6</span>)</span><br><span class="line"><span class="built_in">print</span>(water.get_positions())</span><br><span class="line"><span class="built_in">print</span>(water.get_potential_energy())</span><br><span class="line"><span class="built_in">print</span>(water.get_forces())</span><br></pre></td></tr></table></figure><p>To run this example, just type:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /root/workshop/deepmd-kit/ase/calc</span><br><span class="line">$ python opt.py  | tee opt.log</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> quantum </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> deeplearning </tag>
            
            <tag> ASE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/12/hello-world/"/>
      <url>/2018/09/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
